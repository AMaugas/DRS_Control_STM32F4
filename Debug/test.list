
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004148  08004148  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004150  08004150  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  080041c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080041c8  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfa0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ff3  00000000  00000000  0002c040  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002e038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f8  00000000  00000000  0002e948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228d1  00000000  00000000  0002f140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000924c  00000000  00000000  00051a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c982c  00000000  00000000  0005ac5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a00  00000000  00000000  00124504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800405c 	.word	0x0800405c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800405c 	.word	0x0800405c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <initializeServoBus>:
 */

#include "HerkulexServo.h"

HerkulexServoBus *initializeServoBus(UART_HandleTypeDef *HUART_Handler)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    HerkulexServoBus *servoBus = (HerkulexServoBus *)malloc(sizeof(HerkulexServoBus));
 80005b8:	2070      	movs	r0, #112	; 0x70
 80005ba:	f002 fe5b 	bl	8003274 <malloc>
 80005be:	4603      	mov	r3, r0
 80005c0:	60bb      	str	r3, [r7, #8]

    if (servoBus != NULL)
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d061      	beq.n	800068c <initializeServoBus+0xdc>
    {
        servoBus->m_serial = HUART_Handler;
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	73fb      	strb	r3, [r7, #15]
 80005d2:	e007      	b.n	80005e4 <initializeServoBus+0x34>
        {
            servoBus->m_rx_buffer[i] = 0;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	4413      	add	r3, r2
 80005da:	2200      	movs	r2, #0
 80005dc:	711a      	strb	r2, [r3, #4]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	d9f4      	bls.n	80005d4 <initializeServoBus+0x24>
        }
        servoBus->m_last_serial = 0;
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	f04f 0300 	mov.w	r3, #0
 80005f0:	f04f 0400 	mov.w	r4, #0
 80005f4:	e9c2 3404 	strd	r3, r4, [r2, #16]

        servoBus->m_rx_packet.size = 0x00;
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
        servoBus->m_rx_packet.id = 0x00;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2200      	movs	r2, #0
 8000602:	765a      	strb	r2, [r3, #25]
        servoBus->m_rx_packet.cmd = HerkulexCommand_None;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2200      	movs	r2, #0
 8000608:	769a      	strb	r2, [r3, #26]
        servoBus->m_rx_packet.checksum1 = 0x00;
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2200      	movs	r2, #0
 800060e:	76da      	strb	r2, [r3, #27]
        servoBus->m_rx_packet.checksum2 = 0x00;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	2200      	movs	r2, #0
 8000614:	771a      	strb	r2, [r3, #28]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	73bb      	strb	r3, [r7, #14]
 800061a:	e009      	b.n	8000630 <initializeServoBus+0x80>
        {
            *(servoBus->m_rx_packet.data + i) = 0;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	f103 021d 	add.w	r2, r3, #29
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	3301      	adds	r3, #1
 800062e:	73bb      	strb	r3, [r7, #14]
 8000630:	7bbb      	ldrb	r3, [r7, #14]
 8000632:	2b09      	cmp	r3, #9
 8000634:	d9f2      	bls.n	800061c <initializeServoBus+0x6c>
        }

        servoBus->m_rx_packet.status_error = HerkulexStatusError_None;
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        servoBus->m_rx_packet.status_detail = HerkulexStatusDetail_None;
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        servoBus->m_rx_packet.error = HerkulexPacketError_None;
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        servoBus->m_rx_packet_ready = 0;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2200      	movs	r2, #0
 8000652:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        for (uint8_t i = 0; i < HERKULEX_SERIAL_TX_BUFFER; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	737b      	strb	r3, [r7, #13]
 800065a:	e009      	b.n	8000670 <initializeServoBus+0xc0>
        {
            *(servoBus->m_tx_buffer + i) = 0;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 8000662:	7b7b      	ldrb	r3, [r7, #13]
 8000664:	4413      	add	r3, r2
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < HERKULEX_SERIAL_TX_BUFFER; i++)
 800066a:	7b7b      	ldrb	r3, [r7, #13]
 800066c:	3301      	adds	r3, #1
 800066e:	737b      	strb	r3, [r7, #13]
 8000670:	7b7b      	ldrb	r3, [r7, #13]
 8000672:	2b32      	cmp	r3, #50	; 0x32
 8000674:	d9f2      	bls.n	800065c <initializeServoBus+0xac>
        }
        servoBus->m_move_tags = 0;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	2200      	movs	r2, #0
 800067a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        servoBus->m_schedule_state = HerkulexScheduleState_None;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	2200      	movs	r2, #0
 8000682:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

        servoBus->sendPacket = &sendPacket;
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <initializeServoBus+0xe8>)
 800068a:	661a      	str	r2, [r3, #96]	; 0x60
/*         servoBus->sendPacketAndReadResponse = &sendPacketAndReadResponse;
 */    }
return servoBus;
 800068c:	68bb      	ldr	r3, [r7, #8]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	bf00      	nop
 8000698:	0800069d 	.word	0x0800069d

0800069c <sendPacket>:

void sendPacket(HerkulexServoBus *self, uint8_t id, HerkulexCommand cmd, uint8_t *pData, uint8_t dataLen)
{
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	72fb      	strb	r3, [r7, #11]
 80006aa:	4613      	mov	r3, r2
 80006ac:	72bb      	strb	r3, [r7, #10]
 80006ae:	466b      	mov	r3, sp
 80006b0:	461d      	mov	r5, r3
    uint8_t checksum1;
    uint8_t checksum2;
    uint8_t packetSize = 7 + dataLen;
 80006b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006b6:	3307      	adds	r3, #7
 80006b8:	773b      	strb	r3, [r7, #28]
    /* uint8_t packet[7] = {0xFF, 0xFF, packetSize, id, (uint8_t)cmd, 0x00, 0x00}; */

    uint8_t packet[packetSize];
 80006ba:	7f38      	ldrb	r0, [r7, #28]
 80006bc:	4603      	mov	r3, r0
 80006be:	3b01      	subs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	b2c1      	uxtb	r1, r0
 80006c4:	f04f 0200 	mov.w	r2, #0
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	f04f 0400 	mov.w	r4, #0
 80006d0:	00d4      	lsls	r4, r2, #3
 80006d2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80006d6:	00cb      	lsls	r3, r1, #3
 80006d8:	b2c1      	uxtb	r1, r0
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	f04f 0400 	mov.w	r4, #0
 80006e6:	00d4      	lsls	r4, r2, #3
 80006e8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80006ec:	00cb      	lsls	r3, r1, #3
 80006ee:	4603      	mov	r3, r0
 80006f0:	3307      	adds	r3, #7
 80006f2:	08db      	lsrs	r3, r3, #3
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	ebad 0d03 	sub.w	sp, sp, r3
 80006fa:	466b      	mov	r3, sp
 80006fc:	3300      	adds	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
    packet[0] = 0xFF;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	22ff      	movs	r2, #255	; 0xff
 8000704:	701a      	strb	r2, [r3, #0]
    packet[1] = 0xFF;
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	22ff      	movs	r2, #255	; 0xff
 800070a:	705a      	strb	r2, [r3, #1]
    packet[2] = packetSize;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	7f3a      	ldrb	r2, [r7, #28]
 8000710:	709a      	strb	r2, [r3, #2]
    packet[3] = id;
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	7afa      	ldrb	r2, [r7, #11]
 8000716:	70da      	strb	r2, [r3, #3]
    packet[4] = (uint8_t)cmd;
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	7aba      	ldrb	r2, [r7, #10]
 800071c:	711a      	strb	r2, [r3, #4]

    checksum1 = packetSize ^ id ^ (uint8_t)cmd;
 800071e:	7f3a      	ldrb	r2, [r7, #28]
 8000720:	7afb      	ldrb	r3, [r7, #11]
 8000722:	4053      	eors	r3, r2
 8000724:	b2da      	uxtb	r2, r3
 8000726:	7abb      	ldrb	r3, [r7, #10]
 8000728:	4053      	eors	r3, r2
 800072a:	777b      	strb	r3, [r7, #29]

    if (pData && dataLen > 0)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d01d      	beq.n	800076e <sendPacket+0xd2>
 8000732:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000736:	2b00      	cmp	r3, #0
 8000738:	d019      	beq.n	800076e <sendPacket+0xd2>
    {
        for (uint8_t i = 0; i < dataLen; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	77bb      	strb	r3, [r7, #30]
 800073e:	e011      	b.n	8000764 <sendPacket+0xc8>
        {
            checksum1 ^= *(pData + i);
 8000740:	7fbb      	ldrb	r3, [r7, #30]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	7f7b      	ldrb	r3, [r7, #29]
 800074a:	4053      	eors	r3, r2
 800074c:	777b      	strb	r3, [r7, #29]
            packet[7 + i] = *(pData + i);
 800074e:	7fbb      	ldrb	r3, [r7, #30]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	441a      	add	r2, r3
 8000754:	7fbb      	ldrb	r3, [r7, #30]
 8000756:	3307      	adds	r3, #7
 8000758:	7811      	ldrb	r1, [r2, #0]
 800075a:	697a      	ldr	r2, [r7, #20]
 800075c:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < dataLen; i++)
 800075e:	7fbb      	ldrb	r3, [r7, #30]
 8000760:	3301      	adds	r3, #1
 8000762:	77bb      	strb	r3, [r7, #30]
 8000764:	7fba      	ldrb	r2, [r7, #30]
 8000766:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800076a:	429a      	cmp	r2, r3
 800076c:	d3e8      	bcc.n	8000740 <sendPacket+0xa4>
        }
    }

    checksum1 = checksum1 & 0xFE;
 800076e:	7f7b      	ldrb	r3, [r7, #29]
 8000770:	f023 0301 	bic.w	r3, r3, #1
 8000774:	777b      	strb	r3, [r7, #29]
    checksum2 = (~checksum1) & 0xFE;
 8000776:	7f7b      	ldrb	r3, [r7, #29]
 8000778:	43db      	mvns	r3, r3
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	74fb      	strb	r3, [r7, #19]

    packet[5] = checksum1;
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	7f7a      	ldrb	r2, [r7, #29]
 8000786:	715a      	strb	r2, [r3, #5]
    packet[6] = checksum2;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	7cfa      	ldrb	r2, [r7, #19]
 800078c:	719a      	strb	r2, [r3, #6]
    }

    printf("\n\r");
 */

    HAL_UART_Transmit(self->m_serial, packet, packetSize, 10);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	6979      	ldr	r1, [r7, #20]
 8000794:	7f3b      	ldrb	r3, [r7, #28]
 8000796:	b29a      	uxth	r2, r3
 8000798:	230a      	movs	r3, #10
 800079a:	f002 f822 	bl	80027e2 <HAL_UART_Transmit>
    printf("Packet sent : ");
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <sendPacket+0x13c>)
 80007a0:	f002 fe20 	bl	80033e4 <iprintf>
    for (uint8_t i = 0; i < packetSize;i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	77fb      	strb	r3, [r7, #31]
 80007a8:	e009      	b.n	80007be <sendPacket+0x122>
    {
        printf("0x%.2X ", packet[i]);
 80007aa:	7ffb      	ldrb	r3, [r7, #31]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	5cd3      	ldrb	r3, [r2, r3]
 80007b0:	4619      	mov	r1, r3
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <sendPacket+0x140>)
 80007b4:	f002 fe16 	bl	80033e4 <iprintf>
    for (uint8_t i = 0; i < packetSize;i++)
 80007b8:	7ffb      	ldrb	r3, [r7, #31]
 80007ba:	3301      	adds	r3, #1
 80007bc:	77fb      	strb	r3, [r7, #31]
 80007be:	7ffa      	ldrb	r2, [r7, #31]
 80007c0:	7f3b      	ldrb	r3, [r7, #28]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d3f1      	bcc.n	80007aa <sendPacket+0x10e>
    }
    printf("\n\r");
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <sendPacket+0x144>)
 80007c8:	f002 fe0c 	bl	80033e4 <iprintf>
 80007cc:	46ad      	mov	sp, r5
}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bdb0      	pop	{r4, r5, r7, pc}
 80007d6:	bf00      	nop
 80007d8:	08004074 	.word	0x08004074
 80007dc:	08004084 	.word	0x08004084
 80007e0:	0800408c 	.word	0x0800408c

080007e4 <initializeServo>:

HerkulexPacket m_response = {0, 0, HerkulexCommand_None, 0, 0, {0}, HerkulexStatusError_None, HerkulexStatusDetail_None, HerkulexPacketError_None};
uint8_t tx_buffer[5] = {0, 0, 0, 0, 0};

HerkulexServo *initializeServo(HerkulexServoBus *servoBus, uint8_t id)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
    HerkulexServo *servo = (HerkulexServo *)malloc(sizeof(HerkulexServo));
 80007f0:	2010      	movs	r0, #16
 80007f2:	f002 fd3f 	bl	8003274 <malloc>
 80007f6:	4603      	mov	r3, r0
 80007f8:	60fb      	str	r3, [r7, #12]

    if (servo != NULL)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d011      	beq.n	8000824 <initializeServo+0x40>
    {
        servo->m_bus = servoBus;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
        servo->m_id = id;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	78fa      	ldrb	r2, [r7, #3]
 800080a:	711a      	strb	r2, [r3, #4]
        servo->m_led = HerkulexLed_Off;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2200      	movs	r2, #0
 8000810:	715a      	strb	r2, [r3, #5]
        servo->m_position_control_mode = 1;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	2201      	movs	r2, #1
 8000816:	719a      	strb	r2, [r3, #6]
        servo->m_response = &m_response;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <initializeServo+0x4c>)
 800081c:	609a      	str	r2, [r3, #8]
        servo->m_tx_buffer = tx_buffer;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <initializeServo+0x50>)
 8000822:	60da      	str	r2, [r3, #12]
    }

    return servo;
 8000824:	68fb      	ldr	r3, [r7, #12]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000008c 	.word	0x2000008c
 8000834:	200000a0 	.word	0x200000a0

08000838 <writeRam>:

    servo->m_led = color;
    writeRam(servo, HerkulexRamRegister_LedControl, (uint8_t)color);
}
void writeRam(HerkulexServo *servo, HerkulexRamRegister reg, uint8_t val)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af02      	add	r7, sp, #8
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
 8000844:	4613      	mov	r3, r2
 8000846:	70bb      	strb	r3, [r7, #2]
    *(servo->m_tx_buffer + 0) = (uint8_t)reg;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	78fa      	ldrb	r2, [r7, #3]
 800084e:	701a      	strb	r2, [r3, #0]
    *(servo->m_tx_buffer + 1) = 1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	3301      	adds	r3, #1
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
    *(servo->m_tx_buffer + 2) = val;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	3302      	adds	r3, #2
 8000860:	78ba      	ldrb	r2, [r7, #2]
 8000862:	701a      	strb	r2, [r3, #0]

    servo->m_bus->sendPacket(servo->m_bus, servo->m_id, HerkulexCommand_RamWrite, servo->m_tx_buffer, 3);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7919      	ldrb	r1, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68da      	ldr	r2, [r3, #12]
 8000876:	2303      	movs	r3, #3
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	4613      	mov	r3, r2
 800087c:	2203      	movs	r2, #3
 800087e:	47a0      	blx	r4
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bd90      	pop	{r4, r7, pc}

08000888 <writeEep>:

    servo->m_bus->sendPacket(servo->m_bus, servo->m_id, HerkulexCommand_RamWrite, servo->m_tx_buffer, 4);
}

void writeEep(HerkulexServo *servo, HerkulexRamRegister reg, uint8_t val)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b085      	sub	sp, #20
 800088c:	af02      	add	r7, sp, #8
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
 8000894:	4613      	mov	r3, r2
 8000896:	70bb      	strb	r3, [r7, #2]
    *(servo->m_tx_buffer + 0) = (uint8_t)reg;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	78fa      	ldrb	r2, [r7, #3]
 800089e:	701a      	strb	r2, [r3, #0]
    *(servo->m_tx_buffer + 1) = 1;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
    *(servo->m_tx_buffer + 2) = val;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	3302      	adds	r3, #2
 80008b0:	78ba      	ldrb	r2, [r7, #2]
 80008b2:	701a      	strb	r2, [r3, #0]

    servo->m_bus->sendPacket(servo->m_bus, servo->m_id, HerkulexCommand_EepWrite, servo->m_tx_buffer, 3);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6818      	ldr	r0, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	7919      	ldrb	r1, [r3, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68da      	ldr	r2, [r3, #12]
 80008c6:	2303      	movs	r3, #3
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	4613      	mov	r3, r2
 80008cc:	2201      	movs	r2, #1
 80008ce:	47a0      	blx	r4
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd90      	pop	{r4, r7, pc}

080008d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_DMA_Init+0x3c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <MX_DMA_Init+0x3c>)
 80008e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_DMA_Init+0x3c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	200b      	movs	r0, #11
 8000900:	f000 fd41 	bl	8001386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000904:	200b      	movs	r0, #11
 8000906:	f000 fd5a 	bl	80013be <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a29      	ldr	r2, [pc, #164]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a22      	ldr	r2, [pc, #136]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_GPIO_Init+0xc4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_GPIO_Init+0xc4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2120      	movs	r1, #32
 8000986:	4816      	ldr	r0, [pc, #88]	; (80009e0 <MX_GPIO_Init+0xc8>)
 8000988:	f001 f9d0 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_GPIO_Init+0xcc>)
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_GPIO_Init+0xd0>)
 80009a2:	f001 f831 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80009a6:	2320      	movs	r3, #32
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4619      	mov	r1, r3
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_GPIO_Init+0xc8>)
 80009be:	f001 f823 	bl	8001a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2028      	movs	r0, #40	; 0x28
 80009c8:	f000 fcdd 	bl	8001386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009cc:	2028      	movs	r0, #40	; 0x28
 80009ce:	f000 fcf6 	bl	80013be <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	10210000 	.word	0x10210000
 80009e8:	40020800 	.word	0x40020800

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009f2:	f000 fb7b 	bl	80010ec <HAL_Init>

	/* USER CODE BEGIN Init */
	buttonPressed = 0;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <main+0x84>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
	receivedUART = 0;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <main+0x88>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
	passed = 0;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <main+0x8c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]

	HerkulexServoBus *herkulexBus = initializeServoBus(&huart5);
 8000a08:	481c      	ldr	r0, [pc, #112]	; (8000a7c <main+0x90>)
 8000a0a:	f7ff fdd1 	bl	80005b0 <initializeServoBus>
 8000a0e:	60f8      	str	r0, [r7, #12]
	// HerkulexServo *chevilleDroite = initializeServo(herkulexBus, 0x32);
	// HerkulexServo *genouDroit = initializeServo(herkulexBus, 0x31);
	HerkulexServo *oldServo = initializeServo(herkulexBus, 0xFD);
 8000a10:	21fd      	movs	r1, #253	; 0xfd
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fee6 	bl	80007e4 <initializeServo>
 8000a18:	60b8      	str	r0, [r7, #8]
	HerkulexServo *newServo = initializeServo(herkulexBus, 0xCA);
 8000a1a:	21ca      	movs	r1, #202	; 0xca
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f7ff fee1 	bl	80007e4 <initializeServo>
 8000a22:	6078      	str	r0, [r7, #4]
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a24:	f000 f82e 	bl	8000a84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a28:	f7ff ff76 	bl	8000918 <MX_GPIO_Init>
	MX_UART5_Init();
 8000a2c:	f000 fa06 	bl	8000e3c <MX_UART5_Init>
	MX_USART2_UART_Init();
 8000a30:	f000 fa2e 	bl	8000e90 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8000a34:	f7ff ff50 	bl	80008d8 <MX_DMA_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (buttonPressed)
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <main+0x84>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0fb      	beq.n	8000a38 <main+0x4c>
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000a40:	2120      	movs	r1, #32
 8000a42:	480f      	ldr	r0, [pc, #60]	; (8000a80 <main+0x94>)
 8000a44:	f001 f98b 	bl	8001d5e <HAL_GPIO_TogglePin>

			//			setPosition(chevilleDroite, 512, 100, HerkulexLed_Blue);
			//			setPosition(genouDroit, 512, 100, HerkulexLed_Blue);
			writeEep(oldServo, HerkulexEepRegister_ID, 0xCA);
 8000a48:	22ca      	movs	r2, #202	; 0xca
 8000a4a:	2106      	movs	r1, #6
 8000a4c:	68b8      	ldr	r0, [r7, #8]
 8000a4e:	f7ff ff1b 	bl	8000888 <writeEep>
			writeRam(oldServo, HerkulexRamRegister_ID, 0xCA);
 8000a52:	22ca      	movs	r2, #202	; 0xca
 8000a54:	2100      	movs	r1, #0
 8000a56:	68b8      	ldr	r0, [r7, #8]
 8000a58:	f7ff feee 	bl	8000838 <writeRam>
			writeEep(newServo, HerkulexEepRegister_BaudRate, 0x22);
 8000a5c:	2222      	movs	r2, #34	; 0x22
 8000a5e:	2104      	movs	r1, #4
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff11 	bl	8000888 <writeEep>
			//		  passed = 0;
			buttonPressed = 0;
 8000a66:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <main+0x84>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
		if (buttonPressed)
 8000a6c:	e7e4      	b.n	8000a38 <main+0x4c>
 8000a6e:	bf00      	nop
 8000a70:	200000d9 	.word	0x200000d9
 8000a74:	200000da 	.word	0x200000da
 8000a78:	200000d8 	.word	0x200000d8
 8000a7c:	200000dc 	.word	0x200000dc
 8000a80:	40020000 	.word	0x40020000

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b094      	sub	sp, #80	; 0x50
 8000a88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2234      	movs	r2, #52	; 0x34
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fbf6 	bl	8003284 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage 
  */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <SystemClock_Config+0xb8>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <SystemClock_Config+0xb8>)
 8000ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <SystemClock_Config+0xb8>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <SystemClock_Config+0xbc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <SystemClock_Config+0xbc>)
 8000ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <SystemClock_Config+0xbc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks 
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aec:	2310      	movs	r3, #16
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 fbcb 	bl	8002294 <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000b04:	f000 f850 	bl	8000ba8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks 
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b08:	230f      	movs	r3, #15
 8000b0a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 f94e 	bl	8001dc4 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000b2e:	f000 f83b 	bl	8000ba8 <Error_Handler>
	}
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	; 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b4c:	1d39      	adds	r1, r7, #4
 8000b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b52:	2201      	movs	r2, #1
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <__io_putchar+0x20>)
 8000b56:	f001 fe44 	bl	80027e2 <HAL_UART_Transmit>

	return ch;
 8000b5a:	687b      	ldr	r3, [r7, #4]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000011c 	.word	0x2000011c

08000b68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
	buttonPressed = 1;
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	200000d9 	.word	0x200000d9

08000b88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 * the HAL_UART_RxCpltCallback could be implemented in the user file
	 * */
	receivedUART = 1;
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <HAL_UART_RxCpltCallback+0x1c>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000da 	.word	0x200000da

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 fa98 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <DMA1_Stream0_IRQHandler+0x10>)
 8000c6a:	f000 fc93 	bl	8001594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000015c 	.word	0x2000015c

08000c78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c80:	f001 f888 	bl	8001d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <UART5_IRQHandler+0x10>)
 8000c8e:	f001 fe41 	bl	8002914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000dc 	.word	0x200000dc

08000c9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e00a      	b.n	8000cc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cae:	f3af 8000 	nop.w
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf0      	blt.n	8000cae <_read+0x12>
	}

return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e009      	b.n	8000cfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff27 	bl	8000b44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbf1      	blt.n	8000ce8 <_write+0x12>
	}
	return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_close>:

int _close(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
	return -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d36:	605a      	str	r2, [r3, #4]
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_isatty>:

int _isatty(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
	return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x50>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x16>
		heap_end = &end;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <_sbrk+0x50>)
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <_sbrk+0x54>)
 8000d8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <_sbrk+0x50>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <_sbrk+0x50>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	466a      	mov	r2, sp
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d907      	bls.n	8000db2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000da2:	f002 fa3d 	bl	8003220 <__errno>
 8000da6:	4602      	mov	r2, r0
 8000da8:	230c      	movs	r3, #12
 8000daa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	e006      	b.n	8000dc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <_sbrk+0x50>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <_sbrk+0x50>)
 8000dbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200000a8 	.word	0x200000a8
 8000dcc:	200001c8 	.word	0x200001c8

08000dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <SystemInit+0x60>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <SystemInit+0x60>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <SystemInit+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <SystemInit+0x64>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <SystemInit+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <SystemInit+0x64>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <SystemInit+0x64>)
 8000dfc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <SystemInit+0x64>)
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <SystemInit+0x68>)
 8000e0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <SystemInit+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <SystemInit+0x64>)
 8000e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SystemInit+0x60>)
 8000e20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e24:	609a      	str	r2, [r3, #8]
#endif
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00
 8000e34:	40023800 	.word	0x40023800
 8000e38:	24003010 	.word	0x24003010

08000e3c <MX_UART5_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_UART5_Init+0x4c>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_UART5_Init+0x50>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_UART5_Init+0x4c>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_UART5_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_UART5_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_UART5_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_UART5_Init+0x4c>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_UART5_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_UART5_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_UART5_Init+0x4c>)
 8000e74:	f001 fc68 	bl	8002748 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000e7e:	f7ff fe93 	bl	8000ba8 <Error_Handler>
  }

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000dc 	.word	0x200000dc
 8000e8c:	40005000 	.word	0x40005000

08000e90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ec8:	f001 fc3e 	bl	8002748 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ed2:	f7ff fe69 	bl	8000ba8 <Error_Handler>
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000011c 	.word	0x2000011c
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a5d      	ldr	r2, [pc, #372]	; (8001078 <HAL_UART_MspInit+0x194>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	f040 8083 	bne.w	800100e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	4b5b      	ldr	r3, [pc, #364]	; (800107c <HAL_UART_MspInit+0x198>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	4a5a      	ldr	r2, [pc, #360]	; (800107c <HAL_UART_MspInit+0x198>)
 8000f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f16:	6413      	str	r3, [r2, #64]	; 0x40
 8000f18:	4b58      	ldr	r3, [pc, #352]	; (800107c <HAL_UART_MspInit+0x198>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	4b54      	ldr	r3, [pc, #336]	; (800107c <HAL_UART_MspInit+0x198>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	4a53      	ldr	r2, [pc, #332]	; (800107c <HAL_UART_MspInit+0x198>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6313      	str	r3, [r2, #48]	; 0x30
 8000f34:	4b51      	ldr	r3, [pc, #324]	; (800107c <HAL_UART_MspInit+0x198>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	4b4d      	ldr	r3, [pc, #308]	; (800107c <HAL_UART_MspInit+0x198>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	4a4c      	ldr	r2, [pc, #304]	; (800107c <HAL_UART_MspInit+0x198>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f50:	4b4a      	ldr	r3, [pc, #296]	; (800107c <HAL_UART_MspInit+0x198>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4841      	ldr	r0, [pc, #260]	; (8001080 <HAL_UART_MspInit+0x19c>)
 8000f7a:	f000 fd45 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f8e:	2308      	movs	r3, #8
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	483a      	ldr	r0, [pc, #232]	; (8001084 <HAL_UART_MspInit+0x1a0>)
 8000f9a:	f000 fd35 	bl	8001a08 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fa0:	4a3a      	ldr	r2, [pc, #232]	; (800108c <HAL_UART_MspInit+0x1a8>)
 8000fa2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000faa:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fbe:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000fe0:	4829      	ldr	r0, [pc, #164]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000fe2:	f000 fa07 	bl	80013f4 <HAL_DMA_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000fec:	f7ff fddc 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a25      	ldr	r2, [pc, #148]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff6:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_UART_MspInit+0x1a4>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	2035      	movs	r0, #53	; 0x35
 8001002:	f000 f9c0 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001006:	2035      	movs	r0, #53	; 0x35
 8001008:	f000 f9d9 	bl	80013be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800100c:	e030      	b.n	8001070 <HAL_UART_MspInit+0x18c>
  else if(uartHandle->Instance==USART2)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a1f      	ldr	r2, [pc, #124]	; (8001090 <HAL_UART_MspInit+0x1ac>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d12b      	bne.n	8001070 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0x198>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a16      	ldr	r2, [pc, #88]	; (800107c <HAL_UART_MspInit+0x198>)
 8001022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_UART_MspInit+0x198>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_UART_MspInit+0x198>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_UART_MspInit+0x198>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_UART_MspInit+0x198>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001050:	230c      	movs	r3, #12
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001060:	2307      	movs	r3, #7
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <HAL_UART_MspInit+0x1b0>)
 800106c:	f000 fccc 	bl	8001a08 <HAL_GPIO_Init>
}
 8001070:	bf00      	nop
 8001072:	3730      	adds	r7, #48	; 0x30
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40005000 	.word	0x40005000
 800107c:	40023800 	.word	0x40023800
 8001080:	40020800 	.word	0x40020800
 8001084:	40020c00 	.word	0x40020c00
 8001088:	2000015c 	.word	0x2000015c
 800108c:	40026010 	.word	0x40026010
 8001090:	40004400 	.word	0x40004400
 8001094:	40020000 	.word	0x40020000

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800109c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800109e:	e003      	b.n	80010a8 <LoopCopyDataInit>

080010a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010a6:	3104      	adds	r1, #4

080010a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010b0:	d3f6      	bcc.n	80010a0 <CopyDataInit>
  ldr  r2, =_sbss
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010b4:	e002      	b.n	80010bc <LoopFillZerobss>

080010b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010b8:	f842 3b04 	str.w	r3, [r2], #4

080010bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010c0:	d3f9      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c2:	f7ff fe85 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f002 f8b1 	bl	800322c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fc8f 	bl	80009ec <main>
  bx  lr    
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010d4:	08004158 	.word	0x08004158
  ldr  r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010dc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80010e0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80010e4:	200001c4 	.word	0x200001c4

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <HAL_Init+0x40>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_Init+0x40>)
 8001102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_Init+0x40>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f92b 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f808 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff fd4a 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023c00 	.word	0x40023c00

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f943 	bl	80013da <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 f90b 	bl	8001386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000000 	.word	0x20000000
 8001188:	20000008 	.word	0x20000008
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	200001bc 	.word	0x200001bc

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200001bc 	.word	0x200001bc

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	; (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f7ff ff8e 	bl	8001270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff29 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff3e 	bl	8001218 <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff8e 	bl	80012c4 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5d 	bl	8001270 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff31 	bl	8001234 <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa2 	bl	800132c <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff feda 	bl	80011b8 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e099      	b.n	8001544 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001430:	e00f      	b.n	8001452 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001432:	f7ff fec1 	bl	80011b8 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b05      	cmp	r3, #5
 800143e:	d908      	bls.n	8001452 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e078      	b.n	8001544 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1e8      	bne.n	8001432 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_DMA_Init+0x158>)
 800146c:	4013      	ands	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800147e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800148a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d107      	bne.n	80014bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4313      	orrs	r3, r2
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f023 0307 	bic.w	r3, r3, #7
 80014d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	4313      	orrs	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d117      	bne.n	8001516 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00e      	beq.n	8001516 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fa0b 	bl	8001914 <DMA_CheckFifoParam>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2240      	movs	r2, #64	; 0x40
 8001508:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001512:	2301      	movs	r3, #1
 8001514:	e016      	b.n	8001544 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f9c2 	bl	80018a8 <DMA_CalcBaseAndBitshift>
 8001524:	4603      	mov	r3, r0
 8001526:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152c:	223f      	movs	r2, #63	; 0x3f
 800152e:	409a      	lsls	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	f010803f 	.word	0xf010803f

08001550 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d004      	beq.n	800156e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00c      	b.n	8001588 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2205      	movs	r2, #5
 8001572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015a0:	4b92      	ldr	r3, [pc, #584]	; (80017ec <HAL_DMA_IRQHandler+0x258>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a92      	ldr	r2, [pc, #584]	; (80017f0 <HAL_DMA_IRQHandler+0x25c>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	0a9b      	lsrs	r3, r3, #10
 80015ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015be:	2208      	movs	r2, #8
 80015c0:	409a      	lsls	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d01a      	beq.n	8001600 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0204 	bic.w	r2, r2, #4
 80015e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	2208      	movs	r2, #8
 80015ee:	409a      	lsls	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	2201      	movs	r2, #1
 8001606:	409a      	lsls	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d012      	beq.n	8001636 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2201      	movs	r2, #1
 8001624:	409a      	lsls	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162e:	f043 0202 	orr.w	r2, r3, #2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163a:	2204      	movs	r2, #4
 800163c:	409a      	lsls	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d012      	beq.n	800166c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00b      	beq.n	800166c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	2204      	movs	r2, #4
 800165a:	409a      	lsls	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001664:	f043 0204 	orr.w	r2, r3, #4
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	2210      	movs	r2, #16
 8001672:	409a      	lsls	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d043      	beq.n	8001704 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d03c      	beq.n	8001704 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168e:	2210      	movs	r2, #16
 8001690:	409a      	lsls	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d018      	beq.n	80016d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d024      	beq.n	8001704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
 80016c2:	e01f      	b.n	8001704 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01b      	beq.n	8001704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	4798      	blx	r3
 80016d4:	e016      	b.n	8001704 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d107      	bne.n	80016f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0208 	bic.w	r2, r2, #8
 80016f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	2220      	movs	r2, #32
 800170a:	409a      	lsls	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 808e 	beq.w	8001832 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 8086 	beq.w	8001832 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	2220      	movs	r2, #32
 800172c:	409a      	lsls	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b05      	cmp	r3, #5
 800173c:	d136      	bne.n	80017ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0216 	bic.w	r2, r2, #22
 800174c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800175c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <HAL_DMA_IRQHandler+0x1da>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0208 	bic.w	r2, r2, #8
 800177c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	223f      	movs	r2, #63	; 0x3f
 8001784:	409a      	lsls	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d07d      	beq.n	800189e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4798      	blx	r3
        }
        return;
 80017aa:	e078      	b.n	800189e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d01c      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d108      	bne.n	80017da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d030      	beq.n	8001832 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
 80017d8:	e02b      	b.n	8001832 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d027      	beq.n	8001832 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
 80017ea:	e022      	b.n	8001832 <HAL_DMA_IRQHandler+0x29e>
 80017ec:	20000000 	.word	0x20000000
 80017f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0210 	bic.w	r2, r2, #16
 8001810:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001836:	2b00      	cmp	r3, #0
 8001838:	d032      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d022      	beq.n	800188c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2205      	movs	r2, #5
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0201 	bic.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3301      	adds	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	429a      	cmp	r2, r3
 8001868:	d307      	bcc.n	800187a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f2      	bne.n	800185e <HAL_DMA_IRQHandler+0x2ca>
 8001878:	e000      	b.n	800187c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800187a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
 800189c:	e000      	b.n	80018a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800189e:	bf00      	nop
    }
  }
}
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop

080018a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3b10      	subs	r3, #16
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <DMA_CalcBaseAndBitshift+0x64>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <DMA_CalcBaseAndBitshift+0x68>)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d909      	bls.n	80018ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018de:	f023 0303 	bic.w	r3, r3, #3
 80018e2:	1d1a      	adds	r2, r3, #4
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	659a      	str	r2, [r3, #88]	; 0x58
 80018e8:	e007      	b.n	80018fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018f2:	f023 0303 	bic.w	r3, r3, #3
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	aaaaaaab 	.word	0xaaaaaaab
 8001910:	080040a8 	.word	0x080040a8

08001914 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d11f      	bne.n	800196e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d855      	bhi.n	80019e0 <DMA_CheckFifoParam+0xcc>
 8001934:	a201      	add	r2, pc, #4	; (adr r2, 800193c <DMA_CheckFifoParam+0x28>)
 8001936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193a:	bf00      	nop
 800193c:	0800194d 	.word	0x0800194d
 8001940:	0800195f 	.word	0x0800195f
 8001944:	0800194d 	.word	0x0800194d
 8001948:	080019e1 	.word	0x080019e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d045      	beq.n	80019e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800195c:	e042      	b.n	80019e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001966:	d13f      	bne.n	80019e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800196c:	e03c      	b.n	80019e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001976:	d121      	bne.n	80019bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d836      	bhi.n	80019ec <DMA_CheckFifoParam+0xd8>
 800197e:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <DMA_CheckFifoParam+0x70>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	08001995 	.word	0x08001995
 8001988:	0800199b 	.word	0x0800199b
 800198c:	08001995 	.word	0x08001995
 8001990:	080019ad 	.word	0x080019ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
      break;
 8001998:	e02f      	b.n	80019fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d024      	beq.n	80019f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019aa:	e021      	b.n	80019f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019b4:	d11e      	bne.n	80019f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019ba:	e01b      	b.n	80019f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d902      	bls.n	80019c8 <DMA_CheckFifoParam+0xb4>
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d003      	beq.n	80019ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019c6:	e018      	b.n	80019fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
      break;
 80019cc:	e015      	b.n	80019fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00e      	beq.n	80019f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
      break;
 80019de:	e00b      	b.n	80019f8 <DMA_CheckFifoParam+0xe4>
      break;
 80019e0:	bf00      	nop
 80019e2:	e00a      	b.n	80019fa <DMA_CheckFifoParam+0xe6>
      break;
 80019e4:	bf00      	nop
 80019e6:	e008      	b.n	80019fa <DMA_CheckFifoParam+0xe6>
      break;
 80019e8:	bf00      	nop
 80019ea:	e006      	b.n	80019fa <DMA_CheckFifoParam+0xe6>
      break;
 80019ec:	bf00      	nop
 80019ee:	e004      	b.n	80019fa <DMA_CheckFifoParam+0xe6>
      break;
 80019f0:	bf00      	nop
 80019f2:	e002      	b.n	80019fa <DMA_CheckFifoParam+0xe6>
      break;   
 80019f4:	bf00      	nop
 80019f6:	e000      	b.n	80019fa <DMA_CheckFifoParam+0xe6>
      break;
 80019f8:	bf00      	nop
    }
  } 
  
  return status; 
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	e165      	b.n	8001cf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	f040 8154 	bne.w	8001cea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x4a>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b12      	cmp	r3, #18
 8001a50:	d123      	bne.n	8001a9a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	08da      	lsrs	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3208      	adds	r2, #8
 8001a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	69b9      	ldr	r1, [r7, #24]
 8001a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0203 	and.w	r2, r3, #3
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d00b      	beq.n	8001aee <HAL_GPIO_Init+0xe6>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d007      	beq.n	8001aee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae2:	2b11      	cmp	r3, #17
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d130      	bne.n	8001b50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80ae 	beq.w	8001cea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <HAL_GPIO_Init+0x2fc>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a5b      	ldr	r2, [pc, #364]	; (8001d04 <HAL_GPIO_Init+0x2fc>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <HAL_GPIO_Init+0x2fc>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001baa:	4a57      	ldr	r2, [pc, #348]	; (8001d08 <HAL_GPIO_Init+0x300>)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4e      	ldr	r2, [pc, #312]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d025      	beq.n	8001c22 <HAL_GPIO_Init+0x21a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4d      	ldr	r2, [pc, #308]	; (8001d10 <HAL_GPIO_Init+0x308>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01f      	beq.n	8001c1e <HAL_GPIO_Init+0x216>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4c      	ldr	r2, [pc, #304]	; (8001d14 <HAL_GPIO_Init+0x30c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d019      	beq.n	8001c1a <HAL_GPIO_Init+0x212>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4b      	ldr	r2, [pc, #300]	; (8001d18 <HAL_GPIO_Init+0x310>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0x20e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4a      	ldr	r2, [pc, #296]	; (8001d1c <HAL_GPIO_Init+0x314>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00d      	beq.n	8001c12 <HAL_GPIO_Init+0x20a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a49      	ldr	r2, [pc, #292]	; (8001d20 <HAL_GPIO_Init+0x318>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <HAL_GPIO_Init+0x206>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a48      	ldr	r2, [pc, #288]	; (8001d24 <HAL_GPIO_Init+0x31c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_GPIO_Init+0x202>
 8001c06:	2306      	movs	r3, #6
 8001c08:	e00c      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e00a      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c0e:	2305      	movs	r3, #5
 8001c10:	e008      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c12:	2304      	movs	r3, #4
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e004      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c22:	2300      	movs	r3, #0
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	f002 0203 	and.w	r2, r2, #3
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c34:	4934      	ldr	r1, [pc, #208]	; (8001d08 <HAL_GPIO_Init+0x300>)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_GPIO_Init+0x320>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c66:	4a30      	ldr	r2, [pc, #192]	; (8001d28 <HAL_GPIO_Init+0x320>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c6c:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <HAL_GPIO_Init+0x320>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c90:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <HAL_GPIO_Init+0x320>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_GPIO_Init+0x320>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_GPIO_Init+0x320>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_GPIO_Init+0x320>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce4:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_GPIO_Init+0x320>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	f67f ae96 	bls.w	8001a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3724      	adds	r7, #36	; 0x24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40021400 	.word	0x40021400
 8001d24:	40021800 	.word	0x40021800
 8001d28:	40013c00 	.word	0x40013c00

08001d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d3c:	787b      	ldrb	r3, [r7, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d48:	e003      	b.n	8001d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	041a      	lsls	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	619a      	str	r2, [r3, #24]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	401a      	ands	r2, r3
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d104      	bne.n	8001d82 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	041a      	lsls	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fed8 	bl	8000b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0ca      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_ClockConfig+0x1b4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d90c      	bls.n	8001e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b64      	ldr	r3, [pc, #400]	; (8001f78 <HAL_RCC_ClockConfig+0x1b4>)
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <HAL_RCC_ClockConfig+0x1b4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0b6      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e18:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a57      	ldr	r2, [pc, #348]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e30:	4b52      	ldr	r3, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4a51      	ldr	r2, [pc, #324]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3c:	4b4f      	ldr	r3, [pc, #316]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	494c      	ldr	r1, [pc, #304]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d044      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d119      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e07d      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d003      	beq.n	8001e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e82:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e06d      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e92:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e065      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea2:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f023 0203 	bic.w	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4933      	ldr	r1, [pc, #204]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb4:	f7ff f980 	bl	80011b8 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebc:	f7ff f97c 	bl	80011b8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e04d      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 020c 	and.w	r2, r3, #12
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d1eb      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d20c      	bcs.n	8001f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_RCC_ClockConfig+0x1b4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e030      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4915      	ldr	r1, [pc, #84]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	490d      	ldr	r1, [pc, #52]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f4a:	f000 f851 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001f4e:	4601      	mov	r1, r0
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_RCC_ClockConfig+0x1b8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff f8e2 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08004090 	.word	0x08004090
 8001f84:	20000000 	.word	0x20000000

08001f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000000 	.word	0x20000000

08001fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4601      	mov	r1, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0a9b      	lsrs	r3, r3, #10
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	080040a0 	.word	0x080040a0

08001fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fcc:	f7ff ffdc 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4601      	mov	r1, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0b5b      	lsrs	r3, r3, #13
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4a03      	ldr	r2, [pc, #12]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fde:	5cd3      	ldrb	r3, [r2, r3]
 8001fe0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	080040a0 	.word	0x080040a0

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800200a:	4b9f      	ldr	r3, [pc, #636]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b0c      	cmp	r3, #12
 8002014:	f200 8130 	bhi.w	8002278 <HAL_RCC_GetSysClockFreq+0x288>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <HAL_RCC_GetSysClockFreq+0x30>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002055 	.word	0x08002055
 8002024:	08002279 	.word	0x08002279
 8002028:	08002279 	.word	0x08002279
 800202c:	08002279 	.word	0x08002279
 8002030:	0800205b 	.word	0x0800205b
 8002034:	08002279 	.word	0x08002279
 8002038:	08002279 	.word	0x08002279
 800203c:	08002279 	.word	0x08002279
 8002040:	08002061 	.word	0x08002061
 8002044:	08002279 	.word	0x08002279
 8002048:	08002279 	.word	0x08002279
 800204c:	08002279 	.word	0x08002279
 8002050:	0800216f 	.word	0x0800216f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002054:	4b8d      	ldr	r3, [pc, #564]	; (800228c <HAL_RCC_GetSysClockFreq+0x29c>)
 8002056:	613b      	str	r3, [r7, #16]
       break;
 8002058:	e111      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800205a:	4b8d      	ldr	r3, [pc, #564]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800205c:	613b      	str	r3, [r7, #16]
      break;
 800205e:	e10e      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002060:	4b89      	ldr	r3, [pc, #548]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002068:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800206a:	4b87      	ldr	r3, [pc, #540]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d023      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002076:	4b84      	ldr	r3, [pc, #528]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	099b      	lsrs	r3, r3, #6
 800207c:	f04f 0400 	mov.w	r4, #0
 8002080:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	ea03 0501 	and.w	r5, r3, r1
 800208c:	ea04 0602 	and.w	r6, r4, r2
 8002090:	4a7f      	ldr	r2, [pc, #508]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002092:	fb02 f106 	mul.w	r1, r2, r6
 8002096:	2200      	movs	r2, #0
 8002098:	fb02 f205 	mul.w	r2, r2, r5
 800209c:	440a      	add	r2, r1
 800209e:	497c      	ldr	r1, [pc, #496]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80020a0:	fba5 0101 	umull	r0, r1, r5, r1
 80020a4:	1853      	adds	r3, r2, r1
 80020a6:	4619      	mov	r1, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f04f 0400 	mov.w	r4, #0
 80020ae:	461a      	mov	r2, r3
 80020b0:	4623      	mov	r3, r4
 80020b2:	f7fe f8fd 	bl	80002b0 <__aeabi_uldivmod>
 80020b6:	4603      	mov	r3, r0
 80020b8:	460c      	mov	r4, r1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e049      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020be:	4b72      	ldr	r3, [pc, #456]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	099b      	lsrs	r3, r3, #6
 80020c4:	f04f 0400 	mov.w	r4, #0
 80020c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	ea03 0501 	and.w	r5, r3, r1
 80020d4:	ea04 0602 	and.w	r6, r4, r2
 80020d8:	4629      	mov	r1, r5
 80020da:	4632      	mov	r2, r6
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	f04f 0400 	mov.w	r4, #0
 80020e4:	0154      	lsls	r4, r2, #5
 80020e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020ea:	014b      	lsls	r3, r1, #5
 80020ec:	4619      	mov	r1, r3
 80020ee:	4622      	mov	r2, r4
 80020f0:	1b49      	subs	r1, r1, r5
 80020f2:	eb62 0206 	sbc.w	r2, r2, r6
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	f04f 0400 	mov.w	r4, #0
 80020fe:	0194      	lsls	r4, r2, #6
 8002100:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002104:	018b      	lsls	r3, r1, #6
 8002106:	1a5b      	subs	r3, r3, r1
 8002108:	eb64 0402 	sbc.w	r4, r4, r2
 800210c:	f04f 0100 	mov.w	r1, #0
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	00e2      	lsls	r2, r4, #3
 8002116:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800211a:	00d9      	lsls	r1, r3, #3
 800211c:	460b      	mov	r3, r1
 800211e:	4614      	mov	r4, r2
 8002120:	195b      	adds	r3, r3, r5
 8002122:	eb44 0406 	adc.w	r4, r4, r6
 8002126:	f04f 0100 	mov.w	r1, #0
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	02a2      	lsls	r2, r4, #10
 8002130:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002134:	0299      	lsls	r1, r3, #10
 8002136:	460b      	mov	r3, r1
 8002138:	4614      	mov	r4, r2
 800213a:	4618      	mov	r0, r3
 800213c:	4621      	mov	r1, r4
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f04f 0400 	mov.w	r4, #0
 8002144:	461a      	mov	r2, r3
 8002146:	4623      	mov	r3, r4
 8002148:	f7fe f8b2 	bl	80002b0 <__aeabi_uldivmod>
 800214c:	4603      	mov	r3, r0
 800214e:	460c      	mov	r4, r1
 8002150:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002152:	4b4d      	ldr	r3, [pc, #308]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	3301      	adds	r3, #1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	613b      	str	r3, [r7, #16]
      break;
 800216c:	e087      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800216e:	4b46      	ldr	r3, [pc, #280]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002176:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002178:	4b43      	ldr	r3, [pc, #268]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d023      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002184:	4b40      	ldr	r3, [pc, #256]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	f04f 0400 	mov.w	r4, #0
 800218e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	ea03 0501 	and.w	r5, r3, r1
 800219a:	ea04 0602 	and.w	r6, r4, r2
 800219e:	4a3c      	ldr	r2, [pc, #240]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80021a0:	fb02 f106 	mul.w	r1, r2, r6
 80021a4:	2200      	movs	r2, #0
 80021a6:	fb02 f205 	mul.w	r2, r2, r5
 80021aa:	440a      	add	r2, r1
 80021ac:	4938      	ldr	r1, [pc, #224]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80021ae:	fba5 0101 	umull	r0, r1, r5, r1
 80021b2:	1853      	adds	r3, r2, r1
 80021b4:	4619      	mov	r1, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f04f 0400 	mov.w	r4, #0
 80021bc:	461a      	mov	r2, r3
 80021be:	4623      	mov	r3, r4
 80021c0:	f7fe f876 	bl	80002b0 <__aeabi_uldivmod>
 80021c4:	4603      	mov	r3, r0
 80021c6:	460c      	mov	r4, r1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e049      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021cc:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	f04f 0400 	mov.w	r4, #0
 80021d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	ea03 0501 	and.w	r5, r3, r1
 80021e2:	ea04 0602 	and.w	r6, r4, r2
 80021e6:	4629      	mov	r1, r5
 80021e8:	4632      	mov	r2, r6
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	f04f 0400 	mov.w	r4, #0
 80021f2:	0154      	lsls	r4, r2, #5
 80021f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021f8:	014b      	lsls	r3, r1, #5
 80021fa:	4619      	mov	r1, r3
 80021fc:	4622      	mov	r2, r4
 80021fe:	1b49      	subs	r1, r1, r5
 8002200:	eb62 0206 	sbc.w	r2, r2, r6
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	f04f 0400 	mov.w	r4, #0
 800220c:	0194      	lsls	r4, r2, #6
 800220e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002212:	018b      	lsls	r3, r1, #6
 8002214:	1a5b      	subs	r3, r3, r1
 8002216:	eb64 0402 	sbc.w	r4, r4, r2
 800221a:	f04f 0100 	mov.w	r1, #0
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	00e2      	lsls	r2, r4, #3
 8002224:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002228:	00d9      	lsls	r1, r3, #3
 800222a:	460b      	mov	r3, r1
 800222c:	4614      	mov	r4, r2
 800222e:	195b      	adds	r3, r3, r5
 8002230:	eb44 0406 	adc.w	r4, r4, r6
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	02a2      	lsls	r2, r4, #10
 800223e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002242:	0299      	lsls	r1, r3, #10
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	4618      	mov	r0, r3
 800224a:	4621      	mov	r1, r4
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f04f 0400 	mov.w	r4, #0
 8002252:	461a      	mov	r2, r3
 8002254:	4623      	mov	r3, r4
 8002256:	f7fe f82b 	bl	80002b0 <__aeabi_uldivmod>
 800225a:	4603      	mov	r3, r0
 800225c:	460c      	mov	r4, r1
 800225e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_GetSysClockFreq+0x298>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	0f1b      	lsrs	r3, r3, #28
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	613b      	str	r3, [r7, #16]
      break;
 8002276:	e002      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <HAL_RCC_GetSysClockFreq+0x29c>)
 800227a:	613b      	str	r3, [r7, #16]
      break;
 800227c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227e:	693b      	ldr	r3, [r7, #16]
}
 8002280:	4618      	mov	r0, r3
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	00f42400 	.word	0x00f42400
 8002290:	017d7840 	.word	0x017d7840

08002294 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8083 	beq.w	80023b4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022ae:	4b95      	ldr	r3, [pc, #596]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d019      	beq.n	80022ee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ba:	4b92      	ldr	r3, [pc, #584]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d106      	bne.n	80022d4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022c6:	4b8f      	ldr	r3, [pc, #572]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d2:	d00c      	beq.n	80022ee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d4:	4b8b      	ldr	r3, [pc, #556]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d112      	bne.n	8002306 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e0:	4b88      	ldr	r3, [pc, #544]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ec:	d10b      	bne.n	8002306 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ee:	4b85      	ldr	r3, [pc, #532]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d05b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x11e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d157      	bne.n	80023b2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e216      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x8a>
 8002310:	4b7c      	ldr	r3, [pc, #496]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a7b      	ldr	r2, [pc, #492]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	e01d      	b.n	800235a <HAL_RCC_OscConfig+0xc6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002326:	d10c      	bne.n	8002342 <HAL_RCC_OscConfig+0xae>
 8002328:	4b76      	ldr	r3, [pc, #472]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a75      	ldr	r2, [pc, #468]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800232e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b73      	ldr	r3, [pc, #460]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a72      	ldr	r2, [pc, #456]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	e00b      	b.n	800235a <HAL_RCC_OscConfig+0xc6>
 8002342:	4b70      	ldr	r3, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6f      	ldr	r2, [pc, #444]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6c      	ldr	r2, [pc, #432]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002358:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d013      	beq.n	800238a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe ff29 	bl	80011b8 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236a:	f7fe ff25 	bl	80011b8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e1db      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237c:	4b61      	ldr	r3, [pc, #388]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0xd6>
 8002388:	e014      	b.n	80023b4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7fe ff15 	bl	80011b8 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002392:	f7fe ff11 	bl	80011b8 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e1c7      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a4:	4b57      	ldr	r3, [pc, #348]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0xfe>
 80023b0:	e000      	b.n	80023b4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d06f      	beq.n	80024a0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023c0:	4b50      	ldr	r3, [pc, #320]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d017      	beq.n	80023fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023cc:	4b4d      	ldr	r3, [pc, #308]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023d8:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00b      	beq.n	80023fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e4:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d11c      	bne.n	800242a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f0:	4b44      	ldr	r3, [pc, #272]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d116      	bne.n	800242a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fc:	4b41      	ldr	r3, [pc, #260]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_OscConfig+0x180>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d001      	beq.n	8002414 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e18f      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4938      	ldr	r1, [pc, #224]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002428:	e03a      	b.n	80024a0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d020      	beq.n	8002474 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002432:	4b35      	ldr	r3, [pc, #212]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe febe 	bl	80011b8 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002440:	f7fe feba 	bl	80011b8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e170      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002452:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4925      	ldr	r1, [pc, #148]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7fe fe9d 	bl	80011b8 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002482:	f7fe fe99 	bl	80011b8 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e14f      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d037      	beq.n	800251c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d016      	beq.n	80024e2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_RCC_OscConfig+0x278>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7fe fe7d 	bl	80011b8 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c2:	f7fe fe79 	bl	80011b8 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e12f      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x22e>
 80024e0:	e01c      	b.n	800251c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_RCC_OscConfig+0x278>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe fe66 	bl	80011b8 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ee:	e00f      	b.n	8002510 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe fe62 	bl	80011b8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d908      	bls.n	8002510 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e118      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	42470000 	.word	0x42470000
 800250c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	4b8a      	ldr	r3, [pc, #552]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 8002512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e9      	bne.n	80024f0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8097 	beq.w	8002658 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252e:	4b83      	ldr	r3, [pc, #524]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b7f      	ldr	r3, [pc, #508]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a7e      	ldr	r2, [pc, #504]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b7c      	ldr	r3, [pc, #496]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255a:	4b79      	ldr	r3, [pc, #484]	; (8002740 <HAL_RCC_OscConfig+0x4ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d118      	bne.n	8002598 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a75      	ldr	r2, [pc, #468]	; (8002740 <HAL_RCC_OscConfig+0x4ac>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002572:	f7fe fe21 	bl	80011b8 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257a:	f7fe fe1d 	bl	80011b8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0d3      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4b6c      	ldr	r3, [pc, #432]	; (8002740 <HAL_RCC_OscConfig+0x4ac>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x31a>
 80025a0:	4b66      	ldr	r3, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
 80025ac:	e01c      	b.n	80025e8 <HAL_RCC_OscConfig+0x354>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x33c>
 80025b6:	4b61      	ldr	r3, [pc, #388]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	4a60      	ldr	r2, [pc, #384]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80025bc:	f043 0304 	orr.w	r3, r3, #4
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70
 80025c2:	4b5e      	ldr	r3, [pc, #376]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a5d      	ldr	r2, [pc, #372]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0x354>
 80025d0:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a59      	ldr	r2, [pc, #356]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
 80025dc:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a56      	ldr	r2, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80025e2:	f023 0304 	bic.w	r3, r3, #4
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d015      	beq.n	800261c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe fde2 	bl	80011b8 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7fe fdde 	bl	80011b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e092      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260e:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0ee      	beq.n	80025f8 <HAL_RCC_OscConfig+0x364>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe fdcc 	bl	80011b8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7fe fdc8 	bl	80011b8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e07c      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263a:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ee      	bne.n	8002624 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	4a3a      	ldr	r2, [pc, #232]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 8002652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d068      	beq.n	8002732 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b08      	cmp	r3, #8
 800266a:	d060      	beq.n	800272e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d145      	bne.n	8002700 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_RCC_OscConfig+0x4b0>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe fd9d 	bl	80011b8 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe fd99 	bl	80011b8 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e04f      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	019b      	lsls	r3, r3, #6
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	3b01      	subs	r3, #1
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	061b      	lsls	r3, r3, #24
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	071b      	lsls	r3, r3, #28
 80026cc:	491b      	ldr	r1, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_RCC_OscConfig+0x4b0>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fd6e 	bl	80011b8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe fd6a 	bl	80011b8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e020      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x44c>
 80026fe:	e018      	b.n	8002732 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_RCC_OscConfig+0x4b0>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe fd57 	bl	80011b8 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270e:	f7fe fd53 	bl	80011b8 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e009      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_OscConfig+0x4a8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x47a>
 800272c:	e001      	b.n	8002732 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	40007000 	.word	0x40007000
 8002744:	42470060 	.word	0x42470060

08002748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e03f      	b.n	80027da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fbb8 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	; 0x24
 8002778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800278a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fb3d 	bl	8002e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b088      	sub	sp, #32
 80027e6:	af02      	add	r7, sp, #8
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b20      	cmp	r3, #32
 8002800:	f040 8083 	bne.w	800290a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_UART_Transmit+0x2e>
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e07b      	b.n	800290c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_UART_Transmit+0x40>
 800281e:	2302      	movs	r3, #2
 8002820:	e074      	b.n	800290c <HAL_UART_Transmit+0x12a>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2221      	movs	r2, #33	; 0x21
 8002834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002838:	f7fe fcbe 	bl	80011b8 <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800284a:	e042      	b.n	80028d2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002862:	d122      	bne.n	80028aa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2200      	movs	r2, #0
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f960 	bl	8002b34 <UART_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e046      	b.n	800290c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002890:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	3302      	adds	r3, #2
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	e017      	b.n	80028d2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3301      	adds	r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	e013      	b.n	80028d2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2180      	movs	r1, #128	; 0x80
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f93d 	bl	8002b34 <UART_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e023      	b.n	800290c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	60ba      	str	r2, [r7, #8]
 80028ca:	781a      	ldrb	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1b7      	bne.n	800284c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2200      	movs	r2, #0
 80028e4:	2140      	movs	r1, #64	; 0x40
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f924 	bl	8002b34 <UART_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e00a      	b.n	800290c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10d      	bne.n	8002966 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_UART_IRQHandler+0x52>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f9d2 	bl	8002d08 <UART_Receive_IT>
      return;
 8002964:	e0cc      	b.n	8002b00 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80ab 	beq.w	8002ac4 <HAL_UART_IRQHandler+0x1b0>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_UART_IRQHandler+0x70>
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80a0 	beq.w	8002ac4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_UART_IRQHandler+0x90>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_UART_IRQHandler+0xb0>
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	f043 0202 	orr.w	r2, r3, #2
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_UART_IRQHandler+0xd0>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	f043 0204 	orr.w	r2, r3, #4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_UART_IRQHandler+0xf0>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	f043 0208 	orr.w	r2, r3, #8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d078      	beq.n	8002afe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_UART_IRQHandler+0x112>
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f971 	bl	8002d08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <HAL_UART_IRQHandler+0x13a>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d031      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8ba 	bl	8002bc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d123      	bne.n	8002aaa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d013      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_UART_IRQHandler+0x1f4>)
 8002a80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fd62 	bl	8001550 <HAL_DMA_Abort_IT>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d016      	beq.n	8002ac0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa0:	e00e      	b.n	8002ac0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f83c 	bl	8002b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa8:	e00a      	b.n	8002ac0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f838 	bl	8002b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	e006      	b.n	8002ac0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f834 	bl	8002b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002abe:	e01e      	b.n	8002afe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	bf00      	nop
    return;
 8002ac2:	e01c      	b.n	8002afe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x1cc>
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8a7 	bl	8002c2c <UART_Transmit_IT>
    return;
 8002ade:	e00f      	b.n	8002b00 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_UART_IRQHandler+0x1ec>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f8ef 	bl	8002cd8 <UART_EndTransmit_IT>
    return;
 8002afa:	bf00      	nop
 8002afc:	e000      	b.n	8002b00 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002afe:	bf00      	nop
  }
}
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	08002c05 	.word	0x08002c05

08002b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b44:	e02c      	b.n	8002ba0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d028      	beq.n	8002ba0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b54:	f7fe fb30 	bl	80011b8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d21d      	bcs.n	8002ba0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e00f      	b.n	8002bc0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d0c3      	beq.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bde:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7ff ff7e 	bl	8002b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b21      	cmp	r3, #33	; 0x21
 8002c3e:	d144      	bne.n	8002cca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c48:	d11a      	bne.n	8002c80 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c5e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	1c9a      	adds	r2, r3, #2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	621a      	str	r2, [r3, #32]
 8002c72:	e00e      	b.n	8002c92 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	621a      	str	r2, [r3, #32]
 8002c7e:	e008      	b.n	8002c92 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	1c59      	adds	r1, r3, #1
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6211      	str	r1, [r2, #32]
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff07 	bl	8002b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b22      	cmp	r3, #34	; 0x22
 8002d1a:	d171      	bne.n	8002e00 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d24:	d123      	bne.n	8002d6e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10e      	bne.n	8002d52 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	1c9a      	adds	r2, r3, #2
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d50:	e029      	b.n	8002da6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d6c:	e01b      	b.n	8002da6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6858      	ldr	r0, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	1c59      	adds	r1, r3, #1
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6291      	str	r1, [r2, #40]	; 0x28
 8002d86:	b2c2      	uxtb	r2, r0
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e00c      	b.n	8002da6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	1c58      	adds	r0, r3, #1
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	6288      	str	r0, [r1, #40]	; 0x28
 8002d9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4619      	mov	r1, r3
 8002db4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d120      	bne.n	8002dfc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0220 	bic.w	r2, r2, #32
 8002dc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fec8 	bl	8000b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e002      	b.n	8002e02 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e000      	b.n	8002e02 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
  }
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	b5b0      	push	{r4, r5, r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e4c:	f023 030c 	bic.w	r3, r3, #12
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	68f9      	ldr	r1, [r7, #12]
 8002e56:	430b      	orrs	r3, r1
 8002e58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e78:	f040 80e4 	bne.w	8003044 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4aab      	ldr	r2, [pc, #684]	; (8003130 <UART_SetConfig+0x324>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d004      	beq.n	8002e90 <UART_SetConfig+0x84>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4aaa      	ldr	r2, [pc, #680]	; (8003134 <UART_SetConfig+0x328>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d16c      	bne.n	8002f6a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002e90:	f7ff f89a 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009a      	lsls	r2, r3, #2
 8002e9e:	441a      	add	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	4aa3      	ldr	r2, [pc, #652]	; (8003138 <UART_SetConfig+0x32c>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	011c      	lsls	r4, r3, #4
 8002eb4:	f7ff f888 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009a      	lsls	r2, r3, #2
 8002ec2:	441a      	add	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ece:	f7ff f87b 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	009a      	lsls	r2, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	4a93      	ldr	r2, [pc, #588]	; (8003138 <UART_SetConfig+0x32c>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2264      	movs	r2, #100	; 0x64
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	1aeb      	subs	r3, r5, r3
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	3332      	adds	r3, #50	; 0x32
 8002efc:	4a8e      	ldr	r2, [pc, #568]	; (8003138 <UART_SetConfig+0x32c>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f0a:	441c      	add	r4, r3
 8002f0c:	f7ff f85c 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009a      	lsls	r2, r3, #2
 8002f1a:	441a      	add	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f26:	f7ff f84f 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	009a      	lsls	r2, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	4a7d      	ldr	r2, [pc, #500]	; (8003138 <UART_SetConfig+0x32c>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2264      	movs	r2, #100	; 0x64
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	1aeb      	subs	r3, r5, r3
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	3332      	adds	r3, #50	; 0x32
 8002f54:	4a78      	ldr	r2, [pc, #480]	; (8003138 <UART_SetConfig+0x32c>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	f003 0207 	and.w	r2, r3, #7
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4422      	add	r2, r4
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	e154      	b.n	8003214 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f6a:	f7ff f819 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009a      	lsls	r2, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	4a6c      	ldr	r2, [pc, #432]	; (8003138 <UART_SetConfig+0x32c>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	011c      	lsls	r4, r3, #4
 8002f8e:	f7ff f807 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8002f92:	4602      	mov	r2, r0
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009a      	lsls	r2, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002fa8:	f7fe fffa 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009a      	lsls	r2, r3, #2
 8002fb6:	441a      	add	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	4a5d      	ldr	r2, [pc, #372]	; (8003138 <UART_SetConfig+0x32c>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	2264      	movs	r2, #100	; 0x64
 8002fcc:	fb02 f303 	mul.w	r3, r2, r3
 8002fd0:	1aeb      	subs	r3, r5, r3
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	3332      	adds	r3, #50	; 0x32
 8002fd6:	4a58      	ldr	r2, [pc, #352]	; (8003138 <UART_SetConfig+0x32c>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fe4:	441c      	add	r4, r3
 8002fe6:	f7fe ffdb 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8002fea:	4602      	mov	r2, r0
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009a      	lsls	r2, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fbb2 f5f3 	udiv	r5, r2, r3
 8003000:	f7fe ffce 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8003004:	4602      	mov	r2, r0
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	009a      	lsls	r2, r3, #2
 800300e:	441a      	add	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	4a47      	ldr	r2, [pc, #284]	; (8003138 <UART_SetConfig+0x32c>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	2264      	movs	r2, #100	; 0x64
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	1aeb      	subs	r3, r5, r3
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	3332      	adds	r3, #50	; 0x32
 800302e:	4a42      	ldr	r2, [pc, #264]	; (8003138 <UART_SetConfig+0x32c>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	f003 0207 	and.w	r2, r3, #7
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4422      	add	r2, r4
 8003040:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003042:	e0e7      	b.n	8003214 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a39      	ldr	r2, [pc, #228]	; (8003130 <UART_SetConfig+0x324>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <UART_SetConfig+0x24c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a38      	ldr	r2, [pc, #224]	; (8003134 <UART_SetConfig+0x328>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d171      	bne.n	800313c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003058:	f7fe ffb6 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 800305c:	4602      	mov	r2, r0
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009a      	lsls	r2, r3, #2
 8003066:	441a      	add	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	4a31      	ldr	r2, [pc, #196]	; (8003138 <UART_SetConfig+0x32c>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	011c      	lsls	r4, r3, #4
 800307c:	f7fe ffa4 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8003080:	4602      	mov	r2, r0
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009a      	lsls	r2, r3, #2
 800308a:	441a      	add	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	fbb2 f5f3 	udiv	r5, r2, r3
 8003096:	f7fe ff97 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 800309a:	4602      	mov	r2, r0
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	009a      	lsls	r2, r3, #2
 80030a4:	441a      	add	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	4a21      	ldr	r2, [pc, #132]	; (8003138 <UART_SetConfig+0x32c>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2264      	movs	r2, #100	; 0x64
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	1aeb      	subs	r3, r5, r3
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	3332      	adds	r3, #50	; 0x32
 80030c4:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <UART_SetConfig+0x32c>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d0:	441c      	add	r4, r3
 80030d2:	f7fe ff79 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009a      	lsls	r2, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80030ec:	f7fe ff6c 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	009a      	lsls	r2, r3, #2
 80030fa:	441a      	add	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <UART_SetConfig+0x32c>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	2264      	movs	r2, #100	; 0x64
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	1aeb      	subs	r3, r5, r3
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	3332      	adds	r3, #50	; 0x32
 800311a:	4a07      	ldr	r2, [pc, #28]	; (8003138 <UART_SetConfig+0x32c>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	f003 020f 	and.w	r2, r3, #15
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4422      	add	r2, r4
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	e071      	b.n	8003214 <UART_SetConfig+0x408>
 8003130:	40011000 	.word	0x40011000
 8003134:	40011400 	.word	0x40011400
 8003138:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800313c:	f7fe ff30 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8003140:	4602      	mov	r2, r0
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	009a      	lsls	r2, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	4a31      	ldr	r2, [pc, #196]	; (800321c <UART_SetConfig+0x410>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	011c      	lsls	r4, r3, #4
 8003160:	f7fe ff1e 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8003164:	4602      	mov	r2, r0
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009a      	lsls	r2, r3, #2
 800316e:	441a      	add	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	fbb2 f5f3 	udiv	r5, r2, r3
 800317a:	f7fe ff11 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 800317e:	4602      	mov	r2, r0
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	4a21      	ldr	r2, [pc, #132]	; (800321c <UART_SetConfig+0x410>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2264      	movs	r2, #100	; 0x64
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	1aeb      	subs	r3, r5, r3
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	3332      	adds	r3, #50	; 0x32
 80031a8:	4a1c      	ldr	r2, [pc, #112]	; (800321c <UART_SetConfig+0x410>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b4:	441c      	add	r4, r3
 80031b6:	f7fe fef3 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009a      	lsls	r2, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80031d0:	f7fe fee6 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009a      	lsls	r2, r3, #2
 80031de:	441a      	add	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	4a0c      	ldr	r2, [pc, #48]	; (800321c <UART_SetConfig+0x410>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	2264      	movs	r2, #100	; 0x64
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	1aeb      	subs	r3, r5, r3
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	3332      	adds	r3, #50	; 0x32
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <UART_SetConfig+0x410>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4422      	add	r2, r4
 8003210:	609a      	str	r2, [r3, #8]
}
 8003212:	e7ff      	b.n	8003214 <UART_SetConfig+0x408>
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bdb0      	pop	{r4, r5, r7, pc}
 800321c:	51eb851f 	.word	0x51eb851f

08003220 <__errno>:
 8003220:	4b01      	ldr	r3, [pc, #4]	; (8003228 <__errno+0x8>)
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	2000000c 	.word	0x2000000c

0800322c <__libc_init_array>:
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	4e0d      	ldr	r6, [pc, #52]	; (8003264 <__libc_init_array+0x38>)
 8003230:	4c0d      	ldr	r4, [pc, #52]	; (8003268 <__libc_init_array+0x3c>)
 8003232:	1ba4      	subs	r4, r4, r6
 8003234:	10a4      	asrs	r4, r4, #2
 8003236:	2500      	movs	r5, #0
 8003238:	42a5      	cmp	r5, r4
 800323a:	d109      	bne.n	8003250 <__libc_init_array+0x24>
 800323c:	4e0b      	ldr	r6, [pc, #44]	; (800326c <__libc_init_array+0x40>)
 800323e:	4c0c      	ldr	r4, [pc, #48]	; (8003270 <__libc_init_array+0x44>)
 8003240:	f000 ff0c 	bl	800405c <_init>
 8003244:	1ba4      	subs	r4, r4, r6
 8003246:	10a4      	asrs	r4, r4, #2
 8003248:	2500      	movs	r5, #0
 800324a:	42a5      	cmp	r5, r4
 800324c:	d105      	bne.n	800325a <__libc_init_array+0x2e>
 800324e:	bd70      	pop	{r4, r5, r6, pc}
 8003250:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003254:	4798      	blx	r3
 8003256:	3501      	adds	r5, #1
 8003258:	e7ee      	b.n	8003238 <__libc_init_array+0xc>
 800325a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800325e:	4798      	blx	r3
 8003260:	3501      	adds	r5, #1
 8003262:	e7f2      	b.n	800324a <__libc_init_array+0x1e>
 8003264:	08004150 	.word	0x08004150
 8003268:	08004150 	.word	0x08004150
 800326c:	08004150 	.word	0x08004150
 8003270:	08004154 	.word	0x08004154

08003274 <malloc>:
 8003274:	4b02      	ldr	r3, [pc, #8]	; (8003280 <malloc+0xc>)
 8003276:	4601      	mov	r1, r0
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	f000 b859 	b.w	8003330 <_malloc_r>
 800327e:	bf00      	nop
 8003280:	2000000c 	.word	0x2000000c

08003284 <memset>:
 8003284:	4402      	add	r2, r0
 8003286:	4603      	mov	r3, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	f803 1b01 	strb.w	r1, [r3], #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <_free_r>:
 8003294:	b538      	push	{r3, r4, r5, lr}
 8003296:	4605      	mov	r5, r0
 8003298:	2900      	cmp	r1, #0
 800329a:	d045      	beq.n	8003328 <_free_r+0x94>
 800329c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032a0:	1f0c      	subs	r4, r1, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bfb8      	it	lt
 80032a6:	18e4      	addlt	r4, r4, r3
 80032a8:	f000 f98e 	bl	80035c8 <__malloc_lock>
 80032ac:	4a1f      	ldr	r2, [pc, #124]	; (800332c <_free_r+0x98>)
 80032ae:	6813      	ldr	r3, [r2, #0]
 80032b0:	4610      	mov	r0, r2
 80032b2:	b933      	cbnz	r3, 80032c2 <_free_r+0x2e>
 80032b4:	6063      	str	r3, [r4, #4]
 80032b6:	6014      	str	r4, [r2, #0]
 80032b8:	4628      	mov	r0, r5
 80032ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032be:	f000 b984 	b.w	80035ca <__malloc_unlock>
 80032c2:	42a3      	cmp	r3, r4
 80032c4:	d90c      	bls.n	80032e0 <_free_r+0x4c>
 80032c6:	6821      	ldr	r1, [r4, #0]
 80032c8:	1862      	adds	r2, r4, r1
 80032ca:	4293      	cmp	r3, r2
 80032cc:	bf04      	itt	eq
 80032ce:	681a      	ldreq	r2, [r3, #0]
 80032d0:	685b      	ldreq	r3, [r3, #4]
 80032d2:	6063      	str	r3, [r4, #4]
 80032d4:	bf04      	itt	eq
 80032d6:	1852      	addeq	r2, r2, r1
 80032d8:	6022      	streq	r2, [r4, #0]
 80032da:	6004      	str	r4, [r0, #0]
 80032dc:	e7ec      	b.n	80032b8 <_free_r+0x24>
 80032de:	4613      	mov	r3, r2
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	b10a      	cbz	r2, 80032e8 <_free_r+0x54>
 80032e4:	42a2      	cmp	r2, r4
 80032e6:	d9fa      	bls.n	80032de <_free_r+0x4a>
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	1858      	adds	r0, r3, r1
 80032ec:	42a0      	cmp	r0, r4
 80032ee:	d10b      	bne.n	8003308 <_free_r+0x74>
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	4401      	add	r1, r0
 80032f4:	1858      	adds	r0, r3, r1
 80032f6:	4282      	cmp	r2, r0
 80032f8:	6019      	str	r1, [r3, #0]
 80032fa:	d1dd      	bne.n	80032b8 <_free_r+0x24>
 80032fc:	6810      	ldr	r0, [r2, #0]
 80032fe:	6852      	ldr	r2, [r2, #4]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	4401      	add	r1, r0
 8003304:	6019      	str	r1, [r3, #0]
 8003306:	e7d7      	b.n	80032b8 <_free_r+0x24>
 8003308:	d902      	bls.n	8003310 <_free_r+0x7c>
 800330a:	230c      	movs	r3, #12
 800330c:	602b      	str	r3, [r5, #0]
 800330e:	e7d3      	b.n	80032b8 <_free_r+0x24>
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	1821      	adds	r1, r4, r0
 8003314:	428a      	cmp	r2, r1
 8003316:	bf04      	itt	eq
 8003318:	6811      	ldreq	r1, [r2, #0]
 800331a:	6852      	ldreq	r2, [r2, #4]
 800331c:	6062      	str	r2, [r4, #4]
 800331e:	bf04      	itt	eq
 8003320:	1809      	addeq	r1, r1, r0
 8003322:	6021      	streq	r1, [r4, #0]
 8003324:	605c      	str	r4, [r3, #4]
 8003326:	e7c7      	b.n	80032b8 <_free_r+0x24>
 8003328:	bd38      	pop	{r3, r4, r5, pc}
 800332a:	bf00      	nop
 800332c:	200000ac 	.word	0x200000ac

08003330 <_malloc_r>:
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	1ccd      	adds	r5, r1, #3
 8003334:	f025 0503 	bic.w	r5, r5, #3
 8003338:	3508      	adds	r5, #8
 800333a:	2d0c      	cmp	r5, #12
 800333c:	bf38      	it	cc
 800333e:	250c      	movcc	r5, #12
 8003340:	2d00      	cmp	r5, #0
 8003342:	4606      	mov	r6, r0
 8003344:	db01      	blt.n	800334a <_malloc_r+0x1a>
 8003346:	42a9      	cmp	r1, r5
 8003348:	d903      	bls.n	8003352 <_malloc_r+0x22>
 800334a:	230c      	movs	r3, #12
 800334c:	6033      	str	r3, [r6, #0]
 800334e:	2000      	movs	r0, #0
 8003350:	bd70      	pop	{r4, r5, r6, pc}
 8003352:	f000 f939 	bl	80035c8 <__malloc_lock>
 8003356:	4a21      	ldr	r2, [pc, #132]	; (80033dc <_malloc_r+0xac>)
 8003358:	6814      	ldr	r4, [r2, #0]
 800335a:	4621      	mov	r1, r4
 800335c:	b991      	cbnz	r1, 8003384 <_malloc_r+0x54>
 800335e:	4c20      	ldr	r4, [pc, #128]	; (80033e0 <_malloc_r+0xb0>)
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	b91b      	cbnz	r3, 800336c <_malloc_r+0x3c>
 8003364:	4630      	mov	r0, r6
 8003366:	f000 f855 	bl	8003414 <_sbrk_r>
 800336a:	6020      	str	r0, [r4, #0]
 800336c:	4629      	mov	r1, r5
 800336e:	4630      	mov	r0, r6
 8003370:	f000 f850 	bl	8003414 <_sbrk_r>
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d124      	bne.n	80033c2 <_malloc_r+0x92>
 8003378:	230c      	movs	r3, #12
 800337a:	6033      	str	r3, [r6, #0]
 800337c:	4630      	mov	r0, r6
 800337e:	f000 f924 	bl	80035ca <__malloc_unlock>
 8003382:	e7e4      	b.n	800334e <_malloc_r+0x1e>
 8003384:	680b      	ldr	r3, [r1, #0]
 8003386:	1b5b      	subs	r3, r3, r5
 8003388:	d418      	bmi.n	80033bc <_malloc_r+0x8c>
 800338a:	2b0b      	cmp	r3, #11
 800338c:	d90f      	bls.n	80033ae <_malloc_r+0x7e>
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	50cd      	str	r5, [r1, r3]
 8003392:	18cc      	adds	r4, r1, r3
 8003394:	4630      	mov	r0, r6
 8003396:	f000 f918 	bl	80035ca <__malloc_unlock>
 800339a:	f104 000b 	add.w	r0, r4, #11
 800339e:	1d23      	adds	r3, r4, #4
 80033a0:	f020 0007 	bic.w	r0, r0, #7
 80033a4:	1ac3      	subs	r3, r0, r3
 80033a6:	d0d3      	beq.n	8003350 <_malloc_r+0x20>
 80033a8:	425a      	negs	r2, r3
 80033aa:	50e2      	str	r2, [r4, r3]
 80033ac:	e7d0      	b.n	8003350 <_malloc_r+0x20>
 80033ae:	428c      	cmp	r4, r1
 80033b0:	684b      	ldr	r3, [r1, #4]
 80033b2:	bf16      	itet	ne
 80033b4:	6063      	strne	r3, [r4, #4]
 80033b6:	6013      	streq	r3, [r2, #0]
 80033b8:	460c      	movne	r4, r1
 80033ba:	e7eb      	b.n	8003394 <_malloc_r+0x64>
 80033bc:	460c      	mov	r4, r1
 80033be:	6849      	ldr	r1, [r1, #4]
 80033c0:	e7cc      	b.n	800335c <_malloc_r+0x2c>
 80033c2:	1cc4      	adds	r4, r0, #3
 80033c4:	f024 0403 	bic.w	r4, r4, #3
 80033c8:	42a0      	cmp	r0, r4
 80033ca:	d005      	beq.n	80033d8 <_malloc_r+0xa8>
 80033cc:	1a21      	subs	r1, r4, r0
 80033ce:	4630      	mov	r0, r6
 80033d0:	f000 f820 	bl	8003414 <_sbrk_r>
 80033d4:	3001      	adds	r0, #1
 80033d6:	d0cf      	beq.n	8003378 <_malloc_r+0x48>
 80033d8:	6025      	str	r5, [r4, #0]
 80033da:	e7db      	b.n	8003394 <_malloc_r+0x64>
 80033dc:	200000ac 	.word	0x200000ac
 80033e0:	200000b0 	.word	0x200000b0

080033e4 <iprintf>:
 80033e4:	b40f      	push	{r0, r1, r2, r3}
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <iprintf+0x2c>)
 80033e8:	b513      	push	{r0, r1, r4, lr}
 80033ea:	681c      	ldr	r4, [r3, #0]
 80033ec:	b124      	cbz	r4, 80033f8 <iprintf+0x14>
 80033ee:	69a3      	ldr	r3, [r4, #24]
 80033f0:	b913      	cbnz	r3, 80033f8 <iprintf+0x14>
 80033f2:	4620      	mov	r0, r4
 80033f4:	f000 f85e 	bl	80034b4 <__sinit>
 80033f8:	ab05      	add	r3, sp, #20
 80033fa:	9a04      	ldr	r2, [sp, #16]
 80033fc:	68a1      	ldr	r1, [r4, #8]
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	4620      	mov	r0, r4
 8003402:	f000 f90d 	bl	8003620 <_vfiprintf_r>
 8003406:	b002      	add	sp, #8
 8003408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800340c:	b004      	add	sp, #16
 800340e:	4770      	bx	lr
 8003410:	2000000c 	.word	0x2000000c

08003414 <_sbrk_r>:
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	4c06      	ldr	r4, [pc, #24]	; (8003430 <_sbrk_r+0x1c>)
 8003418:	2300      	movs	r3, #0
 800341a:	4605      	mov	r5, r0
 800341c:	4608      	mov	r0, r1
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	f7fd fcaa 	bl	8000d78 <_sbrk>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	d102      	bne.n	800342e <_sbrk_r+0x1a>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	b103      	cbz	r3, 800342e <_sbrk_r+0x1a>
 800342c:	602b      	str	r3, [r5, #0]
 800342e:	bd38      	pop	{r3, r4, r5, pc}
 8003430:	200001c0 	.word	0x200001c0

08003434 <std>:
 8003434:	2300      	movs	r3, #0
 8003436:	b510      	push	{r4, lr}
 8003438:	4604      	mov	r4, r0
 800343a:	e9c0 3300 	strd	r3, r3, [r0]
 800343e:	6083      	str	r3, [r0, #8]
 8003440:	8181      	strh	r1, [r0, #12]
 8003442:	6643      	str	r3, [r0, #100]	; 0x64
 8003444:	81c2      	strh	r2, [r0, #14]
 8003446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800344a:	6183      	str	r3, [r0, #24]
 800344c:	4619      	mov	r1, r3
 800344e:	2208      	movs	r2, #8
 8003450:	305c      	adds	r0, #92	; 0x5c
 8003452:	f7ff ff17 	bl	8003284 <memset>
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <std+0x38>)
 8003458:	6263      	str	r3, [r4, #36]	; 0x24
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <std+0x3c>)
 800345c:	62a3      	str	r3, [r4, #40]	; 0x28
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <std+0x40>)
 8003460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <std+0x44>)
 8003464:	6224      	str	r4, [r4, #32]
 8003466:	6323      	str	r3, [r4, #48]	; 0x30
 8003468:	bd10      	pop	{r4, pc}
 800346a:	bf00      	nop
 800346c:	08003b5d 	.word	0x08003b5d
 8003470:	08003b7f 	.word	0x08003b7f
 8003474:	08003bb7 	.word	0x08003bb7
 8003478:	08003bdb 	.word	0x08003bdb

0800347c <_cleanup_r>:
 800347c:	4901      	ldr	r1, [pc, #4]	; (8003484 <_cleanup_r+0x8>)
 800347e:	f000 b885 	b.w	800358c <_fwalk_reent>
 8003482:	bf00      	nop
 8003484:	08003eb5 	.word	0x08003eb5

08003488 <__sfmoreglue>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	1e4a      	subs	r2, r1, #1
 800348c:	2568      	movs	r5, #104	; 0x68
 800348e:	4355      	muls	r5, r2
 8003490:	460e      	mov	r6, r1
 8003492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003496:	f7ff ff4b 	bl	8003330 <_malloc_r>
 800349a:	4604      	mov	r4, r0
 800349c:	b140      	cbz	r0, 80034b0 <__sfmoreglue+0x28>
 800349e:	2100      	movs	r1, #0
 80034a0:	e9c0 1600 	strd	r1, r6, [r0]
 80034a4:	300c      	adds	r0, #12
 80034a6:	60a0      	str	r0, [r4, #8]
 80034a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034ac:	f7ff feea 	bl	8003284 <memset>
 80034b0:	4620      	mov	r0, r4
 80034b2:	bd70      	pop	{r4, r5, r6, pc}

080034b4 <__sinit>:
 80034b4:	6983      	ldr	r3, [r0, #24]
 80034b6:	b510      	push	{r4, lr}
 80034b8:	4604      	mov	r4, r0
 80034ba:	bb33      	cbnz	r3, 800350a <__sinit+0x56>
 80034bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80034c0:	6503      	str	r3, [r0, #80]	; 0x50
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <__sinit+0x58>)
 80034c4:	4a12      	ldr	r2, [pc, #72]	; (8003510 <__sinit+0x5c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6282      	str	r2, [r0, #40]	; 0x28
 80034ca:	4298      	cmp	r0, r3
 80034cc:	bf04      	itt	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	6183      	streq	r3, [r0, #24]
 80034d2:	f000 f81f 	bl	8003514 <__sfp>
 80034d6:	6060      	str	r0, [r4, #4]
 80034d8:	4620      	mov	r0, r4
 80034da:	f000 f81b 	bl	8003514 <__sfp>
 80034de:	60a0      	str	r0, [r4, #8]
 80034e0:	4620      	mov	r0, r4
 80034e2:	f000 f817 	bl	8003514 <__sfp>
 80034e6:	2200      	movs	r2, #0
 80034e8:	60e0      	str	r0, [r4, #12]
 80034ea:	2104      	movs	r1, #4
 80034ec:	6860      	ldr	r0, [r4, #4]
 80034ee:	f7ff ffa1 	bl	8003434 <std>
 80034f2:	2201      	movs	r2, #1
 80034f4:	2109      	movs	r1, #9
 80034f6:	68a0      	ldr	r0, [r4, #8]
 80034f8:	f7ff ff9c 	bl	8003434 <std>
 80034fc:	2202      	movs	r2, #2
 80034fe:	2112      	movs	r1, #18
 8003500:	68e0      	ldr	r0, [r4, #12]
 8003502:	f7ff ff97 	bl	8003434 <std>
 8003506:	2301      	movs	r3, #1
 8003508:	61a3      	str	r3, [r4, #24]
 800350a:	bd10      	pop	{r4, pc}
 800350c:	080040b0 	.word	0x080040b0
 8003510:	0800347d 	.word	0x0800347d

08003514 <__sfp>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <__sfp+0x70>)
 8003518:	681e      	ldr	r6, [r3, #0]
 800351a:	69b3      	ldr	r3, [r6, #24]
 800351c:	4607      	mov	r7, r0
 800351e:	b913      	cbnz	r3, 8003526 <__sfp+0x12>
 8003520:	4630      	mov	r0, r6
 8003522:	f7ff ffc7 	bl	80034b4 <__sinit>
 8003526:	3648      	adds	r6, #72	; 0x48
 8003528:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800352c:	3b01      	subs	r3, #1
 800352e:	d503      	bpl.n	8003538 <__sfp+0x24>
 8003530:	6833      	ldr	r3, [r6, #0]
 8003532:	b133      	cbz	r3, 8003542 <__sfp+0x2e>
 8003534:	6836      	ldr	r6, [r6, #0]
 8003536:	e7f7      	b.n	8003528 <__sfp+0x14>
 8003538:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800353c:	b16d      	cbz	r5, 800355a <__sfp+0x46>
 800353e:	3468      	adds	r4, #104	; 0x68
 8003540:	e7f4      	b.n	800352c <__sfp+0x18>
 8003542:	2104      	movs	r1, #4
 8003544:	4638      	mov	r0, r7
 8003546:	f7ff ff9f 	bl	8003488 <__sfmoreglue>
 800354a:	6030      	str	r0, [r6, #0]
 800354c:	2800      	cmp	r0, #0
 800354e:	d1f1      	bne.n	8003534 <__sfp+0x20>
 8003550:	230c      	movs	r3, #12
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4604      	mov	r4, r0
 8003556:	4620      	mov	r0, r4
 8003558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <__sfp+0x74>)
 800355c:	6665      	str	r5, [r4, #100]	; 0x64
 800355e:	e9c4 5500 	strd	r5, r5, [r4]
 8003562:	60a5      	str	r5, [r4, #8]
 8003564:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003568:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800356c:	2208      	movs	r2, #8
 800356e:	4629      	mov	r1, r5
 8003570:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003574:	f7ff fe86 	bl	8003284 <memset>
 8003578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800357c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003580:	e7e9      	b.n	8003556 <__sfp+0x42>
 8003582:	bf00      	nop
 8003584:	080040b0 	.word	0x080040b0
 8003588:	ffff0001 	.word	0xffff0001

0800358c <_fwalk_reent>:
 800358c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003590:	4680      	mov	r8, r0
 8003592:	4689      	mov	r9, r1
 8003594:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003598:	2600      	movs	r6, #0
 800359a:	b914      	cbnz	r4, 80035a2 <_fwalk_reent+0x16>
 800359c:	4630      	mov	r0, r6
 800359e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80035a6:	3f01      	subs	r7, #1
 80035a8:	d501      	bpl.n	80035ae <_fwalk_reent+0x22>
 80035aa:	6824      	ldr	r4, [r4, #0]
 80035ac:	e7f5      	b.n	800359a <_fwalk_reent+0xe>
 80035ae:	89ab      	ldrh	r3, [r5, #12]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d907      	bls.n	80035c4 <_fwalk_reent+0x38>
 80035b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035b8:	3301      	adds	r3, #1
 80035ba:	d003      	beq.n	80035c4 <_fwalk_reent+0x38>
 80035bc:	4629      	mov	r1, r5
 80035be:	4640      	mov	r0, r8
 80035c0:	47c8      	blx	r9
 80035c2:	4306      	orrs	r6, r0
 80035c4:	3568      	adds	r5, #104	; 0x68
 80035c6:	e7ee      	b.n	80035a6 <_fwalk_reent+0x1a>

080035c8 <__malloc_lock>:
 80035c8:	4770      	bx	lr

080035ca <__malloc_unlock>:
 80035ca:	4770      	bx	lr

080035cc <__sfputc_r>:
 80035cc:	6893      	ldr	r3, [r2, #8]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	b410      	push	{r4}
 80035d4:	6093      	str	r3, [r2, #8]
 80035d6:	da08      	bge.n	80035ea <__sfputc_r+0x1e>
 80035d8:	6994      	ldr	r4, [r2, #24]
 80035da:	42a3      	cmp	r3, r4
 80035dc:	db01      	blt.n	80035e2 <__sfputc_r+0x16>
 80035de:	290a      	cmp	r1, #10
 80035e0:	d103      	bne.n	80035ea <__sfputc_r+0x1e>
 80035e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e6:	f000 bafd 	b.w	8003be4 <__swbuf_r>
 80035ea:	6813      	ldr	r3, [r2, #0]
 80035ec:	1c58      	adds	r0, r3, #1
 80035ee:	6010      	str	r0, [r2, #0]
 80035f0:	7019      	strb	r1, [r3, #0]
 80035f2:	4608      	mov	r0, r1
 80035f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <__sfputs_r>:
 80035fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fc:	4606      	mov	r6, r0
 80035fe:	460f      	mov	r7, r1
 8003600:	4614      	mov	r4, r2
 8003602:	18d5      	adds	r5, r2, r3
 8003604:	42ac      	cmp	r4, r5
 8003606:	d101      	bne.n	800360c <__sfputs_r+0x12>
 8003608:	2000      	movs	r0, #0
 800360a:	e007      	b.n	800361c <__sfputs_r+0x22>
 800360c:	463a      	mov	r2, r7
 800360e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003612:	4630      	mov	r0, r6
 8003614:	f7ff ffda 	bl	80035cc <__sfputc_r>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d1f3      	bne.n	8003604 <__sfputs_r+0xa>
 800361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003620 <_vfiprintf_r>:
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	460c      	mov	r4, r1
 8003626:	b09d      	sub	sp, #116	; 0x74
 8003628:	4617      	mov	r7, r2
 800362a:	461d      	mov	r5, r3
 800362c:	4606      	mov	r6, r0
 800362e:	b118      	cbz	r0, 8003638 <_vfiprintf_r+0x18>
 8003630:	6983      	ldr	r3, [r0, #24]
 8003632:	b90b      	cbnz	r3, 8003638 <_vfiprintf_r+0x18>
 8003634:	f7ff ff3e 	bl	80034b4 <__sinit>
 8003638:	4b7c      	ldr	r3, [pc, #496]	; (800382c <_vfiprintf_r+0x20c>)
 800363a:	429c      	cmp	r4, r3
 800363c:	d158      	bne.n	80036f0 <_vfiprintf_r+0xd0>
 800363e:	6874      	ldr	r4, [r6, #4]
 8003640:	89a3      	ldrh	r3, [r4, #12]
 8003642:	0718      	lsls	r0, r3, #28
 8003644:	d55e      	bpl.n	8003704 <_vfiprintf_r+0xe4>
 8003646:	6923      	ldr	r3, [r4, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d05b      	beq.n	8003704 <_vfiprintf_r+0xe4>
 800364c:	2300      	movs	r3, #0
 800364e:	9309      	str	r3, [sp, #36]	; 0x24
 8003650:	2320      	movs	r3, #32
 8003652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003656:	2330      	movs	r3, #48	; 0x30
 8003658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800365c:	9503      	str	r5, [sp, #12]
 800365e:	f04f 0b01 	mov.w	fp, #1
 8003662:	46b8      	mov	r8, r7
 8003664:	4645      	mov	r5, r8
 8003666:	f815 3b01 	ldrb.w	r3, [r5], #1
 800366a:	b10b      	cbz	r3, 8003670 <_vfiprintf_r+0x50>
 800366c:	2b25      	cmp	r3, #37	; 0x25
 800366e:	d154      	bne.n	800371a <_vfiprintf_r+0xfa>
 8003670:	ebb8 0a07 	subs.w	sl, r8, r7
 8003674:	d00b      	beq.n	800368e <_vfiprintf_r+0x6e>
 8003676:	4653      	mov	r3, sl
 8003678:	463a      	mov	r2, r7
 800367a:	4621      	mov	r1, r4
 800367c:	4630      	mov	r0, r6
 800367e:	f7ff ffbc 	bl	80035fa <__sfputs_r>
 8003682:	3001      	adds	r0, #1
 8003684:	f000 80c2 	beq.w	800380c <_vfiprintf_r+0x1ec>
 8003688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800368a:	4453      	add	r3, sl
 800368c:	9309      	str	r3, [sp, #36]	; 0x24
 800368e:	f898 3000 	ldrb.w	r3, [r8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80ba 	beq.w	800380c <_vfiprintf_r+0x1ec>
 8003698:	2300      	movs	r3, #0
 800369a:	f04f 32ff 	mov.w	r2, #4294967295
 800369e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036a2:	9304      	str	r3, [sp, #16]
 80036a4:	9307      	str	r3, [sp, #28]
 80036a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036aa:	931a      	str	r3, [sp, #104]	; 0x68
 80036ac:	46a8      	mov	r8, r5
 80036ae:	2205      	movs	r2, #5
 80036b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80036b4:	485e      	ldr	r0, [pc, #376]	; (8003830 <_vfiprintf_r+0x210>)
 80036b6:	f7fc fdab 	bl	8000210 <memchr>
 80036ba:	9b04      	ldr	r3, [sp, #16]
 80036bc:	bb78      	cbnz	r0, 800371e <_vfiprintf_r+0xfe>
 80036be:	06d9      	lsls	r1, r3, #27
 80036c0:	bf44      	itt	mi
 80036c2:	2220      	movmi	r2, #32
 80036c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036c8:	071a      	lsls	r2, r3, #28
 80036ca:	bf44      	itt	mi
 80036cc:	222b      	movmi	r2, #43	; 0x2b
 80036ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036d2:	782a      	ldrb	r2, [r5, #0]
 80036d4:	2a2a      	cmp	r2, #42	; 0x2a
 80036d6:	d02a      	beq.n	800372e <_vfiprintf_r+0x10e>
 80036d8:	9a07      	ldr	r2, [sp, #28]
 80036da:	46a8      	mov	r8, r5
 80036dc:	2000      	movs	r0, #0
 80036de:	250a      	movs	r5, #10
 80036e0:	4641      	mov	r1, r8
 80036e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036e6:	3b30      	subs	r3, #48	; 0x30
 80036e8:	2b09      	cmp	r3, #9
 80036ea:	d969      	bls.n	80037c0 <_vfiprintf_r+0x1a0>
 80036ec:	b360      	cbz	r0, 8003748 <_vfiprintf_r+0x128>
 80036ee:	e024      	b.n	800373a <_vfiprintf_r+0x11a>
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <_vfiprintf_r+0x214>)
 80036f2:	429c      	cmp	r4, r3
 80036f4:	d101      	bne.n	80036fa <_vfiprintf_r+0xda>
 80036f6:	68b4      	ldr	r4, [r6, #8]
 80036f8:	e7a2      	b.n	8003640 <_vfiprintf_r+0x20>
 80036fa:	4b4f      	ldr	r3, [pc, #316]	; (8003838 <_vfiprintf_r+0x218>)
 80036fc:	429c      	cmp	r4, r3
 80036fe:	bf08      	it	eq
 8003700:	68f4      	ldreq	r4, [r6, #12]
 8003702:	e79d      	b.n	8003640 <_vfiprintf_r+0x20>
 8003704:	4621      	mov	r1, r4
 8003706:	4630      	mov	r0, r6
 8003708:	f000 fad0 	bl	8003cac <__swsetup_r>
 800370c:	2800      	cmp	r0, #0
 800370e:	d09d      	beq.n	800364c <_vfiprintf_r+0x2c>
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	b01d      	add	sp, #116	; 0x74
 8003716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800371a:	46a8      	mov	r8, r5
 800371c:	e7a2      	b.n	8003664 <_vfiprintf_r+0x44>
 800371e:	4a44      	ldr	r2, [pc, #272]	; (8003830 <_vfiprintf_r+0x210>)
 8003720:	1a80      	subs	r0, r0, r2
 8003722:	fa0b f000 	lsl.w	r0, fp, r0
 8003726:	4318      	orrs	r0, r3
 8003728:	9004      	str	r0, [sp, #16]
 800372a:	4645      	mov	r5, r8
 800372c:	e7be      	b.n	80036ac <_vfiprintf_r+0x8c>
 800372e:	9a03      	ldr	r2, [sp, #12]
 8003730:	1d11      	adds	r1, r2, #4
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	9103      	str	r1, [sp, #12]
 8003736:	2a00      	cmp	r2, #0
 8003738:	db01      	blt.n	800373e <_vfiprintf_r+0x11e>
 800373a:	9207      	str	r2, [sp, #28]
 800373c:	e004      	b.n	8003748 <_vfiprintf_r+0x128>
 800373e:	4252      	negs	r2, r2
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	9207      	str	r2, [sp, #28]
 8003746:	9304      	str	r3, [sp, #16]
 8003748:	f898 3000 	ldrb.w	r3, [r8]
 800374c:	2b2e      	cmp	r3, #46	; 0x2e
 800374e:	d10e      	bne.n	800376e <_vfiprintf_r+0x14e>
 8003750:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003754:	2b2a      	cmp	r3, #42	; 0x2a
 8003756:	d138      	bne.n	80037ca <_vfiprintf_r+0x1aa>
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	9203      	str	r2, [sp, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	bfb8      	it	lt
 8003764:	f04f 33ff 	movlt.w	r3, #4294967295
 8003768:	f108 0802 	add.w	r8, r8, #2
 800376c:	9305      	str	r3, [sp, #20]
 800376e:	4d33      	ldr	r5, [pc, #204]	; (800383c <_vfiprintf_r+0x21c>)
 8003770:	f898 1000 	ldrb.w	r1, [r8]
 8003774:	2203      	movs	r2, #3
 8003776:	4628      	mov	r0, r5
 8003778:	f7fc fd4a 	bl	8000210 <memchr>
 800377c:	b140      	cbz	r0, 8003790 <_vfiprintf_r+0x170>
 800377e:	2340      	movs	r3, #64	; 0x40
 8003780:	1b40      	subs	r0, r0, r5
 8003782:	fa03 f000 	lsl.w	r0, r3, r0
 8003786:	9b04      	ldr	r3, [sp, #16]
 8003788:	4303      	orrs	r3, r0
 800378a:	f108 0801 	add.w	r8, r8, #1
 800378e:	9304      	str	r3, [sp, #16]
 8003790:	f898 1000 	ldrb.w	r1, [r8]
 8003794:	482a      	ldr	r0, [pc, #168]	; (8003840 <_vfiprintf_r+0x220>)
 8003796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800379a:	2206      	movs	r2, #6
 800379c:	f108 0701 	add.w	r7, r8, #1
 80037a0:	f7fc fd36 	bl	8000210 <memchr>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d037      	beq.n	8003818 <_vfiprintf_r+0x1f8>
 80037a8:	4b26      	ldr	r3, [pc, #152]	; (8003844 <_vfiprintf_r+0x224>)
 80037aa:	bb1b      	cbnz	r3, 80037f4 <_vfiprintf_r+0x1d4>
 80037ac:	9b03      	ldr	r3, [sp, #12]
 80037ae:	3307      	adds	r3, #7
 80037b0:	f023 0307 	bic.w	r3, r3, #7
 80037b4:	3308      	adds	r3, #8
 80037b6:	9303      	str	r3, [sp, #12]
 80037b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ba:	444b      	add	r3, r9
 80037bc:	9309      	str	r3, [sp, #36]	; 0x24
 80037be:	e750      	b.n	8003662 <_vfiprintf_r+0x42>
 80037c0:	fb05 3202 	mla	r2, r5, r2, r3
 80037c4:	2001      	movs	r0, #1
 80037c6:	4688      	mov	r8, r1
 80037c8:	e78a      	b.n	80036e0 <_vfiprintf_r+0xc0>
 80037ca:	2300      	movs	r3, #0
 80037cc:	f108 0801 	add.w	r8, r8, #1
 80037d0:	9305      	str	r3, [sp, #20]
 80037d2:	4619      	mov	r1, r3
 80037d4:	250a      	movs	r5, #10
 80037d6:	4640      	mov	r0, r8
 80037d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037dc:	3a30      	subs	r2, #48	; 0x30
 80037de:	2a09      	cmp	r2, #9
 80037e0:	d903      	bls.n	80037ea <_vfiprintf_r+0x1ca>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0c3      	beq.n	800376e <_vfiprintf_r+0x14e>
 80037e6:	9105      	str	r1, [sp, #20]
 80037e8:	e7c1      	b.n	800376e <_vfiprintf_r+0x14e>
 80037ea:	fb05 2101 	mla	r1, r5, r1, r2
 80037ee:	2301      	movs	r3, #1
 80037f0:	4680      	mov	r8, r0
 80037f2:	e7f0      	b.n	80037d6 <_vfiprintf_r+0x1b6>
 80037f4:	ab03      	add	r3, sp, #12
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4622      	mov	r2, r4
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <_vfiprintf_r+0x228>)
 80037fc:	a904      	add	r1, sp, #16
 80037fe:	4630      	mov	r0, r6
 8003800:	f3af 8000 	nop.w
 8003804:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003808:	4681      	mov	r9, r0
 800380a:	d1d5      	bne.n	80037b8 <_vfiprintf_r+0x198>
 800380c:	89a3      	ldrh	r3, [r4, #12]
 800380e:	065b      	lsls	r3, r3, #25
 8003810:	f53f af7e 	bmi.w	8003710 <_vfiprintf_r+0xf0>
 8003814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003816:	e77d      	b.n	8003714 <_vfiprintf_r+0xf4>
 8003818:	ab03      	add	r3, sp, #12
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	4622      	mov	r2, r4
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <_vfiprintf_r+0x228>)
 8003820:	a904      	add	r1, sp, #16
 8003822:	4630      	mov	r0, r6
 8003824:	f000 f888 	bl	8003938 <_printf_i>
 8003828:	e7ec      	b.n	8003804 <_vfiprintf_r+0x1e4>
 800382a:	bf00      	nop
 800382c:	080040d4 	.word	0x080040d4
 8003830:	08004114 	.word	0x08004114
 8003834:	080040f4 	.word	0x080040f4
 8003838:	080040b4 	.word	0x080040b4
 800383c:	0800411a 	.word	0x0800411a
 8003840:	0800411e 	.word	0x0800411e
 8003844:	00000000 	.word	0x00000000
 8003848:	080035fb 	.word	0x080035fb

0800384c <_printf_common>:
 800384c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003850:	4691      	mov	r9, r2
 8003852:	461f      	mov	r7, r3
 8003854:	688a      	ldr	r2, [r1, #8]
 8003856:	690b      	ldr	r3, [r1, #16]
 8003858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800385c:	4293      	cmp	r3, r2
 800385e:	bfb8      	it	lt
 8003860:	4613      	movlt	r3, r2
 8003862:	f8c9 3000 	str.w	r3, [r9]
 8003866:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800386a:	4606      	mov	r6, r0
 800386c:	460c      	mov	r4, r1
 800386e:	b112      	cbz	r2, 8003876 <_printf_common+0x2a>
 8003870:	3301      	adds	r3, #1
 8003872:	f8c9 3000 	str.w	r3, [r9]
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	0699      	lsls	r1, r3, #26
 800387a:	bf42      	ittt	mi
 800387c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003880:	3302      	addmi	r3, #2
 8003882:	f8c9 3000 	strmi.w	r3, [r9]
 8003886:	6825      	ldr	r5, [r4, #0]
 8003888:	f015 0506 	ands.w	r5, r5, #6
 800388c:	d107      	bne.n	800389e <_printf_common+0x52>
 800388e:	f104 0a19 	add.w	sl, r4, #25
 8003892:	68e3      	ldr	r3, [r4, #12]
 8003894:	f8d9 2000 	ldr.w	r2, [r9]
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	42ab      	cmp	r3, r5
 800389c:	dc28      	bgt.n	80038f0 <_printf_common+0xa4>
 800389e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	3300      	adds	r3, #0
 80038a6:	bf18      	it	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	0692      	lsls	r2, r2, #26
 80038ac:	d42d      	bmi.n	800390a <_printf_common+0xbe>
 80038ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038b2:	4639      	mov	r1, r7
 80038b4:	4630      	mov	r0, r6
 80038b6:	47c0      	blx	r8
 80038b8:	3001      	adds	r0, #1
 80038ba:	d020      	beq.n	80038fe <_printf_common+0xb2>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	68e5      	ldr	r5, [r4, #12]
 80038c0:	f8d9 2000 	ldr.w	r2, [r9]
 80038c4:	f003 0306 	and.w	r3, r3, #6
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	bf08      	it	eq
 80038cc:	1aad      	subeq	r5, r5, r2
 80038ce:	68a3      	ldr	r3, [r4, #8]
 80038d0:	6922      	ldr	r2, [r4, #16]
 80038d2:	bf0c      	ite	eq
 80038d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038d8:	2500      	movne	r5, #0
 80038da:	4293      	cmp	r3, r2
 80038dc:	bfc4      	itt	gt
 80038de:	1a9b      	subgt	r3, r3, r2
 80038e0:	18ed      	addgt	r5, r5, r3
 80038e2:	f04f 0900 	mov.w	r9, #0
 80038e6:	341a      	adds	r4, #26
 80038e8:	454d      	cmp	r5, r9
 80038ea:	d11a      	bne.n	8003922 <_printf_common+0xd6>
 80038ec:	2000      	movs	r0, #0
 80038ee:	e008      	b.n	8003902 <_printf_common+0xb6>
 80038f0:	2301      	movs	r3, #1
 80038f2:	4652      	mov	r2, sl
 80038f4:	4639      	mov	r1, r7
 80038f6:	4630      	mov	r0, r6
 80038f8:	47c0      	blx	r8
 80038fa:	3001      	adds	r0, #1
 80038fc:	d103      	bne.n	8003906 <_printf_common+0xba>
 80038fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003906:	3501      	adds	r5, #1
 8003908:	e7c3      	b.n	8003892 <_printf_common+0x46>
 800390a:	18e1      	adds	r1, r4, r3
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	2030      	movs	r0, #48	; 0x30
 8003910:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003914:	4422      	add	r2, r4
 8003916:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800391a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800391e:	3302      	adds	r3, #2
 8003920:	e7c5      	b.n	80038ae <_printf_common+0x62>
 8003922:	2301      	movs	r3, #1
 8003924:	4622      	mov	r2, r4
 8003926:	4639      	mov	r1, r7
 8003928:	4630      	mov	r0, r6
 800392a:	47c0      	blx	r8
 800392c:	3001      	adds	r0, #1
 800392e:	d0e6      	beq.n	80038fe <_printf_common+0xb2>
 8003930:	f109 0901 	add.w	r9, r9, #1
 8003934:	e7d8      	b.n	80038e8 <_printf_common+0x9c>
	...

08003938 <_printf_i>:
 8003938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800393c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003940:	460c      	mov	r4, r1
 8003942:	7e09      	ldrb	r1, [r1, #24]
 8003944:	b085      	sub	sp, #20
 8003946:	296e      	cmp	r1, #110	; 0x6e
 8003948:	4617      	mov	r7, r2
 800394a:	4606      	mov	r6, r0
 800394c:	4698      	mov	r8, r3
 800394e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003950:	f000 80b3 	beq.w	8003aba <_printf_i+0x182>
 8003954:	d822      	bhi.n	800399c <_printf_i+0x64>
 8003956:	2963      	cmp	r1, #99	; 0x63
 8003958:	d036      	beq.n	80039c8 <_printf_i+0x90>
 800395a:	d80a      	bhi.n	8003972 <_printf_i+0x3a>
 800395c:	2900      	cmp	r1, #0
 800395e:	f000 80b9 	beq.w	8003ad4 <_printf_i+0x19c>
 8003962:	2958      	cmp	r1, #88	; 0x58
 8003964:	f000 8083 	beq.w	8003a6e <_printf_i+0x136>
 8003968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800396c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003970:	e032      	b.n	80039d8 <_printf_i+0xa0>
 8003972:	2964      	cmp	r1, #100	; 0x64
 8003974:	d001      	beq.n	800397a <_printf_i+0x42>
 8003976:	2969      	cmp	r1, #105	; 0x69
 8003978:	d1f6      	bne.n	8003968 <_printf_i+0x30>
 800397a:	6820      	ldr	r0, [r4, #0]
 800397c:	6813      	ldr	r3, [r2, #0]
 800397e:	0605      	lsls	r5, r0, #24
 8003980:	f103 0104 	add.w	r1, r3, #4
 8003984:	d52a      	bpl.n	80039dc <_printf_i+0xa4>
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6011      	str	r1, [r2, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	da03      	bge.n	8003996 <_printf_i+0x5e>
 800398e:	222d      	movs	r2, #45	; 0x2d
 8003990:	425b      	negs	r3, r3
 8003992:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003996:	486f      	ldr	r0, [pc, #444]	; (8003b54 <_printf_i+0x21c>)
 8003998:	220a      	movs	r2, #10
 800399a:	e039      	b.n	8003a10 <_printf_i+0xd8>
 800399c:	2973      	cmp	r1, #115	; 0x73
 800399e:	f000 809d 	beq.w	8003adc <_printf_i+0x1a4>
 80039a2:	d808      	bhi.n	80039b6 <_printf_i+0x7e>
 80039a4:	296f      	cmp	r1, #111	; 0x6f
 80039a6:	d020      	beq.n	80039ea <_printf_i+0xb2>
 80039a8:	2970      	cmp	r1, #112	; 0x70
 80039aa:	d1dd      	bne.n	8003968 <_printf_i+0x30>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	f043 0320 	orr.w	r3, r3, #32
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	e003      	b.n	80039be <_printf_i+0x86>
 80039b6:	2975      	cmp	r1, #117	; 0x75
 80039b8:	d017      	beq.n	80039ea <_printf_i+0xb2>
 80039ba:	2978      	cmp	r1, #120	; 0x78
 80039bc:	d1d4      	bne.n	8003968 <_printf_i+0x30>
 80039be:	2378      	movs	r3, #120	; 0x78
 80039c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039c4:	4864      	ldr	r0, [pc, #400]	; (8003b58 <_printf_i+0x220>)
 80039c6:	e055      	b.n	8003a74 <_printf_i+0x13c>
 80039c8:	6813      	ldr	r3, [r2, #0]
 80039ca:	1d19      	adds	r1, r3, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6011      	str	r1, [r2, #0]
 80039d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039d8:	2301      	movs	r3, #1
 80039da:	e08c      	b.n	8003af6 <_printf_i+0x1be>
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6011      	str	r1, [r2, #0]
 80039e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039e4:	bf18      	it	ne
 80039e6:	b21b      	sxthne	r3, r3
 80039e8:	e7cf      	b.n	800398a <_printf_i+0x52>
 80039ea:	6813      	ldr	r3, [r2, #0]
 80039ec:	6825      	ldr	r5, [r4, #0]
 80039ee:	1d18      	adds	r0, r3, #4
 80039f0:	6010      	str	r0, [r2, #0]
 80039f2:	0628      	lsls	r0, r5, #24
 80039f4:	d501      	bpl.n	80039fa <_printf_i+0xc2>
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	e002      	b.n	8003a00 <_printf_i+0xc8>
 80039fa:	0668      	lsls	r0, r5, #25
 80039fc:	d5fb      	bpl.n	80039f6 <_printf_i+0xbe>
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	4854      	ldr	r0, [pc, #336]	; (8003b54 <_printf_i+0x21c>)
 8003a02:	296f      	cmp	r1, #111	; 0x6f
 8003a04:	bf14      	ite	ne
 8003a06:	220a      	movne	r2, #10
 8003a08:	2208      	moveq	r2, #8
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a10:	6865      	ldr	r5, [r4, #4]
 8003a12:	60a5      	str	r5, [r4, #8]
 8003a14:	2d00      	cmp	r5, #0
 8003a16:	f2c0 8095 	blt.w	8003b44 <_printf_i+0x20c>
 8003a1a:	6821      	ldr	r1, [r4, #0]
 8003a1c:	f021 0104 	bic.w	r1, r1, #4
 8003a20:	6021      	str	r1, [r4, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d13d      	bne.n	8003aa2 <_printf_i+0x16a>
 8003a26:	2d00      	cmp	r5, #0
 8003a28:	f040 808e 	bne.w	8003b48 <_printf_i+0x210>
 8003a2c:	4665      	mov	r5, ip
 8003a2e:	2a08      	cmp	r2, #8
 8003a30:	d10b      	bne.n	8003a4a <_printf_i+0x112>
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	07db      	lsls	r3, r3, #31
 8003a36:	d508      	bpl.n	8003a4a <_printf_i+0x112>
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	bfde      	ittt	le
 8003a40:	2330      	movle	r3, #48	; 0x30
 8003a42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a4a:	ebac 0305 	sub.w	r3, ip, r5
 8003a4e:	6123      	str	r3, [r4, #16]
 8003a50:	f8cd 8000 	str.w	r8, [sp]
 8003a54:	463b      	mov	r3, r7
 8003a56:	aa03      	add	r2, sp, #12
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f7ff fef6 	bl	800384c <_printf_common>
 8003a60:	3001      	adds	r0, #1
 8003a62:	d14d      	bne.n	8003b00 <_printf_i+0x1c8>
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	b005      	add	sp, #20
 8003a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a6e:	4839      	ldr	r0, [pc, #228]	; (8003b54 <_printf_i+0x21c>)
 8003a70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003a74:	6813      	ldr	r3, [r2, #0]
 8003a76:	6821      	ldr	r1, [r4, #0]
 8003a78:	1d1d      	adds	r5, r3, #4
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6015      	str	r5, [r2, #0]
 8003a7e:	060a      	lsls	r2, r1, #24
 8003a80:	d50b      	bpl.n	8003a9a <_printf_i+0x162>
 8003a82:	07ca      	lsls	r2, r1, #31
 8003a84:	bf44      	itt	mi
 8003a86:	f041 0120 	orrmi.w	r1, r1, #32
 8003a8a:	6021      	strmi	r1, [r4, #0]
 8003a8c:	b91b      	cbnz	r3, 8003a96 <_printf_i+0x15e>
 8003a8e:	6822      	ldr	r2, [r4, #0]
 8003a90:	f022 0220 	bic.w	r2, r2, #32
 8003a94:	6022      	str	r2, [r4, #0]
 8003a96:	2210      	movs	r2, #16
 8003a98:	e7b7      	b.n	8003a0a <_printf_i+0xd2>
 8003a9a:	064d      	lsls	r5, r1, #25
 8003a9c:	bf48      	it	mi
 8003a9e:	b29b      	uxthmi	r3, r3
 8003aa0:	e7ef      	b.n	8003a82 <_printf_i+0x14a>
 8003aa2:	4665      	mov	r5, ip
 8003aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003aa8:	fb02 3311 	mls	r3, r2, r1, r3
 8003aac:	5cc3      	ldrb	r3, [r0, r3]
 8003aae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	2900      	cmp	r1, #0
 8003ab6:	d1f5      	bne.n	8003aa4 <_printf_i+0x16c>
 8003ab8:	e7b9      	b.n	8003a2e <_printf_i+0xf6>
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	6825      	ldr	r5, [r4, #0]
 8003abe:	6961      	ldr	r1, [r4, #20]
 8003ac0:	1d18      	adds	r0, r3, #4
 8003ac2:	6010      	str	r0, [r2, #0]
 8003ac4:	0628      	lsls	r0, r5, #24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	d501      	bpl.n	8003ace <_printf_i+0x196>
 8003aca:	6019      	str	r1, [r3, #0]
 8003acc:	e002      	b.n	8003ad4 <_printf_i+0x19c>
 8003ace:	066a      	lsls	r2, r5, #25
 8003ad0:	d5fb      	bpl.n	8003aca <_printf_i+0x192>
 8003ad2:	8019      	strh	r1, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	4665      	mov	r5, ip
 8003ada:	e7b9      	b.n	8003a50 <_printf_i+0x118>
 8003adc:	6813      	ldr	r3, [r2, #0]
 8003ade:	1d19      	adds	r1, r3, #4
 8003ae0:	6011      	str	r1, [r2, #0]
 8003ae2:	681d      	ldr	r5, [r3, #0]
 8003ae4:	6862      	ldr	r2, [r4, #4]
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f7fc fb91 	bl	8000210 <memchr>
 8003aee:	b108      	cbz	r0, 8003af4 <_printf_i+0x1bc>
 8003af0:	1b40      	subs	r0, r0, r5
 8003af2:	6060      	str	r0, [r4, #4]
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	2300      	movs	r3, #0
 8003afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003afe:	e7a7      	b.n	8003a50 <_printf_i+0x118>
 8003b00:	6923      	ldr	r3, [r4, #16]
 8003b02:	462a      	mov	r2, r5
 8003b04:	4639      	mov	r1, r7
 8003b06:	4630      	mov	r0, r6
 8003b08:	47c0      	blx	r8
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d0aa      	beq.n	8003a64 <_printf_i+0x12c>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	079b      	lsls	r3, r3, #30
 8003b12:	d413      	bmi.n	8003b3c <_printf_i+0x204>
 8003b14:	68e0      	ldr	r0, [r4, #12]
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	4298      	cmp	r0, r3
 8003b1a:	bfb8      	it	lt
 8003b1c:	4618      	movlt	r0, r3
 8003b1e:	e7a3      	b.n	8003a68 <_printf_i+0x130>
 8003b20:	2301      	movs	r3, #1
 8003b22:	464a      	mov	r2, r9
 8003b24:	4639      	mov	r1, r7
 8003b26:	4630      	mov	r0, r6
 8003b28:	47c0      	blx	r8
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d09a      	beq.n	8003a64 <_printf_i+0x12c>
 8003b2e:	3501      	adds	r5, #1
 8003b30:	68e3      	ldr	r3, [r4, #12]
 8003b32:	9a03      	ldr	r2, [sp, #12]
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	42ab      	cmp	r3, r5
 8003b38:	dcf2      	bgt.n	8003b20 <_printf_i+0x1e8>
 8003b3a:	e7eb      	b.n	8003b14 <_printf_i+0x1dc>
 8003b3c:	2500      	movs	r5, #0
 8003b3e:	f104 0919 	add.w	r9, r4, #25
 8003b42:	e7f5      	b.n	8003b30 <_printf_i+0x1f8>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ac      	bne.n	8003aa2 <_printf_i+0x16a>
 8003b48:	7803      	ldrb	r3, [r0, #0]
 8003b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b52:	e76c      	b.n	8003a2e <_printf_i+0xf6>
 8003b54:	08004125 	.word	0x08004125
 8003b58:	08004136 	.word	0x08004136

08003b5c <__sread>:
 8003b5c:	b510      	push	{r4, lr}
 8003b5e:	460c      	mov	r4, r1
 8003b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b64:	f000 fa46 	bl	8003ff4 <_read_r>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	bfab      	itete	ge
 8003b6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b70:	181b      	addge	r3, r3, r0
 8003b72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b76:	bfac      	ite	ge
 8003b78:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b7a:	81a3      	strhlt	r3, [r4, #12]
 8003b7c:	bd10      	pop	{r4, pc}

08003b7e <__swrite>:
 8003b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b82:	461f      	mov	r7, r3
 8003b84:	898b      	ldrh	r3, [r1, #12]
 8003b86:	05db      	lsls	r3, r3, #23
 8003b88:	4605      	mov	r5, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	4616      	mov	r6, r2
 8003b8e:	d505      	bpl.n	8003b9c <__swrite+0x1e>
 8003b90:	2302      	movs	r3, #2
 8003b92:	2200      	movs	r2, #0
 8003b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b98:	f000 f9b6 	bl	8003f08 <_lseek_r>
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ba6:	81a3      	strh	r3, [r4, #12]
 8003ba8:	4632      	mov	r2, r6
 8003baa:	463b      	mov	r3, r7
 8003bac:	4628      	mov	r0, r5
 8003bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb2:	f000 b869 	b.w	8003c88 <_write_r>

08003bb6 <__sseek>:
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	460c      	mov	r4, r1
 8003bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bbe:	f000 f9a3 	bl	8003f08 <_lseek_r>
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	bf15      	itete	ne
 8003bc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003bca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003bce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bd2:	81a3      	strheq	r3, [r4, #12]
 8003bd4:	bf18      	it	ne
 8003bd6:	81a3      	strhne	r3, [r4, #12]
 8003bd8:	bd10      	pop	{r4, pc}

08003bda <__sclose>:
 8003bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bde:	f000 b8d3 	b.w	8003d88 <_close_r>
	...

08003be4 <__swbuf_r>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	460e      	mov	r6, r1
 8003be8:	4614      	mov	r4, r2
 8003bea:	4605      	mov	r5, r0
 8003bec:	b118      	cbz	r0, 8003bf6 <__swbuf_r+0x12>
 8003bee:	6983      	ldr	r3, [r0, #24]
 8003bf0:	b90b      	cbnz	r3, 8003bf6 <__swbuf_r+0x12>
 8003bf2:	f7ff fc5f 	bl	80034b4 <__sinit>
 8003bf6:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <__swbuf_r+0x98>)
 8003bf8:	429c      	cmp	r4, r3
 8003bfa:	d12a      	bne.n	8003c52 <__swbuf_r+0x6e>
 8003bfc:	686c      	ldr	r4, [r5, #4]
 8003bfe:	69a3      	ldr	r3, [r4, #24]
 8003c00:	60a3      	str	r3, [r4, #8]
 8003c02:	89a3      	ldrh	r3, [r4, #12]
 8003c04:	071a      	lsls	r2, r3, #28
 8003c06:	d52e      	bpl.n	8003c66 <__swbuf_r+0x82>
 8003c08:	6923      	ldr	r3, [r4, #16]
 8003c0a:	b363      	cbz	r3, 8003c66 <__swbuf_r+0x82>
 8003c0c:	6923      	ldr	r3, [r4, #16]
 8003c0e:	6820      	ldr	r0, [r4, #0]
 8003c10:	1ac0      	subs	r0, r0, r3
 8003c12:	6963      	ldr	r3, [r4, #20]
 8003c14:	b2f6      	uxtb	r6, r6
 8003c16:	4283      	cmp	r3, r0
 8003c18:	4637      	mov	r7, r6
 8003c1a:	dc04      	bgt.n	8003c26 <__swbuf_r+0x42>
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f000 f948 	bl	8003eb4 <_fflush_r>
 8003c24:	bb28      	cbnz	r0, 8003c72 <__swbuf_r+0x8e>
 8003c26:	68a3      	ldr	r3, [r4, #8]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	60a3      	str	r3, [r4, #8]
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	6022      	str	r2, [r4, #0]
 8003c32:	701e      	strb	r6, [r3, #0]
 8003c34:	6963      	ldr	r3, [r4, #20]
 8003c36:	3001      	adds	r0, #1
 8003c38:	4283      	cmp	r3, r0
 8003c3a:	d004      	beq.n	8003c46 <__swbuf_r+0x62>
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	07db      	lsls	r3, r3, #31
 8003c40:	d519      	bpl.n	8003c76 <__swbuf_r+0x92>
 8003c42:	2e0a      	cmp	r6, #10
 8003c44:	d117      	bne.n	8003c76 <__swbuf_r+0x92>
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 f933 	bl	8003eb4 <_fflush_r>
 8003c4e:	b190      	cbz	r0, 8003c76 <__swbuf_r+0x92>
 8003c50:	e00f      	b.n	8003c72 <__swbuf_r+0x8e>
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <__swbuf_r+0x9c>)
 8003c54:	429c      	cmp	r4, r3
 8003c56:	d101      	bne.n	8003c5c <__swbuf_r+0x78>
 8003c58:	68ac      	ldr	r4, [r5, #8]
 8003c5a:	e7d0      	b.n	8003bfe <__swbuf_r+0x1a>
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <__swbuf_r+0xa0>)
 8003c5e:	429c      	cmp	r4, r3
 8003c60:	bf08      	it	eq
 8003c62:	68ec      	ldreq	r4, [r5, #12]
 8003c64:	e7cb      	b.n	8003bfe <__swbuf_r+0x1a>
 8003c66:	4621      	mov	r1, r4
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f000 f81f 	bl	8003cac <__swsetup_r>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d0cc      	beq.n	8003c0c <__swbuf_r+0x28>
 8003c72:	f04f 37ff 	mov.w	r7, #4294967295
 8003c76:	4638      	mov	r0, r7
 8003c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	080040d4 	.word	0x080040d4
 8003c80:	080040f4 	.word	0x080040f4
 8003c84:	080040b4 	.word	0x080040b4

08003c88 <_write_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	4c07      	ldr	r4, [pc, #28]	; (8003ca8 <_write_r+0x20>)
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	4608      	mov	r0, r1
 8003c90:	4611      	mov	r1, r2
 8003c92:	2200      	movs	r2, #0
 8003c94:	6022      	str	r2, [r4, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f7fd f81d 	bl	8000cd6 <_write>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_write_r+0x1e>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_write_r+0x1e>
 8003ca4:	602b      	str	r3, [r5, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	200001c0 	.word	0x200001c0

08003cac <__swsetup_r>:
 8003cac:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <__swsetup_r+0xcc>)
 8003cae:	b570      	push	{r4, r5, r6, lr}
 8003cb0:	681d      	ldr	r5, [r3, #0]
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	b125      	cbz	r5, 8003cc2 <__swsetup_r+0x16>
 8003cb8:	69ab      	ldr	r3, [r5, #24]
 8003cba:	b913      	cbnz	r3, 8003cc2 <__swsetup_r+0x16>
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f7ff fbf9 	bl	80034b4 <__sinit>
 8003cc2:	4b2e      	ldr	r3, [pc, #184]	; (8003d7c <__swsetup_r+0xd0>)
 8003cc4:	429c      	cmp	r4, r3
 8003cc6:	d10f      	bne.n	8003ce8 <__swsetup_r+0x3c>
 8003cc8:	686c      	ldr	r4, [r5, #4]
 8003cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	0715      	lsls	r5, r2, #28
 8003cd2:	d42c      	bmi.n	8003d2e <__swsetup_r+0x82>
 8003cd4:	06d0      	lsls	r0, r2, #27
 8003cd6:	d411      	bmi.n	8003cfc <__swsetup_r+0x50>
 8003cd8:	2209      	movs	r2, #9
 8003cda:	6032      	str	r2, [r6, #0]
 8003cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce0:	81a3      	strh	r3, [r4, #12]
 8003ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce6:	e03e      	b.n	8003d66 <__swsetup_r+0xba>
 8003ce8:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <__swsetup_r+0xd4>)
 8003cea:	429c      	cmp	r4, r3
 8003cec:	d101      	bne.n	8003cf2 <__swsetup_r+0x46>
 8003cee:	68ac      	ldr	r4, [r5, #8]
 8003cf0:	e7eb      	b.n	8003cca <__swsetup_r+0x1e>
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <__swsetup_r+0xd8>)
 8003cf4:	429c      	cmp	r4, r3
 8003cf6:	bf08      	it	eq
 8003cf8:	68ec      	ldreq	r4, [r5, #12]
 8003cfa:	e7e6      	b.n	8003cca <__swsetup_r+0x1e>
 8003cfc:	0751      	lsls	r1, r2, #29
 8003cfe:	d512      	bpl.n	8003d26 <__swsetup_r+0x7a>
 8003d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d02:	b141      	cbz	r1, 8003d16 <__swsetup_r+0x6a>
 8003d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d08:	4299      	cmp	r1, r3
 8003d0a:	d002      	beq.n	8003d12 <__swsetup_r+0x66>
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	f7ff fac1 	bl	8003294 <_free_r>
 8003d12:	2300      	movs	r3, #0
 8003d14:	6363      	str	r3, [r4, #52]	; 0x34
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d1c:	81a3      	strh	r3, [r4, #12]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	6923      	ldr	r3, [r4, #16]
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	f043 0308 	orr.w	r3, r3, #8
 8003d2c:	81a3      	strh	r3, [r4, #12]
 8003d2e:	6923      	ldr	r3, [r4, #16]
 8003d30:	b94b      	cbnz	r3, 8003d46 <__swsetup_r+0x9a>
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3c:	d003      	beq.n	8003d46 <__swsetup_r+0x9a>
 8003d3e:	4621      	mov	r1, r4
 8003d40:	4630      	mov	r0, r6
 8003d42:	f000 f917 	bl	8003f74 <__smakebuf_r>
 8003d46:	89a2      	ldrh	r2, [r4, #12]
 8003d48:	f012 0301 	ands.w	r3, r2, #1
 8003d4c:	d00c      	beq.n	8003d68 <__swsetup_r+0xbc>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60a3      	str	r3, [r4, #8]
 8003d52:	6963      	ldr	r3, [r4, #20]
 8003d54:	425b      	negs	r3, r3
 8003d56:	61a3      	str	r3, [r4, #24]
 8003d58:	6923      	ldr	r3, [r4, #16]
 8003d5a:	b953      	cbnz	r3, 8003d72 <__swsetup_r+0xc6>
 8003d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d60:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003d64:	d1ba      	bne.n	8003cdc <__swsetup_r+0x30>
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	0792      	lsls	r2, r2, #30
 8003d6a:	bf58      	it	pl
 8003d6c:	6963      	ldrpl	r3, [r4, #20]
 8003d6e:	60a3      	str	r3, [r4, #8]
 8003d70:	e7f2      	b.n	8003d58 <__swsetup_r+0xac>
 8003d72:	2000      	movs	r0, #0
 8003d74:	e7f7      	b.n	8003d66 <__swsetup_r+0xba>
 8003d76:	bf00      	nop
 8003d78:	2000000c 	.word	0x2000000c
 8003d7c:	080040d4 	.word	0x080040d4
 8003d80:	080040f4 	.word	0x080040f4
 8003d84:	080040b4 	.word	0x080040b4

08003d88 <_close_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4c06      	ldr	r4, [pc, #24]	; (8003da4 <_close_r+0x1c>)
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4605      	mov	r5, r0
 8003d90:	4608      	mov	r0, r1
 8003d92:	6023      	str	r3, [r4, #0]
 8003d94:	f7fc ffbb 	bl	8000d0e <_close>
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	d102      	bne.n	8003da2 <_close_r+0x1a>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	b103      	cbz	r3, 8003da2 <_close_r+0x1a>
 8003da0:	602b      	str	r3, [r5, #0]
 8003da2:	bd38      	pop	{r3, r4, r5, pc}
 8003da4:	200001c0 	.word	0x200001c0

08003da8 <__sflush_r>:
 8003da8:	898a      	ldrh	r2, [r1, #12]
 8003daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dae:	4605      	mov	r5, r0
 8003db0:	0710      	lsls	r0, r2, #28
 8003db2:	460c      	mov	r4, r1
 8003db4:	d458      	bmi.n	8003e68 <__sflush_r+0xc0>
 8003db6:	684b      	ldr	r3, [r1, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	dc05      	bgt.n	8003dc8 <__sflush_r+0x20>
 8003dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	dc02      	bgt.n	8003dc8 <__sflush_r+0x20>
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dca:	2e00      	cmp	r6, #0
 8003dcc:	d0f9      	beq.n	8003dc2 <__sflush_r+0x1a>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003dd4:	682f      	ldr	r7, [r5, #0]
 8003dd6:	6a21      	ldr	r1, [r4, #32]
 8003dd8:	602b      	str	r3, [r5, #0]
 8003dda:	d032      	beq.n	8003e42 <__sflush_r+0x9a>
 8003ddc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	075a      	lsls	r2, r3, #29
 8003de2:	d505      	bpl.n	8003df0 <__sflush_r+0x48>
 8003de4:	6863      	ldr	r3, [r4, #4]
 8003de6:	1ac0      	subs	r0, r0, r3
 8003de8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dea:	b10b      	cbz	r3, 8003df0 <__sflush_r+0x48>
 8003dec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dee:	1ac0      	subs	r0, r0, r3
 8003df0:	2300      	movs	r3, #0
 8003df2:	4602      	mov	r2, r0
 8003df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003df6:	6a21      	ldr	r1, [r4, #32]
 8003df8:	4628      	mov	r0, r5
 8003dfa:	47b0      	blx	r6
 8003dfc:	1c43      	adds	r3, r0, #1
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	d106      	bne.n	8003e10 <__sflush_r+0x68>
 8003e02:	6829      	ldr	r1, [r5, #0]
 8003e04:	291d      	cmp	r1, #29
 8003e06:	d848      	bhi.n	8003e9a <__sflush_r+0xf2>
 8003e08:	4a29      	ldr	r2, [pc, #164]	; (8003eb0 <__sflush_r+0x108>)
 8003e0a:	40ca      	lsrs	r2, r1
 8003e0c:	07d6      	lsls	r6, r2, #31
 8003e0e:	d544      	bpl.n	8003e9a <__sflush_r+0xf2>
 8003e10:	2200      	movs	r2, #0
 8003e12:	6062      	str	r2, [r4, #4]
 8003e14:	04d9      	lsls	r1, r3, #19
 8003e16:	6922      	ldr	r2, [r4, #16]
 8003e18:	6022      	str	r2, [r4, #0]
 8003e1a:	d504      	bpl.n	8003e26 <__sflush_r+0x7e>
 8003e1c:	1c42      	adds	r2, r0, #1
 8003e1e:	d101      	bne.n	8003e24 <__sflush_r+0x7c>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	b903      	cbnz	r3, 8003e26 <__sflush_r+0x7e>
 8003e24:	6560      	str	r0, [r4, #84]	; 0x54
 8003e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e28:	602f      	str	r7, [r5, #0]
 8003e2a:	2900      	cmp	r1, #0
 8003e2c:	d0c9      	beq.n	8003dc2 <__sflush_r+0x1a>
 8003e2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e32:	4299      	cmp	r1, r3
 8003e34:	d002      	beq.n	8003e3c <__sflush_r+0x94>
 8003e36:	4628      	mov	r0, r5
 8003e38:	f7ff fa2c 	bl	8003294 <_free_r>
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	6360      	str	r0, [r4, #52]	; 0x34
 8003e40:	e7c0      	b.n	8003dc4 <__sflush_r+0x1c>
 8003e42:	2301      	movs	r3, #1
 8003e44:	4628      	mov	r0, r5
 8003e46:	47b0      	blx	r6
 8003e48:	1c41      	adds	r1, r0, #1
 8003e4a:	d1c8      	bne.n	8003dde <__sflush_r+0x36>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0c5      	beq.n	8003dde <__sflush_r+0x36>
 8003e52:	2b1d      	cmp	r3, #29
 8003e54:	d001      	beq.n	8003e5a <__sflush_r+0xb2>
 8003e56:	2b16      	cmp	r3, #22
 8003e58:	d101      	bne.n	8003e5e <__sflush_r+0xb6>
 8003e5a:	602f      	str	r7, [r5, #0]
 8003e5c:	e7b1      	b.n	8003dc2 <__sflush_r+0x1a>
 8003e5e:	89a3      	ldrh	r3, [r4, #12]
 8003e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e64:	81a3      	strh	r3, [r4, #12]
 8003e66:	e7ad      	b.n	8003dc4 <__sflush_r+0x1c>
 8003e68:	690f      	ldr	r7, [r1, #16]
 8003e6a:	2f00      	cmp	r7, #0
 8003e6c:	d0a9      	beq.n	8003dc2 <__sflush_r+0x1a>
 8003e6e:	0793      	lsls	r3, r2, #30
 8003e70:	680e      	ldr	r6, [r1, #0]
 8003e72:	bf08      	it	eq
 8003e74:	694b      	ldreq	r3, [r1, #20]
 8003e76:	600f      	str	r7, [r1, #0]
 8003e78:	bf18      	it	ne
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	eba6 0807 	sub.w	r8, r6, r7
 8003e80:	608b      	str	r3, [r1, #8]
 8003e82:	f1b8 0f00 	cmp.w	r8, #0
 8003e86:	dd9c      	ble.n	8003dc2 <__sflush_r+0x1a>
 8003e88:	4643      	mov	r3, r8
 8003e8a:	463a      	mov	r2, r7
 8003e8c:	6a21      	ldr	r1, [r4, #32]
 8003e8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e90:	4628      	mov	r0, r5
 8003e92:	47b0      	blx	r6
 8003e94:	2800      	cmp	r0, #0
 8003e96:	dc06      	bgt.n	8003ea6 <__sflush_r+0xfe>
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea4:	e78e      	b.n	8003dc4 <__sflush_r+0x1c>
 8003ea6:	4407      	add	r7, r0
 8003ea8:	eba8 0800 	sub.w	r8, r8, r0
 8003eac:	e7e9      	b.n	8003e82 <__sflush_r+0xda>
 8003eae:	bf00      	nop
 8003eb0:	20400001 	.word	0x20400001

08003eb4 <_fflush_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	690b      	ldr	r3, [r1, #16]
 8003eb8:	4605      	mov	r5, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	b1db      	cbz	r3, 8003ef6 <_fflush_r+0x42>
 8003ebe:	b118      	cbz	r0, 8003ec8 <_fflush_r+0x14>
 8003ec0:	6983      	ldr	r3, [r0, #24]
 8003ec2:	b90b      	cbnz	r3, 8003ec8 <_fflush_r+0x14>
 8003ec4:	f7ff faf6 	bl	80034b4 <__sinit>
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <_fflush_r+0x48>)
 8003eca:	429c      	cmp	r4, r3
 8003ecc:	d109      	bne.n	8003ee2 <_fflush_r+0x2e>
 8003ece:	686c      	ldr	r4, [r5, #4]
 8003ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ed4:	b17b      	cbz	r3, 8003ef6 <_fflush_r+0x42>
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4628      	mov	r0, r5
 8003eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ede:	f7ff bf63 	b.w	8003da8 <__sflush_r>
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <_fflush_r+0x4c>)
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	d101      	bne.n	8003eec <_fflush_r+0x38>
 8003ee8:	68ac      	ldr	r4, [r5, #8]
 8003eea:	e7f1      	b.n	8003ed0 <_fflush_r+0x1c>
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <_fflush_r+0x50>)
 8003eee:	429c      	cmp	r4, r3
 8003ef0:	bf08      	it	eq
 8003ef2:	68ec      	ldreq	r4, [r5, #12]
 8003ef4:	e7ec      	b.n	8003ed0 <_fflush_r+0x1c>
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	bd38      	pop	{r3, r4, r5, pc}
 8003efa:	bf00      	nop
 8003efc:	080040d4 	.word	0x080040d4
 8003f00:	080040f4 	.word	0x080040f4
 8003f04:	080040b4 	.word	0x080040b4

08003f08 <_lseek_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	4c07      	ldr	r4, [pc, #28]	; (8003f28 <_lseek_r+0x20>)
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	4608      	mov	r0, r1
 8003f10:	4611      	mov	r1, r2
 8003f12:	2200      	movs	r2, #0
 8003f14:	6022      	str	r2, [r4, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f7fc ff20 	bl	8000d5c <_lseek>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_lseek_r+0x1e>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_lseek_r+0x1e>
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	200001c0 	.word	0x200001c0

08003f2c <__swhatbuf_r>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	460e      	mov	r6, r1
 8003f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f34:	2900      	cmp	r1, #0
 8003f36:	b096      	sub	sp, #88	; 0x58
 8003f38:	4614      	mov	r4, r2
 8003f3a:	461d      	mov	r5, r3
 8003f3c:	da07      	bge.n	8003f4e <__swhatbuf_r+0x22>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	602b      	str	r3, [r5, #0]
 8003f42:	89b3      	ldrh	r3, [r6, #12]
 8003f44:	061a      	lsls	r2, r3, #24
 8003f46:	d410      	bmi.n	8003f6a <__swhatbuf_r+0x3e>
 8003f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f4c:	e00e      	b.n	8003f6c <__swhatbuf_r+0x40>
 8003f4e:	466a      	mov	r2, sp
 8003f50:	f000 f862 	bl	8004018 <_fstat_r>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	dbf2      	blt.n	8003f3e <__swhatbuf_r+0x12>
 8003f58:	9a01      	ldr	r2, [sp, #4]
 8003f5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f62:	425a      	negs	r2, r3
 8003f64:	415a      	adcs	r2, r3
 8003f66:	602a      	str	r2, [r5, #0]
 8003f68:	e7ee      	b.n	8003f48 <__swhatbuf_r+0x1c>
 8003f6a:	2340      	movs	r3, #64	; 0x40
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	b016      	add	sp, #88	; 0x58
 8003f72:	bd70      	pop	{r4, r5, r6, pc}

08003f74 <__smakebuf_r>:
 8003f74:	898b      	ldrh	r3, [r1, #12]
 8003f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f78:	079d      	lsls	r5, r3, #30
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	d507      	bpl.n	8003f90 <__smakebuf_r+0x1c>
 8003f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	6123      	str	r3, [r4, #16]
 8003f88:	2301      	movs	r3, #1
 8003f8a:	6163      	str	r3, [r4, #20]
 8003f8c:	b002      	add	sp, #8
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	ab01      	add	r3, sp, #4
 8003f92:	466a      	mov	r2, sp
 8003f94:	f7ff ffca 	bl	8003f2c <__swhatbuf_r>
 8003f98:	9900      	ldr	r1, [sp, #0]
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	f7ff f9c7 	bl	8003330 <_malloc_r>
 8003fa2:	b948      	cbnz	r0, 8003fb8 <__smakebuf_r+0x44>
 8003fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa8:	059a      	lsls	r2, r3, #22
 8003faa:	d4ef      	bmi.n	8003f8c <__smakebuf_r+0x18>
 8003fac:	f023 0303 	bic.w	r3, r3, #3
 8003fb0:	f043 0302 	orr.w	r3, r3, #2
 8003fb4:	81a3      	strh	r3, [r4, #12]
 8003fb6:	e7e3      	b.n	8003f80 <__smakebuf_r+0xc>
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <__smakebuf_r+0x7c>)
 8003fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	6020      	str	r0, [r4, #0]
 8003fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc4:	81a3      	strh	r3, [r4, #12]
 8003fc6:	9b00      	ldr	r3, [sp, #0]
 8003fc8:	6163      	str	r3, [r4, #20]
 8003fca:	9b01      	ldr	r3, [sp, #4]
 8003fcc:	6120      	str	r0, [r4, #16]
 8003fce:	b15b      	cbz	r3, 8003fe8 <__smakebuf_r+0x74>
 8003fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f000 f831 	bl	800403c <_isatty_r>
 8003fda:	b128      	cbz	r0, 8003fe8 <__smakebuf_r+0x74>
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	f023 0303 	bic.w	r3, r3, #3
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	431d      	orrs	r5, r3
 8003fec:	81a5      	strh	r5, [r4, #12]
 8003fee:	e7cd      	b.n	8003f8c <__smakebuf_r+0x18>
 8003ff0:	0800347d 	.word	0x0800347d

08003ff4 <_read_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4c07      	ldr	r4, [pc, #28]	; (8004014 <_read_r+0x20>)
 8003ff8:	4605      	mov	r5, r0
 8003ffa:	4608      	mov	r0, r1
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	2200      	movs	r2, #0
 8004000:	6022      	str	r2, [r4, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	f7fc fe4a 	bl	8000c9c <_read>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d102      	bne.n	8004012 <_read_r+0x1e>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	b103      	cbz	r3, 8004012 <_read_r+0x1e>
 8004010:	602b      	str	r3, [r5, #0]
 8004012:	bd38      	pop	{r3, r4, r5, pc}
 8004014:	200001c0 	.word	0x200001c0

08004018 <_fstat_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4c07      	ldr	r4, [pc, #28]	; (8004038 <_fstat_r+0x20>)
 800401c:	2300      	movs	r3, #0
 800401e:	4605      	mov	r5, r0
 8004020:	4608      	mov	r0, r1
 8004022:	4611      	mov	r1, r2
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	f7fc fe7e 	bl	8000d26 <_fstat>
 800402a:	1c43      	adds	r3, r0, #1
 800402c:	d102      	bne.n	8004034 <_fstat_r+0x1c>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	b103      	cbz	r3, 8004034 <_fstat_r+0x1c>
 8004032:	602b      	str	r3, [r5, #0]
 8004034:	bd38      	pop	{r3, r4, r5, pc}
 8004036:	bf00      	nop
 8004038:	200001c0 	.word	0x200001c0

0800403c <_isatty_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4c06      	ldr	r4, [pc, #24]	; (8004058 <_isatty_r+0x1c>)
 8004040:	2300      	movs	r3, #0
 8004042:	4605      	mov	r5, r0
 8004044:	4608      	mov	r0, r1
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	f7fc fe7d 	bl	8000d46 <_isatty>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_isatty_r+0x1a>
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	b103      	cbz	r3, 8004056 <_isatty_r+0x1a>
 8004054:	602b      	str	r3, [r5, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	200001c0 	.word	0x200001c0

0800405c <_init>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr

08004068 <_fini>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	bf00      	nop
 800406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406e:	bc08      	pop	{r3}
 8004070:	469e      	mov	lr, r3
 8004072:	4770      	bx	lr
