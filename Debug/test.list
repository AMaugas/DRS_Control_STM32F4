
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a4  080049a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049ac  080049ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08004a24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08004a24  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdba  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021d3  00000000  00000000  0002ce5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  0002f030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  0002f968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c47  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b8f  00000000  00000000  00052dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c94cf  00000000  00000000  0005c94e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125e1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  00125e98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004884 	.word	0x08004884

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004884 	.word	0x08004884

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <initializeServoBus>:
 */

#include "HerkulexServo.h"

HerkulexServoBus *initializeServoBus(UART_HandleTypeDef *HUART_Handler)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    HerkulexServoBus *servoBus = (HerkulexServoBus *)malloc(sizeof(HerkulexServoBus));
 80005b8:	2060      	movs	r0, #96	; 0x60
 80005ba:	f003 fa6f 	bl	8003a9c <malloc>
 80005be:	4603      	mov	r3, r0
 80005c0:	60bb      	str	r3, [r7, #8]

    if (servoBus != NULL)
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d05e      	beq.n	8000686 <initializeServoBus+0xd6>
    {
        servoBus->m_serial = HUART_Handler;
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	73fb      	strb	r3, [r7, #15]
 80005d2:	e007      	b.n	80005e4 <initializeServoBus+0x34>
        {
            servoBus->m_rx_buffer[i] = 0;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	4413      	add	r3, r2
 80005da:	2200      	movs	r2, #0
 80005dc:	711a      	strb	r2, [r3, #4]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	d9f4      	bls.n	80005d4 <initializeServoBus+0x24>
        }
        servoBus->m_last_serial = 0;
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	f04f 0300 	mov.w	r3, #0
 80005f0:	f04f 0400 	mov.w	r4, #0
 80005f4:	e9c2 3404 	strd	r3, r4, [r2, #16]

        servoBus->m_rx_packet.size = 0x00;
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
        servoBus->m_rx_packet.id = 0x00;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2200      	movs	r2, #0
 8000602:	765a      	strb	r2, [r3, #25]
        servoBus->m_rx_packet.cmd = HerkulexCommand_None;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2200      	movs	r2, #0
 8000608:	769a      	strb	r2, [r3, #26]
        servoBus->m_rx_packet.checksum1 = 0x00;
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2200      	movs	r2, #0
 800060e:	76da      	strb	r2, [r3, #27]
        servoBus->m_rx_packet.checksum2 = 0x00;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	2200      	movs	r2, #0
 8000614:	771a      	strb	r2, [r3, #28]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	73bb      	strb	r3, [r7, #14]
 800061a:	e009      	b.n	8000630 <initializeServoBus+0x80>
        {
            *(servoBus->m_rx_packet.data + i) = 0;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	f103 021d 	add.w	r2, r3, #29
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	3301      	adds	r3, #1
 800062e:	73bb      	strb	r3, [r7, #14]
 8000630:	7bbb      	ldrb	r3, [r7, #14]
 8000632:	2b09      	cmp	r3, #9
 8000634:	d9f2      	bls.n	800061c <initializeServoBus+0x6c>
        }

        servoBus->m_rx_packet.status_error = HerkulexStatusError_None;
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        servoBus->m_rx_packet.status_detail = HerkulexStatusDetail_None;
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        servoBus->m_rx_packet.error = HerkulexPacketError_None;
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        servoBus->m_rx_packet_ready = 0;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2200      	movs	r2, #0
 8000652:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        for (uint8_t i = 0; i < HERKULEX_SERIAL_TX_BUFFER; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	737b      	strb	r3, [r7, #13]
 800065a:	e009      	b.n	8000670 <initializeServoBus+0xc0>
        {
            *(servoBus->m_tx_buffer + i) = 0;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 8000662:	7b7b      	ldrb	r3, [r7, #13]
 8000664:	4413      	add	r3, r2
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < HERKULEX_SERIAL_TX_BUFFER; i++)
 800066a:	7b7b      	ldrb	r3, [r7, #13]
 800066c:	3301      	adds	r3, #1
 800066e:	737b      	strb	r3, [r7, #13]
 8000670:	7b7b      	ldrb	r3, [r7, #13]
 8000672:	2b32      	cmp	r3, #50	; 0x32
 8000674:	d9f2      	bls.n	800065c <initializeServoBus+0xac>
        }
        servoBus->m_move_tags = 0;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	2200      	movs	r2, #0
 800067a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        servoBus->m_schedule_state = HerkulexScheduleState_None;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	2200      	movs	r2, #0
 8000682:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    }
    return servoBus;
 8000686:	68bb      	ldr	r3, [r7, #8]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bd90      	pop	{r4, r7, pc}

08000690 <sendPacket>:

void sendPacket(HerkulexServoBus *self, uint8_t id, HerkulexCommand cmd, uint8_t *pData, uint8_t dataLen)
{
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	b08d      	sub	sp, #52	; 0x34
 8000694:	af04      	add	r7, sp, #16
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	460b      	mov	r3, r1
 800069c:	72fb      	strb	r3, [r7, #11]
 800069e:	4613      	mov	r3, r2
 80006a0:	72bb      	strb	r3, [r7, #10]
    uint8_t checksum1;
    uint8_t checksum2;
    uint8_t packetSize = 7 + dataLen;
 80006a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80006a6:	3307      	adds	r3, #7
 80006a8:	773b      	strb	r3, [r7, #28]
    uint8_t packet[7] = {0xFF, 0xFF, packetSize, id, (uint8_t)cmd, 0x00, 0x00};
 80006aa:	23ff      	movs	r3, #255	; 0xff
 80006ac:	753b      	strb	r3, [r7, #20]
 80006ae:	23ff      	movs	r3, #255	; 0xff
 80006b0:	757b      	strb	r3, [r7, #21]
 80006b2:	7f3b      	ldrb	r3, [r7, #28]
 80006b4:	75bb      	strb	r3, [r7, #22]
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	75fb      	strb	r3, [r7, #23]
 80006ba:	7abb      	ldrb	r3, [r7, #10]
 80006bc:	763b      	strb	r3, [r7, #24]
 80006be:	2300      	movs	r3, #0
 80006c0:	767b      	strb	r3, [r7, #25]
 80006c2:	2300      	movs	r3, #0
 80006c4:	76bb      	strb	r3, [r7, #26]
    /* uint8_t packet[packetSize]; */

    packet[0] = 0xFF;
 80006c6:	23ff      	movs	r3, #255	; 0xff
 80006c8:	753b      	strb	r3, [r7, #20]
    packet[1] = 0xFF;
 80006ca:	23ff      	movs	r3, #255	; 0xff
 80006cc:	757b      	strb	r3, [r7, #21]
    packet[2] = packetSize;
 80006ce:	7f3b      	ldrb	r3, [r7, #28]
 80006d0:	75bb      	strb	r3, [r7, #22]
    packet[3] = id;
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	75fb      	strb	r3, [r7, #23]
    packet[4] = (uint8_t)cmd;
 80006d6:	7abb      	ldrb	r3, [r7, #10]
 80006d8:	763b      	strb	r3, [r7, #24]

    checksum1 = packetSize ^ id ^ (uint8_t)cmd;
 80006da:	7f3a      	ldrb	r2, [r7, #28]
 80006dc:	7afb      	ldrb	r3, [r7, #11]
 80006de:	4053      	eors	r3, r2
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	7abb      	ldrb	r3, [r7, #10]
 80006e4:	4053      	eors	r3, r2
 80006e6:	77fb      	strb	r3, [r7, #31]

    if (pData && dataLen > 0)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d015      	beq.n	800071a <sendPacket+0x8a>
 80006ee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d011      	beq.n	800071a <sendPacket+0x8a>
    {
        for (uint8_t i = 0; i < dataLen; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	77bb      	strb	r3, [r7, #30]
 80006fa:	e009      	b.n	8000710 <sendPacket+0x80>
        {
            checksum1 ^= *(pData + i);
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	781a      	ldrb	r2, [r3, #0]
 8000704:	7ffb      	ldrb	r3, [r7, #31]
 8000706:	4053      	eors	r3, r2
 8000708:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < dataLen; i++)
 800070a:	7fbb      	ldrb	r3, [r7, #30]
 800070c:	3301      	adds	r3, #1
 800070e:	77bb      	strb	r3, [r7, #30]
 8000710:	7fba      	ldrb	r2, [r7, #30]
 8000712:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000716:	429a      	cmp	r2, r3
 8000718:	d3f0      	bcc.n	80006fc <sendPacket+0x6c>
            /* packet[7 + i] = *(pData + i); */
        }
    }

    checksum1 = checksum1 & 0xFE;
 800071a:	7ffb      	ldrb	r3, [r7, #31]
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	77fb      	strb	r3, [r7, #31]
    checksum2 = (~checksum1) & 0xFE;
 8000722:	7ffb      	ldrb	r3, [r7, #31]
 8000724:	43db      	mvns	r3, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f023 0301 	bic.w	r3, r3, #1
 800072c:	76fb      	strb	r3, [r7, #27]

    packet[5] = checksum1;
 800072e:	7ffb      	ldrb	r3, [r7, #31]
 8000730:	767b      	strb	r3, [r7, #25]
    packet[6] = checksum2;
 8000732:	7efb      	ldrb	r3, [r7, #27]
 8000734:	76bb      	strb	r3, [r7, #26]


    HAL_UART_Transmit(self->m_serial, packet, 7, 10);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	f107 0114 	add.w	r1, r7, #20
 800073e:	230a      	movs	r3, #10
 8000740:	2207      	movs	r2, #7
 8000742:	f002 fc62 	bl	800300a <HAL_UART_Transmit>
    printf("Data transmitted: 0x%.2X 0x%.2X 0x%.2X 0x%.2X 0x%.2X 0x%.2X 0x%.2X", packet[0], packet[1], packet[2], packet[3], packet[4], packet[5], packet[6]);
 8000746:	7d3b      	ldrb	r3, [r7, #20]
 8000748:	461c      	mov	r4, r3
 800074a:	7d7b      	ldrb	r3, [r7, #21]
 800074c:	461d      	mov	r5, r3
 800074e:	7dbb      	ldrb	r3, [r7, #22]
 8000750:	461e      	mov	r6, r3
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	7e3a      	ldrb	r2, [r7, #24]
 8000756:	7e79      	ldrb	r1, [r7, #25]
 8000758:	7eb8      	ldrb	r0, [r7, #26]
 800075a:	9003      	str	r0, [sp, #12]
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	4633      	mov	r3, r6
 8000764:	462a      	mov	r2, r5
 8000766:	4621      	mov	r1, r4
 8000768:	4816      	ldr	r0, [pc, #88]	; (80007c4 <sendPacket+0x134>)
 800076a:	f003 fa4f 	bl	8003c0c <iprintf>

    if (pData && dataLen > 0)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d01f      	beq.n	80007b4 <sendPacket+0x124>
 8000774:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000778:	2b00      	cmp	r3, #0
 800077a:	d01b      	beq.n	80007b4 <sendPacket+0x124>
    {
        HAL_UART_Transmit(self->m_serial, pData, dataLen, 10);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000784:	b29a      	uxth	r2, r3
 8000786:	230a      	movs	r3, #10
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	f002 fc3e 	bl	800300a <HAL_UART_Transmit>
        for (uint8_t i = 0; i < dataLen; i++)
 800078e:	2300      	movs	r3, #0
 8000790:	777b      	strb	r3, [r7, #29]
 8000792:	e00a      	b.n	80007aa <sendPacket+0x11a>
        {
            printf(" 0x%.2X", *(pData + i));
 8000794:	7f7b      	ldrb	r3, [r7, #29]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <sendPacket+0x138>)
 80007a0:	f003 fa34 	bl	8003c0c <iprintf>
        for (uint8_t i = 0; i < dataLen; i++)
 80007a4:	7f7b      	ldrb	r3, [r7, #29]
 80007a6:	3301      	adds	r3, #1
 80007a8:	777b      	strb	r3, [r7, #29]
 80007aa:	7f7a      	ldrb	r2, [r7, #29]
 80007ac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d3ef      	bcc.n	8000794 <sendPacket+0x104>
        }
    }

    printf("\n\r");
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <sendPacket+0x13c>)
 80007b6:	f003 fa29 	bl	8003c0c <iprintf>
//    for (uint8_t i = 0; i < packetSize; i++)
//    {
//        printf("0x%.2X ", packet[i]);
//    }
//    printf("\n\r");
}
 80007ba:	bf00      	nop
 80007bc:	3724      	adds	r7, #36	; 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c2:	bf00      	nop
 80007c4:	0800489c 	.word	0x0800489c
 80007c8:	080048e0 	.word	0x080048e0
 80007cc:	080048e8 	.word	0x080048e8

080007d0 <prepareSynchronizedMove>:
    self->m_schedule_state = HerkulexScheduleState_IndividualMove;
    self->m_move_tags = 0;
}

void prepareSynchronizedMove(HerkulexServoBus *self, uint8_t playtime)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
    self->m_schedule_state = HerkulexScheduleState_SynchronizedMove;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2202      	movs	r2, #2
 80007e0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    *(self->m_tx_buffer + 0) = playtime;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	78fa      	ldrb	r2, [r7, #3]
 80007e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    self->m_move_tags = 0;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <executeMove>:

void executeMove(HerkulexServoBus *self)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af02      	add	r7, sp, #8
 8000806:	6078      	str	r0, [r7, #4]
    uint8_t dataLen;

    switch (self->m_schedule_state)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800080e:	2b01      	cmp	r3, #1
 8000810:	d003      	beq.n	800081a <executeMove+0x1a>
 8000812:	2b02      	cmp	r3, #2
 8000814:	d014      	beq.n	8000840 <executeMove+0x40>
 8000816:	2b00      	cmp	r3, #0
        dataLen = 1 + self->m_move_tags * 4;
        sendPacket(self, HERKULEX_BROADCAST_ID, HerkulexCommand_SJog, self->m_tx_buffer, dataLen);
        break;

    case HerkulexScheduleState_None:
        break;
 8000818:	e025      	b.n	8000866 <executeMove+0x66>
        dataLen = self->m_move_tags * 5;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000820:	461a      	mov	r2, r3
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	4413      	add	r3, r2
 8000826:	73fb      	strb	r3, [r7, #15]
        sendPacket(self, HERKULEX_BROADCAST_ID, HerkulexCommand_IJog, self->m_tx_buffer, dataLen);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	4613      	mov	r3, r2
 8000834:	2205      	movs	r2, #5
 8000836:	21fe      	movs	r1, #254	; 0xfe
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff29 	bl	8000690 <sendPacket>
        break;
 800083e:	e012      	b.n	8000866 <executeMove+0x66>
        dataLen = 1 + self->m_move_tags * 4;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	3301      	adds	r3, #1
 800084c:	73fb      	strb	r3, [r7, #15]
        sendPacket(self, HERKULEX_BROADCAST_ID, HerkulexCommand_SJog, self->m_tx_buffer, dataLen);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4613      	mov	r3, r2
 800085a:	2206      	movs	r2, #6
 800085c:	21fe      	movs	r1, #254	; 0xfe
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ff16 	bl	8000690 <sendPacket>
        break;
 8000864:	bf00      	nop
    }

    self->m_schedule_state = HerkulexScheduleState_None;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    self->m_move_tags = 0;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <initializeServo>:

HerkulexPacket m_response = {0, 0, HerkulexCommand_None, 0, 0, {0}, HerkulexStatusError_None, HerkulexStatusDetail_None, HerkulexPacketError_None};
uint8_t tx_buffer[5] = {0, 0, 0, 0, 0};

HerkulexServo *initializeServo(HerkulexServoBus *servoBus, uint8_t id)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
    HerkulexServo *servo = (HerkulexServo *)malloc(sizeof(HerkulexServo));
 800088c:	2010      	movs	r0, #16
 800088e:	f003 f905 	bl	8003a9c <malloc>
 8000892:	4603      	mov	r3, r0
 8000894:	60fb      	str	r3, [r7, #12]

    if (servo != NULL)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d011      	beq.n	80008c0 <initializeServo+0x40>
    {
        servo->m_bus = servoBus;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
        servo->m_id = id;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	78fa      	ldrb	r2, [r7, #3]
 80008a6:	711a      	strb	r2, [r3, #4]
        servo->m_led = HerkulexLed_Off;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2200      	movs	r2, #0
 80008ac:	715a      	strb	r2, [r3, #5]
        servo->m_position_control_mode = 1;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2201      	movs	r2, #1
 80008b2:	719a      	strb	r2, [r3, #6]
        servo->m_response = &m_response;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <initializeServo+0x4c>)
 80008b8:	609a      	str	r2, [r3, #8]
        servo->m_tx_buffer = tx_buffer;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <initializeServo+0x50>)
 80008be:	60da      	str	r2, [r3, #12]
    }

    return servo;
 80008c0:	68fb      	ldr	r3, [r7, #12]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000008c 	.word	0x2000008c
 80008d0:	200000a0 	.word	0x200000a0

080008d4 <jog>:

void jog(HerkulexServo *servo, uint8_t jog_lsb, uint8_t jog_msb, uint8_t set, uint8_t playtime)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af02      	add	r7, sp, #8
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	4608      	mov	r0, r1
 80008de:	4611      	mov	r1, r2
 80008e0:	461a      	mov	r2, r3
 80008e2:	4603      	mov	r3, r0
 80008e4:	70fb      	strb	r3, [r7, #3]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70bb      	strb	r3, [r7, #2]
 80008ea:	4613      	mov	r3, r2
 80008ec:	707b      	strb	r3, [r7, #1]
    uint8_t idx_offset;

    switch (servo->m_bus->m_schedule_state)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d029      	beq.n	800094e <jog+0x7a>
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d06f      	beq.n	80009de <jog+0x10a>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d000      	beq.n	8000904 <jog+0x30>
        servo->m_bus->m_tx_buffer[idx_offset + 3] = servo->m_id;

        servo->m_bus->m_move_tags++;
        break;
    default:
        break;
 8000902:	e0aa      	b.n	8000a5a <jog+0x186>
        *(servo->m_tx_buffer + 0) = jog_lsb;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	78fa      	ldrb	r2, [r7, #3]
 800090a:	701a      	strb	r2, [r3, #0]
        *(servo->m_tx_buffer + 1) = jog_msb;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	3301      	adds	r3, #1
 8000912:	78ba      	ldrb	r2, [r7, #2]
 8000914:	701a      	strb	r2, [r3, #0]
        *(servo->m_tx_buffer + 2) = set;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	3302      	adds	r3, #2
 800091c:	787a      	ldrb	r2, [r7, #1]
 800091e:	701a      	strb	r2, [r3, #0]
        *(servo->m_tx_buffer + 3) = servo->m_id;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	3303      	adds	r3, #3
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	7912      	ldrb	r2, [r2, #4]
 800092a:	701a      	strb	r2, [r3, #0]
        *(servo->m_tx_buffer + 4) = playtime;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	3304      	adds	r3, #4
 8000932:	7e3a      	ldrb	r2, [r7, #24]
 8000934:	701a      	strb	r2, [r3, #0]
        sendPacket(servo->m_bus, HERKULEX_BROADCAST_ID, HerkulexCommand_IJog, servo->m_tx_buffer, 5);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68da      	ldr	r2, [r3, #12]
 800093e:	2305      	movs	r3, #5
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	4613      	mov	r3, r2
 8000944:	2205      	movs	r2, #5
 8000946:	21fe      	movs	r1, #254	; 0xfe
 8000948:	f7ff fea2 	bl	8000690 <sendPacket>
        break;
 800094c:	e085      	b.n	8000a5a <jog+0x186>
        if (((servo->m_bus->m_move_tags + 1) * 5) > HERKULEX_SERIAL_TX_BUFFER)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	4613      	mov	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	2b33      	cmp	r3, #51	; 0x33
 8000960:	dc78      	bgt.n	8000a54 <jog+0x180>
        idx_offset = servo->m_bus->m_move_tags * 5; /* 5 bytes per tag */
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800096a:	461a      	mov	r2, r3
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	4413      	add	r3, r2
 8000970:	73fb      	strb	r3, [r7, #15]
        *(servo->m_bus->m_tx_buffer + idx_offset) = jog_lsb;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	4413      	add	r3, r2
 800097e:	78fa      	ldrb	r2, [r7, #3]
 8000980:	701a      	strb	r2, [r3, #0]
        *(servo->m_bus->m_tx_buffer + idx_offset + 1) = jog_msb;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	3301      	adds	r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	78ba      	ldrb	r2, [r7, #2]
 8000992:	701a      	strb	r2, [r3, #0]
        *(servo->m_bus->m_tx_buffer + idx_offset + 2) = set;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	3302      	adds	r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	787a      	ldrb	r2, [r7, #1]
 80009a4:	701a      	strb	r2, [r3, #0]
        *(servo->m_bus->m_tx_buffer + idx_offset + 3) = servo->m_id;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	3303      	adds	r3, #3
 80009b2:	4413      	add	r3, r2
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	7912      	ldrb	r2, [r2, #4]
 80009b8:	701a      	strb	r2, [r3, #0]
        *(servo->m_bus->m_tx_buffer + idx_offset + 4) = playtime;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	3304      	adds	r3, #4
 80009c6:	4413      	add	r3, r2
 80009c8:	7e3a      	ldrb	r2, [r7, #24]
 80009ca:	701a      	strb	r2, [r3, #0]
        servo->m_bus->m_move_tags++;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 80009d4:	3201      	adds	r2, #1
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        break;
 80009dc:	e03d      	b.n	8000a5a <jog+0x186>
        if ((1 + (servo->m_bus->m_move_tags + 1) * 4) > HERKULEX_SERIAL_TX_BUFFER)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80009e6:	3301      	adds	r3, #1
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	3301      	adds	r3, #1
 80009ec:	2b33      	cmp	r3, #51	; 0x33
 80009ee:	dc33      	bgt.n	8000a58 <jog+0x184>
        idx_offset = 1 + servo->m_bus->m_move_tags * 4; /* 4 bytes per tag, 1 byte offset for time */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	3301      	adds	r3, #1
 80009fe:	73fb      	strb	r3, [r7, #15]
        servo->m_bus->m_tx_buffer[idx_offset] = jog_lsb;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	4413      	add	r3, r2
 8000a08:	78fa      	ldrb	r2, [r7, #3]
 8000a0a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        servo->m_bus->m_tx_buffer[idx_offset + 1] = jog_msb;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	78ba      	ldrb	r2, [r7, #2]
 8000a1a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        servo->m_bus->m_tx_buffer[idx_offset + 2] = set;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	3302      	adds	r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	787a      	ldrb	r2, [r7, #1]
 8000a2a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        servo->m_bus->m_tx_buffer[idx_offset + 3] = servo->m_id;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	3303      	adds	r3, #3
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	7909      	ldrb	r1, [r1, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        servo->m_bus->m_move_tags++;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8000a4a:	3201      	adds	r2, #1
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        break;
 8000a52:	e002      	b.n	8000a5a <jog+0x186>
            return; /* No room for another move tag, exit */
 8000a54:	bf00      	nop
 8000a56:	e000      	b.n	8000a5a <jog+0x186>
            return; /* No room for another move tag, exit */
 8000a58:	bf00      	nop
    }
}
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <setPosition>:

void setPosition(HerkulexServo *servo, uint16_t pos, uint8_t playtime, HerkulexLed led)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	4608      	mov	r0, r1
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4603      	mov	r3, r0
 8000a70:	807b      	strh	r3, [r7, #2]
 8000a72:	460b      	mov	r3, r1
 8000a74:	707b      	strb	r3, [r7, #1]
 8000a76:	4613      	mov	r3, r2
 8000a78:	703b      	strb	r3, [r7, #0]
    if (!servo->m_position_control_mode)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	799b      	ldrb	r3, [r3, #6]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d01d      	beq.n	8000abe <setPosition+0x5e>

    uint8_t jog_lsb;
    uint8_t jog_msb;
    uint8_t set;

    jog_lsb = (uint8_t)pos;
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	73bb      	strb	r3, [r7, #14]
    jog_msb = (uint8_t)(pos >> 8);
 8000a86:	887b      	ldrh	r3, [r7, #2]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	737b      	strb	r3, [r7, #13]

    if (led != HerkulexLed_Ignore)
 8000a8e:	783b      	ldrb	r3, [r7, #0]
 8000a90:	2bff      	cmp	r3, #255	; 0xff
 8000a92:	d006      	beq.n	8000aa2 <setPosition+0x42>
    {
        servo->m_led = led;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	783a      	ldrb	r2, [r7, #0]
 8000a98:	715a      	strb	r2, [r3, #5]
        set = (uint8_t)(led << 2);
 8000a9a:	783b      	ldrb	r3, [r7, #0]
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e003      	b.n	8000aaa <setPosition+0x4a>
    }
    else
    {
        set = (uint8_t)(servo->m_led << 2);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	795b      	ldrb	r3, [r3, #5]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	73fb      	strb	r3, [r7, #15]
    }

    jog(servo, jog_lsb, jog_msb, set, playtime);
 8000aaa:	7bf8      	ldrb	r0, [r7, #15]
 8000aac:	7b7a      	ldrb	r2, [r7, #13]
 8000aae:	7bb9      	ldrb	r1, [r7, #14]
 8000ab0:	787b      	ldrb	r3, [r7, #1]
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ff0c 	bl	80008d4 <jog>
 8000abc:	e000      	b.n	8000ac0 <setPosition+0x60>
        return;
 8000abe:	bf00      	nop
}
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <setTorqueOn>:

    jog(servo, jog_lsb, jog_msb, set, playtime);
}

void setTorqueOn(HerkulexServo *servo)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
    writeRam(servo, HerkulexRamRegister_TorqueControl, 0x60);
 8000ace:	2260      	movs	r2, #96	; 0x60
 8000ad0:	2134      	movs	r1, #52	; 0x34
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f828 	bl	8000b28 <writeRam>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <setTorqueOff>:

void setTorqueOff(HerkulexServo *servo)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    writeRam(servo, HerkulexRamRegister_TorqueControl, 0x00);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2134      	movs	r1, #52	; 0x34
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 f81b 	bl	8000b28 <writeRam>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <setLedColor>:
{
    writeRam(servo, HerkulexRamRegister_TorqueControl, 0x40);
}

void setLedColor(HerkulexServo *servo, HerkulexLed color)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	70fb      	strb	r3, [r7, #3]
    if (color == HerkulexLed_Ignore)
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	2bff      	cmp	r3, #255	; 0xff
 8000b0a:	d009      	beq.n	8000b20 <setLedColor+0x26>
    {
        return;
    }

    servo->m_led = color;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	78fa      	ldrb	r2, [r7, #3]
 8000b10:	715a      	strb	r2, [r3, #5]
    writeRam(servo, HerkulexRamRegister_LedControl, (uint8_t)color);
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	461a      	mov	r2, r3
 8000b16:	2135      	movs	r1, #53	; 0x35
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f805 	bl	8000b28 <writeRam>
 8000b1e:	e000      	b.n	8000b22 <setLedColor+0x28>
        return;
 8000b20:	bf00      	nop
}
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <writeRam>:
void writeRam(HerkulexServo *servo, HerkulexRamRegister reg, uint8_t val)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
 8000b34:	4613      	mov	r3, r2
 8000b36:	70bb      	strb	r3, [r7, #2]
    *(servo->m_tx_buffer + 0) = (uint8_t)reg;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	78fa      	ldrb	r2, [r7, #3]
 8000b3e:	701a      	strb	r2, [r3, #0]
    *(servo->m_tx_buffer + 1) = 1;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	3301      	adds	r3, #1
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
    *(servo->m_tx_buffer + 2) = val;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	3302      	adds	r3, #2
 8000b50:	78ba      	ldrb	r2, [r7, #2]
 8000b52:	701a      	strb	r2, [r3, #0]

    sendPacket(servo->m_bus, servo->m_id, HerkulexCommand_RamWrite, servo->m_tx_buffer, 3);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7919      	ldrb	r1, [r3, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	2303      	movs	r3, #3
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	4613      	mov	r3, r2
 8000b66:	2203      	movs	r2, #3
 8000b68:	f7ff fd92 	bl	8000690 <sendPacket>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_DMA_Init+0x3c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <MX_DMA_Init+0x3c>)
 8000b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_DMA_Init+0x3c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200b      	movs	r0, #11
 8000b9c:	f001 f821 	bl	8001be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ba0:	200b      	movs	r0, #11
 8000ba2:	f001 f83a 	bl	8001c1a <HAL_NVIC_EnableIRQ>

}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	4816      	ldr	r0, [pc, #88]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c24:	f001 fcb0 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_GPIO_Init+0xcc>)
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_GPIO_Init+0xd0>)
 8000c3e:	f001 fb11 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000c42:	2320      	movs	r3, #32
 8000c44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c5a:	f001 fb03 	bl	8002264 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2028      	movs	r0, #40	; 0x28
 8000c64:	f000 ffbd 	bl	8001be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c68:	2028      	movs	r0, #40	; 0x28
 8000c6a:	f000 ffd6 	bl	8001c1a <HAL_NVIC_EnableIRQ>

}
 8000c6e:	bf00      	nop
 8000c70:	3720      	adds	r7, #32
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	10210000 	.word	0x10210000
 8000c84:	40020800 	.word	0x40020800

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b092      	sub	sp, #72	; 0x48
 8000c8c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c8e:	f000 fe39 	bl	8001904 <HAL_Init>

	/* USER CODE BEGIN Init */
	buttonPressed = 0;
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <main+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
	receivedUART = 0;
 8000c98:	4b3b      	ldr	r3, [pc, #236]	; (8000d88 <main+0x100>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
	passed = 0;
 8000c9e:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <main+0x104>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]

	HerkulexServoBus *herkulexBus = initializeServoBus(&huart5);
 8000ca4:	483a      	ldr	r0, [pc, #232]	; (8000d90 <main+0x108>)
 8000ca6:	f7ff fc83 	bl	80005b0 <initializeServoBus>
 8000caa:	6438      	str	r0, [r7, #64]	; 0x40
	HerkulexServo *servo_chevilleDroite = initializeServo(herkulexBus, 0xDA);
 8000cac:	21da      	movs	r1, #218	; 0xda
 8000cae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000cb0:	f7ff fde6 	bl	8000880 <initializeServo>
 8000cb4:	63f8      	str	r0, [r7, #60]	; 0x3c
	HerkulexServo *servo_genouDroit = initializeServo(herkulexBus, 0xDC);
 8000cb6:	21dc      	movs	r1, #220	; 0xdc
 8000cb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000cba:	f7ff fde1 	bl	8000880 <initializeServo>
 8000cbe:	63b8      	str	r0, [r7, #56]	; 0x38
	HerkulexServo *servo_hancheDroite = initializeServo(herkulexBus, 0xDB);
 8000cc0:	21db      	movs	r1, #219	; 0xdb
 8000cc2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000cc4:	f7ff fddc 	bl	8000880 <initializeServo>
 8000cc8:	6378      	str	r0, [r7, #52]	; 0x34
	HerkulexServo *servo_bassinDroit = initializeServo(herkulexBus, 0xCB);
 8000cca:	21cb      	movs	r1, #203	; 0xcb
 8000ccc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000cce:	f7ff fdd7 	bl	8000880 <initializeServo>
 8000cd2:	6338      	str	r0, [r7, #48]	; 0x30
	HerkulexServo *servo_bassinGauche = initializeServo(herkulexBus, 0xBB);
 8000cd4:	21bb      	movs	r1, #187	; 0xbb
 8000cd6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000cd8:	f7ff fdd2 	bl	8000880 <initializeServo>
 8000cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
	HerkulexServo *servo_hancheGauche = initializeServo(herkulexBus, 0xDD);
 8000cde:	21dd      	movs	r1, #221	; 0xdd
 8000ce0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000ce2:	f7ff fdcd 	bl	8000880 <initializeServo>
 8000ce6:	62b8      	str	r0, [r7, #40]	; 0x28
	HerkulexServo *servo_genouGauche = initializeServo(herkulexBus, 0xCA);
 8000ce8:	21ca      	movs	r1, #202	; 0xca
 8000cea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000cec:	f7ff fdc8 	bl	8000880 <initializeServo>
 8000cf0:	6278      	str	r0, [r7, #36]	; 0x24
	HerkulexServo *servo_chevilleGauche = initializeServo(herkulexBus, 0xCC);
 8000cf2:	21cc      	movs	r1, #204	; 0xcc
 8000cf4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000cf6:	f7ff fdc3 	bl	8000880 <initializeServo>
 8000cfa:	6238      	str	r0, [r7, #32]

	HerkulexServo *articulations[8] = {servo_chevilleDroite, servo_genouDroit, servo_hancheDroite, servo_bassinDroit, servo_bassinGauche, servo_hancheGauche, servo_genouGauche, servo_chevilleGauche};
 8000cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	61fb      	str	r3, [r7, #28]
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d1c:	f000 f83a 	bl	8000d94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d20:	f7ff ff48 	bl	8000bb4 <MX_GPIO_Init>
	MX_UART5_Init();
 8000d24:	f000 fc96 	bl	8001654 <MX_UART5_Init>
	MX_USART2_UART_Init();
 8000d28:	f000 fcbe 	bl	80016a8 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8000d2c:	f7ff ff22 	bl	8000b74 <MX_DMA_Init>
	/* USER CODE BEGIN 2 */
	for (uint8_t i = 0; i < 8; i++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d36:	e00f      	b.n	8000d58 <main+0xd0>
	{
		setTorqueOn(articulations[i]);
 8000d38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000d42:	4413      	add	r3, r2
 8000d44:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff febc 	bl	8000ac6 <setTorqueOn>
	for (uint8_t i = 0; i < 8; i++)
 8000d4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d52:	3301      	adds	r3, #1
 8000d54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d5c:	2b07      	cmp	r3, #7
 8000d5e:	d9eb      	bls.n	8000d38 <main+0xb0>
	}

	initialisePosition(articulations);
 8000d60:	463b      	mov	r3, r7
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fad6 	bl	8001314 <initialisePosition>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (buttonPressed)
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <main+0xfc>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0fb      	beq.n	8000d68 <main+0xe0>
		{
			walk(articulations, 10);
 8000d70:	463b      	mov	r3, r7
 8000d72:	210a      	movs	r1, #10
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f8a7 	bl	8000ec8 <walk>
			buttonPressed = 0;
 8000d7a:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <main+0xfc>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
		if (buttonPressed)
 8000d80:	e7f2      	b.n	8000d68 <main+0xe0>
 8000d82:	bf00      	nop
 8000d84:	200000b9 	.word	0x200000b9
 8000d88:	200000ba 	.word	0x200000ba
 8000d8c:	200000b8 	.word	0x200000b8
 8000d90:	200000bc 	.word	0x200000bc

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2234      	movs	r2, #52	; 0x34
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fe82 	bl	8003aac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage 
  */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <SystemClock_Config+0xb8>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <SystemClock_Config+0xb8>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <SystemClock_Config+0xb8>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <SystemClock_Config+0xbc>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <SystemClock_Config+0xbc>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <SystemClock_Config+0xbc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks 
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fe57 	bl	8002abc <HAL_RCC_OscConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000e14:	f000 f850 	bl	8000eb8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks 
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e18:	230f      	movs	r3, #15
 8000e1a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fbda 	bl	80025ec <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000e3e:	f000 f83b 	bl	8000eb8 <Error_Handler>
	}
}
 8000e42:	bf00      	nop
 8000e44:	3750      	adds	r7, #80	; 0x50
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40007000 	.word	0x40007000

08000e54 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000e5c:	1d39      	adds	r1, r7, #4
 8000e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e62:	2201      	movs	r2, #1
 8000e64:	4803      	ldr	r0, [pc, #12]	; (8000e74 <__io_putchar+0x20>)
 8000e66:	f002 f8d0 	bl	800300a <HAL_UART_Transmit>

	return ch;
 8000e6a:	687b      	ldr	r3, [r7, #4]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200000fc 	.word	0x200000fc

08000e78 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	buttonPressed = 1;
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	200000b9 	.word	0x200000b9

08000e98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 * the HAL_UART_RxCpltCallback could be implemented in the user file
	 * */
	receivedUART = 1;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <HAL_UART_RxCpltCallback+0x1c>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200000ba 	.word	0x200000ba

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <walk>:
 */

#include "servoControl.h"

void walk(HerkulexServo **articulations, uint8_t numberOfStep)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
    WalkPhase phase = WalkPhase_None;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
    uint8_t step = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73bb      	strb	r3, [r7, #14]

    while (step < numberOfStep)
 8000edc:	e20d      	b.n	80012fa <walk+0x432>
    {
        switch (phase)
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b06      	cmp	r3, #6
 8000ee2:	f200 8209 	bhi.w	80012f8 <walk+0x430>
 8000ee6:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <walk+0x24>)
 8000ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eec:	08000f09 	.word	0x08000f09
 8000ef0:	08000f0f 	.word	0x08000f0f
 8000ef4:	08000fbb 	.word	0x08000fbb
 8000ef8:	08001059 	.word	0x08001059
 8000efc:	08001103 	.word	0x08001103
 8000f00:	080011a9 	.word	0x080011a9
 8000f04:	08001255 	.word	0x08001255
        {
        case WalkPhase_None:
            phase = WalkPhase_One;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
            break;
 8000f0c:	e1f5      	b.n	80012fa <walk+0x432>

        case WalkPhase_One:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, 100);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2164      	movs	r1, #100	; 0x64
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fc5a 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + bassinDroit), 581, 0, HerkulexLed_Blue);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	330c      	adds	r3, #12
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	2302      	movs	r3, #2
 8000f24:	2200      	movs	r2, #0
 8000f26:	f240 2145 	movw	r1, #581	; 0x245
 8000f2a:	f7ff fd99 	bl	8000a60 <setPosition>
            setPosition(*(articulations + bassinGauche), 581, 0, HerkulexLed_Blue);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3310      	adds	r3, #16
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	2302      	movs	r3, #2
 8000f36:	2200      	movs	r2, #0
 8000f38:	f240 2145 	movw	r1, #581	; 0x245
 8000f3c:	f7ff fd90 	bl	8000a60 <setPosition>
            setPosition(*(articulations + chevilleDroite), 450, 0, HerkulexLed_Blue);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	2302      	movs	r3, #2
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000f4c:	f7ff fd88 	bl	8000a60 <setPosition>
            setTorqueOff(*(articulations + chevilleGauche));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	331c      	adds	r3, #28
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fdc2 	bl	8000ae0 <setTorqueOff>

            executeMove((**(articulations + 0)).m_bus);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fc4c 	bl	8000800 <executeMove>
            setLedColor(*(articulations + genouGauche), HerkulexLed_Blue);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3318      	adds	r3, #24
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fdc2 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + genouDroit), HerkulexLed_Blue);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fdbb 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + hancheGauche), HerkulexLed_Blue);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3314      	adds	r3, #20
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fdb4 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + hancheDroite), HerkulexLed_Blue);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3308      	adds	r3, #8
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fdad 	bl	8000afa <setLedColor>
            HAL_Delay(2000);
 8000fa0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fa4:	f000 fd20 	bl	80019e8 <HAL_Delay>
            setTorqueOn(*(articulations + chevilleGauche));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	331c      	adds	r3, #28
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fd89 	bl	8000ac6 <setTorqueOn>
            phase = WalkPhase_Two;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	73fb      	strb	r3, [r7, #15]
            break;
 8000fb8:	e19f      	b.n	80012fa <walk+0x432>

        case WalkPhase_Two:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, 100);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2164      	movs	r1, #100	; 0x64
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fc04 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + hancheGauche), 604, 0, HerkulexLed_Cyan);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3314      	adds	r3, #20
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	2303      	movs	r3, #3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8000fd6:	f7ff fd43 	bl	8000a60 <setPosition>
            setPosition(*(articulations + genouGauche), 427, 0, HerkulexLed_Cyan);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3318      	adds	r3, #24
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f240 11ab 	movw	r1, #427	; 0x1ab
 8000fe8:	f7ff fd3a 	bl	8000a60 <setPosition>

            executeMove((**(articulations + 0)).m_bus);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fc04 	bl	8000800 <executeMove>
            setLedColor(*(articulations + bassinDroit), HerkulexLed_Cyan);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	330c      	adds	r3, #12
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2103      	movs	r1, #3
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fd7a 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + genouDroit), HerkulexLed_Cyan);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3304      	adds	r3, #4
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2103      	movs	r1, #3
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fd73 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + bassinGauche), HerkulexLed_Cyan);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3310      	adds	r3, #16
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2103      	movs	r1, #3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd6c 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + hancheDroite), HerkulexLed_Cyan);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3308      	adds	r3, #8
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2103      	movs	r1, #3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd65 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + chevilleGauche), HerkulexLed_Cyan);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	331c      	adds	r3, #28
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2103      	movs	r1, #3
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fd5e 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + chevilleDroite), HerkulexLed_Cyan);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2103      	movs	r1, #3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fd58 	bl	8000afa <setLedColor>
            HAL_Delay(2000);
 800104a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800104e:	f000 fccb 	bl	80019e8 <HAL_Delay>
            phase = WalkPhase_Three;
 8001052:	2303      	movs	r3, #3
 8001054:	73fb      	strb	r3, [r7, #15]
            break;
 8001056:	e150      	b.n	80012fa <walk+0x432>

        case WalkPhase_Three:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, 100);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2164      	movs	r1, #100	; 0x64
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fbb5 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + bassinDroit), 442, 0, HerkulexLed_Purple);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	330c      	adds	r3, #12
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	2306      	movs	r3, #6
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001074:	f7ff fcf4 	bl	8000a60 <setPosition>
            setPosition(*(articulations + bassinGauche), 442, 0, HerkulexLed_Purple);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3310      	adds	r3, #16
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	2306      	movs	r3, #6
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001086:	f7ff fceb 	bl	8000a60 <setPosition>
            setPosition(*(articulations + chevilleGauche), 574, 0, HerkulexLed_Purple);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	331c      	adds	r3, #28
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	2306      	movs	r3, #6
 8001092:	2200      	movs	r2, #0
 8001094:	f240 213e 	movw	r1, #574	; 0x23e
 8001098:	f7ff fce2 	bl	8000a60 <setPosition>
            setTorqueOff(*(articulations + chevilleDroite));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fd1d 	bl	8000ae0 <setTorqueOff>

            executeMove((**(articulations + 0)).m_bus);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fba7 	bl	8000800 <executeMove>
            setLedColor(*(articulations + genouGauche), HerkulexLed_Purple);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3318      	adds	r3, #24
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2106      	movs	r1, #6
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fd1d 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + genouDroit), HerkulexLed_Purple);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3304      	adds	r3, #4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2106      	movs	r1, #6
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fd16 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + hancheGauche), HerkulexLed_Purple);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3314      	adds	r3, #20
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2106      	movs	r1, #6
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fd0f 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + hancheDroite), HerkulexLed_Purple);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3308      	adds	r3, #8
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2106      	movs	r1, #6
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fd08 	bl	8000afa <setLedColor>
            HAL_Delay(2000);
 80010ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ee:	f000 fc7b 	bl	80019e8 <HAL_Delay>
            setTorqueOn(*(articulations + chevilleDroite));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fce5 	bl	8000ac6 <setTorqueOn>
            phase = WalkPhase_Four;
 80010fc:	2304      	movs	r3, #4
 80010fe:	73fb      	strb	r3, [r7, #15]
            break;
 8001100:	e0fb      	b.n	80012fa <walk+0x432>

        case WalkPhase_Four:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, 100);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2164      	movs	r1, #100	; 0x64
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fb60 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + hancheGauche), 512, 0, HerkulexLed_White);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3314      	adds	r3, #20
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	2307      	movs	r3, #7
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111e:	f7ff fc9f 	bl	8000a60 <setPosition>
            setPosition(*(articulations + genouGauche), 512, 0, HerkulexLed_White);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3318      	adds	r3, #24
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	2307      	movs	r3, #7
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	f7ff fc96 	bl	8000a60 <setPosition>
            setPosition(*(articulations + hancheDroite), 419, 0, HerkulexLed_White);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3308      	adds	r3, #8
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	2307      	movs	r3, #7
 800113c:	2200      	movs	r2, #0
 800113e:	f240 11a3 	movw	r1, #419	; 0x1a3
 8001142:	f7ff fc8d 	bl	8000a60 <setPosition>
            setPosition(*(articulations + genouDroit), 596, 0, HerkulexLed_White);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3304      	adds	r3, #4
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	2307      	movs	r3, #7
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 7115 	mov.w	r1, #596	; 0x254
 8001154:	f7ff fc84 	bl	8000a60 <setPosition>

            executeMove((**(articulations + 0)).m_bus);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fb4e 	bl	8000800 <executeMove>
            setLedColor(*(articulations + chevilleDroite), HerkulexLed_White);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2107      	movs	r1, #7
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fcc5 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + chevilleGauche), HerkulexLed_White);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	331c      	adds	r3, #28
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2107      	movs	r1, #7
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fcbe 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + bassinGauche), HerkulexLed_White);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3310      	adds	r3, #16
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2107      	movs	r1, #7
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fcb7 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + bassinDroit), HerkulexLed_White);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	330c      	adds	r3, #12
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2107      	movs	r1, #7
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fcb0 	bl	8000afa <setLedColor>
            HAL_Delay(2000);
 800119a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800119e:	f000 fc23 	bl	80019e8 <HAL_Delay>
            phase = WalkPhase_Five;
 80011a2:	2305      	movs	r3, #5
 80011a4:	73fb      	strb	r3, [r7, #15]
            break;
 80011a6:	e0a8      	b.n	80012fa <walk+0x432>

        case WalkPhase_Five:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, 100);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2164      	movs	r1, #100	; 0x64
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fb0d 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + bassinDroit), 581, 0, HerkulexLed_Green);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	330c      	adds	r3, #12
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2200      	movs	r2, #0
 80011c0:	f240 2145 	movw	r1, #581	; 0x245
 80011c4:	f7ff fc4c 	bl	8000a60 <setPosition>
            setPosition(*(articulations + bassinGauche), 581, 0, HerkulexLed_Green);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3310      	adds	r3, #16
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	2200      	movs	r2, #0
 80011d2:	f240 2145 	movw	r1, #581	; 0x245
 80011d6:	f7ff fc43 	bl	8000a60 <setPosition>
            setPosition(*(articulations + chevilleDroite), 450, 0, HerkulexLed_Green);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80011e6:	f7ff fc3b 	bl	8000a60 <setPosition>
            setTorqueOff(*(articulations + chevilleGauche));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	331c      	adds	r3, #28
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fc75 	bl	8000ae0 <setTorqueOff>

            executeMove((**(articulations + 0)).m_bus);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff faff 	bl	8000800 <executeMove>
            setLedColor(*(articulations + genouGauche), HerkulexLed_Green);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3318      	adds	r3, #24
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fc75 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + genouDroit), HerkulexLed_Green);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3304      	adds	r3, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2101      	movs	r1, #1
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fc6e 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + hancheGauche), HerkulexLed_Green);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3314      	adds	r3, #20
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fc67 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + hancheDroite), HerkulexLed_Green);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3308      	adds	r3, #8
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2101      	movs	r1, #1
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fc60 	bl	8000afa <setLedColor>
            HAL_Delay(2000);
 800123a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800123e:	f000 fbd3 	bl	80019e8 <HAL_Delay>
            setTorqueOn(*(articulations + chevilleGauche));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	331c      	adds	r3, #28
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fc3c 	bl	8000ac6 <setTorqueOn>
            phase = WalkPhase_Six;
 800124e:	2306      	movs	r3, #6
 8001250:	73fb      	strb	r3, [r7, #15]
            break;
 8001252:	e052      	b.n	80012fa <walk+0x432>

        case WalkPhase_Six:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, 100);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2164      	movs	r1, #100	; 0x64
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fab7 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + hancheDroite), 512, 0, HerkulexLed_Yellow);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3308      	adds	r3, #8
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	2305      	movs	r3, #5
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001270:	f7ff fbf6 	bl	8000a60 <setPosition>
            setPosition(*(articulations + genouDroit), 512, 0, HerkulexLed_Yellow);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3304      	adds	r3, #4
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2305      	movs	r3, #5
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001282:	f7ff fbed 	bl	8000a60 <setPosition>
            setPosition(*(articulations + hancheGauche), 596, 0, HerkulexLed_Yellow);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3314      	adds	r3, #20
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	2305      	movs	r3, #5
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 7115 	mov.w	r1, #596	; 0x254
 8001294:	f7ff fbe4 	bl	8000a60 <setPosition>
            setPosition(*(articulations + genouGauche), 419, 0, HerkulexLed_Yellow);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3318      	adds	r3, #24
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	2305      	movs	r3, #5
 80012a0:	2200      	movs	r2, #0
 80012a2:	f240 11a3 	movw	r1, #419	; 0x1a3
 80012a6:	f7ff fbdb 	bl	8000a60 <setPosition>

            executeMove((**(articulations + 0)).m_bus);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff faa5 	bl	8000800 <executeMove>
            setLedColor(*(articulations + chevilleGauche), HerkulexLed_Yellow);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	331c      	adds	r3, #28
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2105      	movs	r1, #5
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fc1b 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + chevilleDroite), HerkulexLed_Yellow);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2105      	movs	r1, #5
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fc15 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + bassinDroit), HerkulexLed_Yellow);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	330c      	adds	r3, #12
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2105      	movs	r1, #5
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fc0e 	bl	8000afa <setLedColor>
            setLedColor(*(articulations + bassinGauche), HerkulexLed_Yellow);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3310      	adds	r3, #16
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2105      	movs	r1, #5
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fc07 	bl	8000afa <setLedColor>
            phase = WalkPhase_None;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
            step++;
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	3301      	adds	r3, #1
 80012f4:	73bb      	strb	r3, [r7, #14]
            break;
 80012f6:	e000      	b.n	80012fa <walk+0x432>

        default:
            break;
 80012f8:	bf00      	nop
    while (step < numberOfStep)
 80012fa:	7bba      	ldrb	r2, [r7, #14]
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	429a      	cmp	r2, r3
 8001300:	f4ff aded 	bcc.w	8000ede <walk+0x16>
        }
    }
    initialisePosition(articulations);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f805 	bl	8001314 <initialisePosition>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop

08001314 <initialisePosition>:

void initialisePosition(HerkulexServo **articulations)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    HerkulexServoBus *bus = (**(articulations)).m_bus;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60fb      	str	r3, [r7, #12]
    prepareSynchronizedMove(bus, 100);
 8001324:	2164      	movs	r1, #100	; 0x64
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f7ff fa52 	bl	80007d0 <prepareSynchronizedMove>

    setPosition(*(articulations + bassinDroit), 512, 0, HerkulexLed_Green);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	330c      	adds	r3, #12
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133a:	f7ff fb91 	bl	8000a60 <setPosition>
    setPosition(*(articulations + bassinGauche), 512, 0, HerkulexLed_Green);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3310      	adds	r3, #16
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134c:	f7ff fb88 	bl	8000a60 <setPosition>
    setPosition(*(articulations + chevilleDroite), 512, 0, HerkulexLed_Green);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135c:	f7ff fb80 	bl	8000a60 <setPosition>
    setPosition(*(articulations + chevilleGauche), 512, 0, HerkulexLed_Green);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	331c      	adds	r3, #28
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136e:	f7ff fb77 	bl	8000a60 <setPosition>
    setPosition(*(articulations + hancheDroite), 512, 0, HerkulexLed_Green);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3308      	adds	r3, #8
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001380:	f7ff fb6e 	bl	8000a60 <setPosition>
    setPosition(*(articulations + hancheGauche), 512, 0, HerkulexLed_Green);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3314      	adds	r3, #20
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001392:	f7ff fb65 	bl	8000a60 <setPosition>
    setPosition(*(articulations + genouDroit), 512, 0, HerkulexLed_Green);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3304      	adds	r3, #4
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a4:	f7ff fb5c 	bl	8000a60 <setPosition>
    setPosition(*(articulations + genouGauche), 512, 0, HerkulexLed_Green);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3318      	adds	r3, #24
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b6:	f7ff fb53 	bl	8000a60 <setPosition>

    executeMove(bus);
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff fa20 	bl	8000800 <executeMove>
    HAL_Delay(100);
 80013c0:	2064      	movs	r0, #100	; 0x64
 80013c2:	f000 fb11 	bl	80019e8 <HAL_Delay>
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_MspInit+0x4c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_MspInit+0x4c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001474:	f000 fa98 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <DMA1_Stream0_IRQHandler+0x10>)
 8001482:	f000 fcb5 	bl	8001df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000013c 	.word	0x2000013c

08001490 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001494:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001498:	f001 f890 	bl	80025bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <UART5_IRQHandler+0x10>)
 80014a6:	f001 fe49 	bl	800313c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200000bc 	.word	0x200000bc

080014b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e00a      	b.n	80014dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c6:	f3af 8000 	nop.w
 80014ca:	4601      	mov	r1, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf0      	blt.n	80014c6 <_read+0x12>
	}

return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e009      	b.n	8001514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fca3 	bl	8000e54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf1      	blt.n	8001500 <_write+0x12>
	}
	return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_close>:

int _close(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154e:	605a      	str	r2, [r3, #4]
	return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_isatty>:

int _isatty(int file)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	return 1;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <_sbrk+0x50>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x16>
		heap_end = &end;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <_sbrk+0x50>)
 80015a2:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <_sbrk+0x54>)
 80015a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <_sbrk+0x50>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <_sbrk+0x50>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	466a      	mov	r2, sp
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d907      	bls.n	80015ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015ba:	f002 fa45 	bl	8003a48 <__errno>
 80015be:	4602      	mov	r2, r0
 80015c0:	230c      	movs	r3, #12
 80015c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	e006      	b.n	80015d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <_sbrk+0x50>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <_sbrk+0x50>)
 80015d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000a8 	.word	0x200000a8
 80015e4:	200001a8 	.word	0x200001a8

080015e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <SystemInit+0x60>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <SystemInit+0x60>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <SystemInit+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <SystemInit+0x64>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <SystemInit+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <SystemInit+0x64>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <SystemInit+0x64>)
 8001614:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <SystemInit+0x64>)
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <SystemInit+0x68>)
 8001622:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <SystemInit+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a08      	ldr	r2, [pc, #32]	; (800164c <SystemInit+0x64>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SystemInit+0x60>)
 8001638:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800163c:	609a      	str	r2, [r3, #8]
#endif
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	40023800 	.word	0x40023800
 8001650:	24003010 	.word	0x24003010

08001654 <MX_UART5_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_UART5_Init+0x4c>)
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <MX_UART5_Init+0x50>)
 800165c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <MX_UART5_Init+0x4c>)
 8001660:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001664:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_UART5_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_UART5_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_UART5_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_UART5_Init+0x4c>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MX_UART5_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_UART5_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_UART5_Init+0x4c>)
 800168c:	f001 fc70 	bl	8002f70 <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001696:	f7ff fc0f 	bl	8000eb8 <Error_Handler>
  }

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200000bc 	.word	0x200000bc
 80016a4:	40005000 	.word	0x40005000

080016a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <MX_USART2_UART_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016e0:	f001 fc46 	bl	8002f70 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ea:	f7ff fbe5 	bl	8000eb8 <Error_Handler>
  }

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200000fc 	.word	0x200000fc
 80016f8:	40004400 	.word	0x40004400

080016fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a5d      	ldr	r2, [pc, #372]	; (8001890 <HAL_UART_MspInit+0x194>)
 800171a:	4293      	cmp	r3, r2
 800171c:	f040 8083 	bne.w	8001826 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <HAL_UART_MspInit+0x198>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a5a      	ldr	r2, [pc, #360]	; (8001894 <HAL_UART_MspInit+0x198>)
 800172a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
 8001730:	4b58      	ldr	r3, [pc, #352]	; (8001894 <HAL_UART_MspInit+0x198>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	4b54      	ldr	r3, [pc, #336]	; (8001894 <HAL_UART_MspInit+0x198>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	4a53      	ldr	r2, [pc, #332]	; (8001894 <HAL_UART_MspInit+0x198>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6313      	str	r3, [r2, #48]	; 0x30
 800174c:	4b51      	ldr	r3, [pc, #324]	; (8001894 <HAL_UART_MspInit+0x198>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <HAL_UART_MspInit+0x198>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_UART_MspInit+0x198>)
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	6313      	str	r3, [r2, #48]	; 0x30
 8001768:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_UART_MspInit+0x198>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177e:	2301      	movs	r3, #1
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001786:	2308      	movs	r3, #8
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	4841      	ldr	r0, [pc, #260]	; (8001898 <HAL_UART_MspInit+0x19c>)
 8001792:	f000 fd67 	bl	8002264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001796:	2304      	movs	r3, #4
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179e:	2301      	movs	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017a6:	2308      	movs	r3, #8
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	483a      	ldr	r0, [pc, #232]	; (800189c <HAL_UART_MspInit+0x1a0>)
 80017b2:	f000 fd57 	bl	8002264 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80017b6:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017b8:	4a3a      	ldr	r2, [pc, #232]	; (80018a4 <HAL_UART_MspInit+0x1a8>)
 80017ba:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80017bc:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017c2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c4:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ca:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017d0:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d8:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ea:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ec:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80017f8:	4829      	ldr	r0, [pc, #164]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 80017fa:	f000 fa29 	bl	8001c50 <HAL_DMA_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001804:	f7ff fb58 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a25      	ldr	r2, [pc, #148]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
 800180e:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <HAL_UART_MspInit+0x1a4>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	2035      	movs	r0, #53	; 0x35
 800181a:	f000 f9e2 	bl	8001be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800181e:	2035      	movs	r0, #53	; 0x35
 8001820:	f000 f9fb 	bl	8001c1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001824:	e030      	b.n	8001888 <HAL_UART_MspInit+0x18c>
  else if(uartHandle->Instance==USART2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <HAL_UART_MspInit+0x1ac>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d12b      	bne.n	8001888 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_UART_MspInit+0x198>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a16      	ldr	r2, [pc, #88]	; (8001894 <HAL_UART_MspInit+0x198>)
 800183a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_UART_MspInit+0x198>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_UART_MspInit+0x198>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <HAL_UART_MspInit+0x198>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6313      	str	r3, [r2, #48]	; 0x30
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_UART_MspInit+0x198>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001868:	230c      	movs	r3, #12
 800186a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001870:	2301      	movs	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001878:	2307      	movs	r3, #7
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	480a      	ldr	r0, [pc, #40]	; (80018ac <HAL_UART_MspInit+0x1b0>)
 8001884:	f000 fcee 	bl	8002264 <HAL_GPIO_Init>
}
 8001888:	bf00      	nop
 800188a:	3730      	adds	r7, #48	; 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40005000 	.word	0x40005000
 8001894:	40023800 	.word	0x40023800
 8001898:	40020800 	.word	0x40020800
 800189c:	40020c00 	.word	0x40020c00
 80018a0:	2000013c 	.word	0x2000013c
 80018a4:	40026010 	.word	0x40026010
 80018a8:	40004400 	.word	0x40004400
 80018ac:	40020000 	.word	0x40020000

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018b6:	e003      	b.n	80018c0 <LoopCopyDataInit>

080018b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018be:	3104      	adds	r1, #4

080018c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018c8:	d3f6      	bcc.n	80018b8 <CopyDataInit>
  ldr  r2, =_sbss
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018cc:	e002      	b.n	80018d4 <LoopFillZerobss>

080018ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018d0:	f842 3b04 	str.w	r3, [r2], #4

080018d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018d8:	d3f9      	bcc.n	80018ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018da:	f7ff fe85 	bl	80015e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f002 f8b9 	bl	8003a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7ff f9d1 	bl	8000c88 <main>
  bx  lr    
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018ec:	080049b4 	.word	0x080049b4
  ldr  r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018f4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80018f8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80018fc:	200001a4 	.word	0x200001a4

08001900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <HAL_Init+0x40>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_Init+0x40>)
 800191a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_Init+0x40>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f94d 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f808 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fd4a 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f965 	bl	8001c36 <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f92d 	bl	8001be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008
 80019cc:	2000019c 	.word	0x2000019c

080019d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	2000019c 	.word	0x2000019c

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff ffee 	bl	80019d0 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_Delay+0x40>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000008 	.word	0x20000008

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4907      	ldr	r1, [pc, #28]	; (8001ac8 <__NVIC_EnableIRQ+0x38>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b98:	d301      	bcc.n	8001b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <SysTick_Config+0x40>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f7ff ff8e 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb8:	2207      	movs	r2, #7
 8001bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff29 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff3e 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff8e 	bl	8001b20 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5d 	bl	8001acc <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff31 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa2 	bl	8001b88 <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff feb8 	bl	80019d0 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e099      	b.n	8001da0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8c:	e00f      	b.n	8001cae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c8e:	f7ff fe9f 	bl	80019d0 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d908      	bls.n	8001cae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e078      	b.n	8001da0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e8      	bne.n	8001c8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_DMA_Init+0x158>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d107      	bne.n	8001d18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4313      	orrs	r3, r2
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f023 0307 	bic.w	r3, r3, #7
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d117      	bne.n	8001d72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00e      	beq.n	8001d72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fa0b 	bl	8002170 <DMA_CheckFifoParam>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e016      	b.n	8001da0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f9c2 	bl	8002104 <DMA_CalcBaseAndBitshift>
 8001d80:	4603      	mov	r3, r0
 8001d82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	223f      	movs	r2, #63	; 0x3f
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	f010803f 	.word	0xf010803f

08001dac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d004      	beq.n	8001dca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00c      	b.n	8001de4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2205      	movs	r2, #5
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dfc:	4b92      	ldr	r3, [pc, #584]	; (8002048 <HAL_DMA_IRQHandler+0x258>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a92      	ldr	r2, [pc, #584]	; (800204c <HAL_DMA_IRQHandler+0x25c>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0a9b      	lsrs	r3, r3, #10
 8001e08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01a      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2208      	movs	r2, #8
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2201      	movs	r2, #1
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2201      	movs	r2, #1
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	f043 0202 	orr.w	r2, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	2204      	movs	r2, #4
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d012      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00b      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2210      	movs	r2, #16
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d043      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d03c      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	2210      	movs	r2, #16
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d018      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d108      	bne.n	8001f20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d024      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
 8001f1e:	e01f      	b.n	8001f60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
 8001f30:	e016      	b.n	8001f60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0208 	bic.w	r2, r2, #8
 8001f4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	2220      	movs	r2, #32
 8001f66:	409a      	lsls	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 808e 	beq.w	800208e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8086 	beq.w	800208e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	2220      	movs	r2, #32
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d136      	bne.n	8002008 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0216 	bic.w	r2, r2, #22
 8001fa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <HAL_DMA_IRQHandler+0x1da>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0208 	bic.w	r2, r2, #8
 8001fd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	223f      	movs	r2, #63	; 0x3f
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d07d      	beq.n	80020fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
        }
        return;
 8002006:	e078      	b.n	80020fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d01c      	beq.n	8002050 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d108      	bne.n	8002036 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	2b00      	cmp	r3, #0
 800202a:	d030      	beq.n	800208e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
 8002034:	e02b      	b.n	800208e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d027      	beq.n	800208e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
 8002046:	e022      	b.n	800208e <HAL_DMA_IRQHandler+0x29e>
 8002048:	20000000 	.word	0x20000000
 800204c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10f      	bne.n	800207e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0210 	bic.w	r2, r2, #16
 800206c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	2b00      	cmp	r3, #0
 8002094:	d032      	beq.n	80020fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d022      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2205      	movs	r2, #5
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3301      	adds	r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d307      	bcc.n	80020d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f2      	bne.n	80020ba <HAL_DMA_IRQHandler+0x2ca>
 80020d4:	e000      	b.n	80020d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
 80020f8:	e000      	b.n	80020fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80020fa:	bf00      	nop
    }
  }
}
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop

08002104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	3b10      	subs	r3, #16
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <DMA_CalcBaseAndBitshift+0x64>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800211e:	4a13      	ldr	r2, [pc, #76]	; (800216c <DMA_CalcBaseAndBitshift+0x68>)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d909      	bls.n	8002146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	1d1a      	adds	r2, r3, #4
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	659a      	str	r2, [r3, #88]	; 0x58
 8002144:	e007      	b.n	8002156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	aaaaaaab 	.word	0xaaaaaaab
 800216c:	08004904 	.word	0x08004904

08002170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d11f      	bne.n	80021ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d855      	bhi.n	800223c <DMA_CheckFifoParam+0xcc>
 8002190:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <DMA_CheckFifoParam+0x28>)
 8002192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002196:	bf00      	nop
 8002198:	080021a9 	.word	0x080021a9
 800219c:	080021bb 	.word	0x080021bb
 80021a0:	080021a9 	.word	0x080021a9
 80021a4:	0800223d 	.word	0x0800223d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d045      	beq.n	8002240 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b8:	e042      	b.n	8002240 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021c2:	d13f      	bne.n	8002244 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c8:	e03c      	b.n	8002244 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d2:	d121      	bne.n	8002218 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d836      	bhi.n	8002248 <DMA_CheckFifoParam+0xd8>
 80021da:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <DMA_CheckFifoParam+0x70>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	080021f7 	.word	0x080021f7
 80021e8:	080021f1 	.word	0x080021f1
 80021ec:	08002209 	.word	0x08002209
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
      break;
 80021f4:	e02f      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002206:	e021      	b.n	800224c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002210:	d11e      	bne.n	8002250 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002216:	e01b      	b.n	8002250 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d902      	bls.n	8002224 <DMA_CheckFifoParam+0xb4>
 800221e:	2b03      	cmp	r3, #3
 8002220:	d003      	beq.n	800222a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002222:	e018      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      break;
 8002228:	e015      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00e      	beq.n	8002254 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
      break;
 800223a:	e00b      	b.n	8002254 <DMA_CheckFifoParam+0xe4>
      break;
 800223c:	bf00      	nop
 800223e:	e00a      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      break;
 8002240:	bf00      	nop
 8002242:	e008      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      break;
 8002244:	bf00      	nop
 8002246:	e006      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      break;
 8002248:	bf00      	nop
 800224a:	e004      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      break;
 800224c:	bf00      	nop
 800224e:	e002      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      break;   
 8002250:	bf00      	nop
 8002252:	e000      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      break;
 8002254:	bf00      	nop
    }
  } 
  
  return status; 
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e165      	b.n	800254c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	429a      	cmp	r2, r3
 800229a:	f040 8154 	bne.w	8002546 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x4a>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b12      	cmp	r3, #18
 80022ac:	d123      	bne.n	80022f6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	08da      	lsrs	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3208      	adds	r2, #8
 80022b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	69b9      	ldr	r1, [r7, #24]
 80022f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0203 	and.w	r2, r3, #3
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d00b      	beq.n	800234a <HAL_GPIO_Init+0xe6>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d007      	beq.n	800234a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233e:	2b11      	cmp	r3, #17
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b12      	cmp	r3, #18
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80ae 	beq.w	8002546 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <HAL_GPIO_Init+0x2fc>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	4a5b      	ldr	r2, [pc, #364]	; (8002560 <HAL_GPIO_Init+0x2fc>)
 80023f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f8:	6453      	str	r3, [r2, #68]	; 0x44
 80023fa:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_GPIO_Init+0x2fc>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002406:	4a57      	ldr	r2, [pc, #348]	; (8002564 <HAL_GPIO_Init+0x300>)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	3302      	adds	r3, #2
 800240e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4e      	ldr	r2, [pc, #312]	; (8002568 <HAL_GPIO_Init+0x304>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d025      	beq.n	800247e <HAL_GPIO_Init+0x21a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4d      	ldr	r2, [pc, #308]	; (800256c <HAL_GPIO_Init+0x308>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01f      	beq.n	800247a <HAL_GPIO_Init+0x216>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4c      	ldr	r2, [pc, #304]	; (8002570 <HAL_GPIO_Init+0x30c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_GPIO_Init+0x212>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4b      	ldr	r2, [pc, #300]	; (8002574 <HAL_GPIO_Init+0x310>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x20e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4a      	ldr	r2, [pc, #296]	; (8002578 <HAL_GPIO_Init+0x314>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x20a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a49      	ldr	r2, [pc, #292]	; (800257c <HAL_GPIO_Init+0x318>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x206>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_GPIO_Init+0x31c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x202>
 8002462:	2306      	movs	r3, #6
 8002464:	e00c      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 8002466:	2307      	movs	r3, #7
 8002468:	e00a      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 800246a:	2305      	movs	r3, #5
 800246c:	e008      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 800246e:	2304      	movs	r3, #4
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 8002472:	2303      	movs	r3, #3
 8002474:	e004      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 8002476:	2302      	movs	r3, #2
 8002478:	e002      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 800247e:	2300      	movs	r3, #0
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	f002 0203 	and.w	r2, r2, #3
 8002486:	0092      	lsls	r2, r2, #2
 8002488:	4093      	lsls	r3, r2
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002490:	4934      	ldr	r1, [pc, #208]	; (8002564 <HAL_GPIO_Init+0x300>)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800249e:	4b39      	ldr	r3, [pc, #228]	; (8002584 <HAL_GPIO_Init+0x320>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c2:	4a30      	ldr	r2, [pc, #192]	; (8002584 <HAL_GPIO_Init+0x320>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_GPIO_Init+0x320>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ec:	4a25      	ldr	r2, [pc, #148]	; (8002584 <HAL_GPIO_Init+0x320>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_GPIO_Init+0x320>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002516:	4a1b      	ldr	r2, [pc, #108]	; (8002584 <HAL_GPIO_Init+0x320>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_GPIO_Init+0x320>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002540:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_GPIO_Init+0x320>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3301      	adds	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b0f      	cmp	r3, #15
 8002550:	f67f ae96 	bls.w	8002280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002554:	bf00      	nop
 8002556:	3724      	adds	r7, #36	; 0x24
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40023800 	.word	0x40023800
 8002564:	40013800 	.word	0x40013800
 8002568:	40020000 	.word	0x40020000
 800256c:	40020400 	.word	0x40020400
 8002570:	40020800 	.word	0x40020800
 8002574:	40020c00 	.word	0x40020c00
 8002578:	40021000 	.word	0x40021000
 800257c:	40021400 	.word	0x40021400
 8002580:	40021800 	.word	0x40021800
 8002584:	40013c00 	.word	0x40013c00

08002588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002598:	787b      	ldrb	r3, [r7, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a4:	e003      	b.n	80025ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025a6:	887b      	ldrh	r3, [r7, #2]
 80025a8:	041a      	lsls	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fc4c 	bl	8000e78 <HAL_GPIO_EXTI_Callback>
  }
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0ca      	b.n	8002796 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d90c      	bls.n	8002628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b64      	ldr	r3, [pc, #400]	; (80027a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b62      	ldr	r3, [pc, #392]	; (80027a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0b6      	b.n	8002796 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002640:	4b58      	ldr	r3, [pc, #352]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a57      	ldr	r2, [pc, #348]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002658:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a51      	ldr	r2, [pc, #324]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800265e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b4f      	ldr	r3, [pc, #316]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	494c      	ldr	r1, [pc, #304]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d044      	beq.n	800270c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b46      	ldr	r3, [pc, #280]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d119      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07d      	b.n	8002796 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	4b3e      	ldr	r3, [pc, #248]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e06d      	b.n	8002796 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e065      	b.n	8002796 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4933      	ldr	r1, [pc, #204]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026dc:	f7ff f978 	bl	80019d0 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7ff f974 	bl	80019d0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e04d      	b.n	8002796 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCC_ClockConfig+0x1b4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d20c      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <HAL_RCC_ClockConfig+0x1b4>)
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e030      	b.n	8002796 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4915      	ldr	r1, [pc, #84]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	490d      	ldr	r1, [pc, #52]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002772:	f000 f851 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 8002776:	4601      	mov	r1, r0
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	fa21 f303 	lsr.w	r3, r1, r3
 800278a:	4a08      	ldr	r2, [pc, #32]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800278e:	2000      	movs	r0, #0
 8002790:	f7ff f8da 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023c00 	.word	0x40023c00
 80027a4:	40023800 	.word	0x40023800
 80027a8:	080048ec 	.word	0x080048ec
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000000 	.word	0x20000000

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027cc:	f7ff fff0 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027d0:	4601      	mov	r1, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0a9b      	lsrs	r3, r3, #10
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4a03      	ldr	r2, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	080048fc 	.word	0x080048fc

080027f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027f4:	f7ff ffdc 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027f8:	4601      	mov	r1, r0
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	0b5b      	lsrs	r3, r3, #13
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4a03      	ldr	r2, [pc, #12]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	080048fc 	.word	0x080048fc

08002818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002832:	4b9f      	ldr	r3, [pc, #636]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b0c      	cmp	r3, #12
 800283c:	f200 8130 	bhi.w	8002aa0 <HAL_RCC_GetSysClockFreq+0x288>
 8002840:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <HAL_RCC_GetSysClockFreq+0x30>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	0800287d 	.word	0x0800287d
 800284c:	08002aa1 	.word	0x08002aa1
 8002850:	08002aa1 	.word	0x08002aa1
 8002854:	08002aa1 	.word	0x08002aa1
 8002858:	08002883 	.word	0x08002883
 800285c:	08002aa1 	.word	0x08002aa1
 8002860:	08002aa1 	.word	0x08002aa1
 8002864:	08002aa1 	.word	0x08002aa1
 8002868:	08002889 	.word	0x08002889
 800286c:	08002aa1 	.word	0x08002aa1
 8002870:	08002aa1 	.word	0x08002aa1
 8002874:	08002aa1 	.word	0x08002aa1
 8002878:	08002997 	.word	0x08002997
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b8d      	ldr	r3, [pc, #564]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x29c>)
 800287e:	613b      	str	r3, [r7, #16]
       break;
 8002880:	e111      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002882:	4b8d      	ldr	r3, [pc, #564]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002884:	613b      	str	r3, [r7, #16]
      break;
 8002886:	e10e      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002888:	4b89      	ldr	r3, [pc, #548]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002890:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002892:	4b87      	ldr	r3, [pc, #540]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d023      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289e:	4b84      	ldr	r3, [pc, #528]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	f04f 0400 	mov.w	r4, #0
 80028a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	ea03 0501 	and.w	r5, r3, r1
 80028b4:	ea04 0602 	and.w	r6, r4, r2
 80028b8:	4a7f      	ldr	r2, [pc, #508]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80028ba:	fb02 f106 	mul.w	r1, r2, r6
 80028be:	2200      	movs	r2, #0
 80028c0:	fb02 f205 	mul.w	r2, r2, r5
 80028c4:	440a      	add	r2, r1
 80028c6:	497c      	ldr	r1, [pc, #496]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80028c8:	fba5 0101 	umull	r0, r1, r5, r1
 80028cc:	1853      	adds	r3, r2, r1
 80028ce:	4619      	mov	r1, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f04f 0400 	mov.w	r4, #0
 80028d6:	461a      	mov	r2, r3
 80028d8:	4623      	mov	r3, r4
 80028da:	f7fd fce9 	bl	80002b0 <__aeabi_uldivmod>
 80028de:	4603      	mov	r3, r0
 80028e0:	460c      	mov	r4, r1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	e049      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e6:	4b72      	ldr	r3, [pc, #456]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	099b      	lsrs	r3, r3, #6
 80028ec:	f04f 0400 	mov.w	r4, #0
 80028f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	ea03 0501 	and.w	r5, r3, r1
 80028fc:	ea04 0602 	and.w	r6, r4, r2
 8002900:	4629      	mov	r1, r5
 8002902:	4632      	mov	r2, r6
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	f04f 0400 	mov.w	r4, #0
 800290c:	0154      	lsls	r4, r2, #5
 800290e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002912:	014b      	lsls	r3, r1, #5
 8002914:	4619      	mov	r1, r3
 8002916:	4622      	mov	r2, r4
 8002918:	1b49      	subs	r1, r1, r5
 800291a:	eb62 0206 	sbc.w	r2, r2, r6
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	f04f 0400 	mov.w	r4, #0
 8002926:	0194      	lsls	r4, r2, #6
 8002928:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800292c:	018b      	lsls	r3, r1, #6
 800292e:	1a5b      	subs	r3, r3, r1
 8002930:	eb64 0402 	sbc.w	r4, r4, r2
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	00e2      	lsls	r2, r4, #3
 800293e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002942:	00d9      	lsls	r1, r3, #3
 8002944:	460b      	mov	r3, r1
 8002946:	4614      	mov	r4, r2
 8002948:	195b      	adds	r3, r3, r5
 800294a:	eb44 0406 	adc.w	r4, r4, r6
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	02a2      	lsls	r2, r4, #10
 8002958:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800295c:	0299      	lsls	r1, r3, #10
 800295e:	460b      	mov	r3, r1
 8002960:	4614      	mov	r4, r2
 8002962:	4618      	mov	r0, r3
 8002964:	4621      	mov	r1, r4
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f04f 0400 	mov.w	r4, #0
 800296c:	461a      	mov	r2, r3
 800296e:	4623      	mov	r3, r4
 8002970:	f7fd fc9e 	bl	80002b0 <__aeabi_uldivmod>
 8002974:	4603      	mov	r3, r0
 8002976:	460c      	mov	r4, r1
 8002978:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800297a:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	0c1b      	lsrs	r3, r3, #16
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	3301      	adds	r3, #1
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	613b      	str	r3, [r7, #16]
      break;
 8002994:	e087      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002996:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800299e:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d023      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	f04f 0400 	mov.w	r4, #0
 80029b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	ea03 0501 	and.w	r5, r3, r1
 80029c2:	ea04 0602 	and.w	r6, r4, r2
 80029c6:	4a3c      	ldr	r2, [pc, #240]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80029c8:	fb02 f106 	mul.w	r1, r2, r6
 80029cc:	2200      	movs	r2, #0
 80029ce:	fb02 f205 	mul.w	r2, r2, r5
 80029d2:	440a      	add	r2, r1
 80029d4:	4938      	ldr	r1, [pc, #224]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80029d6:	fba5 0101 	umull	r0, r1, r5, r1
 80029da:	1853      	adds	r3, r2, r1
 80029dc:	4619      	mov	r1, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f04f 0400 	mov.w	r4, #0
 80029e4:	461a      	mov	r2, r3
 80029e6:	4623      	mov	r3, r4
 80029e8:	f7fd fc62 	bl	80002b0 <__aeabi_uldivmod>
 80029ec:	4603      	mov	r3, r0
 80029ee:	460c      	mov	r4, r1
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e049      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f4:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	ea03 0501 	and.w	r5, r3, r1
 8002a0a:	ea04 0602 	and.w	r6, r4, r2
 8002a0e:	4629      	mov	r1, r5
 8002a10:	4632      	mov	r2, r6
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f04f 0400 	mov.w	r4, #0
 8002a1a:	0154      	lsls	r4, r2, #5
 8002a1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a20:	014b      	lsls	r3, r1, #5
 8002a22:	4619      	mov	r1, r3
 8002a24:	4622      	mov	r2, r4
 8002a26:	1b49      	subs	r1, r1, r5
 8002a28:	eb62 0206 	sbc.w	r2, r2, r6
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	f04f 0400 	mov.w	r4, #0
 8002a34:	0194      	lsls	r4, r2, #6
 8002a36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a3a:	018b      	lsls	r3, r1, #6
 8002a3c:	1a5b      	subs	r3, r3, r1
 8002a3e:	eb64 0402 	sbc.w	r4, r4, r2
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	00e2      	lsls	r2, r4, #3
 8002a4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a50:	00d9      	lsls	r1, r3, #3
 8002a52:	460b      	mov	r3, r1
 8002a54:	4614      	mov	r4, r2
 8002a56:	195b      	adds	r3, r3, r5
 8002a58:	eb44 0406 	adc.w	r4, r4, r6
 8002a5c:	f04f 0100 	mov.w	r1, #0
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	02a2      	lsls	r2, r4, #10
 8002a66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a6a:	0299      	lsls	r1, r3, #10
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4614      	mov	r4, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	4621      	mov	r1, r4
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f04f 0400 	mov.w	r4, #0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4623      	mov	r3, r4
 8002a7e:	f7fd fc17 	bl	80002b0 <__aeabi_uldivmod>
 8002a82:	4603      	mov	r3, r0
 8002a84:	460c      	mov	r4, r1
 8002a86:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	0f1b      	lsrs	r3, r3, #28
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	613b      	str	r3, [r7, #16]
      break;
 8002a9e:	e002      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002aa2:	613b      	str	r3, [r7, #16]
      break;
 8002aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa6:	693b      	ldr	r3, [r7, #16]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	017d7840 	.word	0x017d7840

08002abc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8083 	beq.w	8002bdc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ad6:	4b95      	ldr	r3, [pc, #596]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d019      	beq.n	8002b16 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ae2:	4b92      	ldr	r3, [pc, #584]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002aee:	4b8f      	ldr	r3, [pc, #572]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afa:	d00c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afc:	4b8b      	ldr	r3, [pc, #556]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d112      	bne.n	8002b2e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b08:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b16:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d05b      	beq.n	8002bda <HAL_RCC_OscConfig+0x11e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d157      	bne.n	8002bda <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e216      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x8a>
 8002b38:	4b7c      	ldr	r3, [pc, #496]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a7b      	ldr	r2, [pc, #492]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e01d      	b.n	8002b82 <HAL_RCC_OscConfig+0xc6>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCC_OscConfig+0xae>
 8002b50:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a75      	ldr	r2, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a72      	ldr	r2, [pc, #456]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	e00b      	b.n	8002b82 <HAL_RCC_OscConfig+0xc6>
 8002b6a:	4b70      	ldr	r3, [pc, #448]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6f      	ldr	r2, [pc, #444]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6c      	ldr	r2, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d013      	beq.n	8002bb2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe ff21 	bl	80019d0 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b92:	f7fe ff1d 	bl	80019d0 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b64      	cmp	r3, #100	; 0x64
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1db      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba4:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0xd6>
 8002bb0:	e014      	b.n	8002bdc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb2:	f7fe ff0d 	bl	80019d0 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bba:	f7fe ff09 	bl	80019d0 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b64      	cmp	r3, #100	; 0x64
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e1c7      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bcc:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0xfe>
 8002bd8:	e000      	b.n	8002bdc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d06f      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002be8:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d017      	beq.n	8002c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bf4:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c00:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0c:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d11c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c18:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d116      	bne.n	8002c52 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c24:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_OscConfig+0x180>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e18f      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4938      	ldr	r1, [pc, #224]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c50:	e03a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d020      	beq.n	8002c9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c5a:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe feb6 	bl	80019d0 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c68:	f7fe feb2 	bl	80019d0 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e170      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4925      	ldr	r1, [pc, #148]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
 8002c9a:	e015      	b.n	8002cc8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9c:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fe95 	bl	80019d0 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002caa:	f7fe fe91 	bl	80019d0 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e14f      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d037      	beq.n	8002d44 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d016      	beq.n	8002d0a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <HAL_RCC_OscConfig+0x278>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fe75 	bl	80019d0 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cea:	f7fe fe71 	bl	80019d0 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e12f      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x22e>
 8002d08:	e01c      	b.n	8002d44 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_RCC_OscConfig+0x278>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fe5e 	bl	80019d0 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d16:	e00f      	b.n	8002d38 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fe fe5a 	bl	80019d0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d908      	bls.n	8002d38 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e118      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	42470000 	.word	0x42470000
 8002d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	4b8a      	ldr	r3, [pc, #552]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e9      	bne.n	8002d18 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8097 	beq.w	8002e80 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4b83      	ldr	r3, [pc, #524]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10f      	bne.n	8002d82 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4b7f      	ldr	r3, [pc, #508]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b7c      	ldr	r3, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b79      	ldr	r3, [pc, #484]	; (8002f68 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d118      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x4ac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a75      	ldr	r2, [pc, #468]	; (8002f68 <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fe19 	bl	80019d0 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da2:	f7fe fe15 	bl	80019d0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0d3      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db4:	4b6c      	ldr	r3, [pc, #432]	; (8002f68 <HAL_RCC_OscConfig+0x4ac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x31a>
 8002dc8:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	4a65      	ldr	r2, [pc, #404]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd4:	e01c      	b.n	8002e10 <HAL_RCC_OscConfig+0x354>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x33c>
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a60      	ldr	r2, [pc, #384]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002de4:	f043 0304 	orr.w	r3, r3, #4
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dea:	4b5e      	ldr	r3, [pc, #376]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a5d      	ldr	r2, [pc, #372]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	e00b      	b.n	8002e10 <HAL_RCC_OscConfig+0x354>
 8002df8:	4b5a      	ldr	r3, [pc, #360]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a59      	ldr	r2, [pc, #356]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
 8002e04:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a56      	ldr	r2, [pc, #344]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e0a:	f023 0304 	bic.w	r3, r3, #4
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe fdda 	bl	80019d0 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fdd6 	bl	80019d0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e092      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0ee      	beq.n	8002e20 <HAL_RCC_OscConfig+0x364>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fdc4 	bl	80019d0 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fdc0 	bl	80019d0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e07c      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e62:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1ee      	bne.n	8002e4c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e74:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	4a3a      	ldr	r2, [pc, #232]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d068      	beq.n	8002f5a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e88:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d060      	beq.n	8002f56 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d145      	bne.n	8002f28 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <HAL_RCC_OscConfig+0x4b0>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fd95 	bl	80019d0 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe fd91 	bl	80019d0 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e04f      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	019b      	lsls	r3, r3, #6
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	061b      	lsls	r3, r3, #24
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	071b      	lsls	r3, r3, #28
 8002ef4:	491b      	ldr	r1, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efa:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <HAL_RCC_OscConfig+0x4b0>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fd66 	bl	80019d0 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fd62 	bl	80019d0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e020      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x44c>
 8002f26:	e018      	b.n	8002f5a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f28:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_OscConfig+0x4b0>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fd4f 	bl	80019d0 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fe fd4b 	bl	80019d0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e009      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f0      	bne.n	8002f36 <HAL_RCC_OscConfig+0x47a>
 8002f54:	e001      	b.n	8002f5a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	42470060 	.word	0x42470060

08002f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e03f      	b.n	8003002 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe fbb0 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	; 0x24
 8002fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fb3d 	bl	8003634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b088      	sub	sp, #32
 800300e:	af02      	add	r7, sp, #8
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b20      	cmp	r3, #32
 8003028:	f040 8083 	bne.w	8003132 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_UART_Transmit+0x2e>
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e07b      	b.n	8003134 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_UART_Transmit+0x40>
 8003046:	2302      	movs	r3, #2
 8003048:	e074      	b.n	8003134 <HAL_UART_Transmit+0x12a>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2221      	movs	r2, #33	; 0x21
 800305c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003060:	f7fe fcb6 	bl	80019d0 <HAL_GetTick>
 8003064:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003072:	e042      	b.n	80030fa <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308a:	d122      	bne.n	80030d2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2200      	movs	r2, #0
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f960 	bl	800335c <UART_WaitOnFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e046      	b.n	8003134 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d103      	bne.n	80030ca <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3302      	adds	r3, #2
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	e017      	b.n	80030fa <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3301      	adds	r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	e013      	b.n	80030fa <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f93d 	bl	800335c <UART_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e023      	b.n	8003134 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	60ba      	str	r2, [r7, #8]
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1b7      	bne.n	8003074 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2200      	movs	r2, #0
 800310c:	2140      	movs	r1, #64	; 0x40
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f924 	bl	800335c <UART_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e00a      	b.n	8003134 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
  }
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_UART_IRQHandler+0x52>
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f9d2 	bl	8003530 <UART_Receive_IT>
      return;
 800318c:	e0cc      	b.n	8003328 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80ab 	beq.w	80032ec <HAL_UART_IRQHandler+0x1b0>
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <HAL_UART_IRQHandler+0x70>
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80a0 	beq.w	80032ec <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_UART_IRQHandler+0x90>
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_UART_IRQHandler+0xb0>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	f043 0202 	orr.w	r2, r3, #2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_UART_IRQHandler+0xd0>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	f043 0204 	orr.w	r2, r3, #4
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_UART_IRQHandler+0xf0>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003224:	f043 0208 	orr.w	r2, r3, #8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d078      	beq.n	8003326 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_UART_IRQHandler+0x112>
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f971 	bl	8003530 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <HAL_UART_IRQHandler+0x13a>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d031      	beq.n	80032da <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8ba 	bl	80033f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d123      	bne.n	80032d2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003298:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d013      	beq.n	80032ca <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	4a22      	ldr	r2, [pc, #136]	; (8003330 <HAL_UART_IRQHandler+0x1f4>)
 80032a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fd7c 	bl	8001dac <HAL_DMA_Abort_IT>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032c4:	4610      	mov	r0, r2
 80032c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e00e      	b.n	80032e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f83c 	bl	8003348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	e00a      	b.n	80032e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f838 	bl	8003348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e006      	b.n	80032e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f834 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032e6:	e01e      	b.n	8003326 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	bf00      	nop
    return;
 80032ea:	e01c      	b.n	8003326 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_UART_IRQHandler+0x1cc>
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8a7 	bl	8003454 <UART_Transmit_IT>
    return;
 8003306:	e00f      	b.n	8003328 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_UART_IRQHandler+0x1ec>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f8ef 	bl	8003500 <UART_EndTransmit_IT>
    return;
 8003322:	bf00      	nop
 8003324:	e000      	b.n	8003328 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003326:	bf00      	nop
  }
}
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	0800342d 	.word	0x0800342d

08003334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336c:	e02c      	b.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d028      	beq.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <UART_WaitOnFlagUntilTimeout+0x30>
 800337c:	f7fe fb28 	bl	80019d0 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	429a      	cmp	r2, r3
 800338a:	d21d      	bcs.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800339a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e00f      	b.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d0c3      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003406:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff ff7e 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b21      	cmp	r3, #33	; 0x21
 8003466:	d144      	bne.n	80034f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d11a      	bne.n	80034a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003486:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	1c9a      	adds	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	621a      	str	r2, [r3, #32]
 800349a:	e00e      	b.n	80034ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	621a      	str	r2, [r3, #32]
 80034a6:	e008      	b.n	80034ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	1c59      	adds	r1, r3, #1
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6211      	str	r1, [r2, #32]
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4619      	mov	r1, r3
 80034c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003516:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff07 	bl	8003334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b22      	cmp	r3, #34	; 0x22
 8003542:	d171      	bne.n	8003628 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354c:	d123      	bne.n	8003596 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10e      	bne.n	800357a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	1c9a      	adds	r2, r3, #2
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
 8003578:	e029      	b.n	80035ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	b29b      	uxth	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
 8003594:	e01b      	b.n	80035ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6858      	ldr	r0, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	1c59      	adds	r1, r3, #1
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6291      	str	r1, [r2, #40]	; 0x28
 80035ae:	b2c2      	uxtb	r2, r0
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	e00c      	b.n	80035ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	1c58      	adds	r0, r3, #1
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	6288      	str	r0, [r1, #40]	; 0x28
 80035c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4619      	mov	r1, r3
 80035dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d120      	bne.n	8003624 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0220 	bic.w	r2, r2, #32
 80035f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003600:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fc3c 	bl	8000e98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e002      	b.n	800362a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	e000      	b.n	800362a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003628:	2302      	movs	r3, #2
  }
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003634:	b5b0      	push	{r4, r5, r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003674:	f023 030c 	bic.w	r3, r3, #12
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	430b      	orrs	r3, r1
 8003680:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a0:	f040 80e4 	bne.w	800386c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4aab      	ldr	r2, [pc, #684]	; (8003958 <UART_SetConfig+0x324>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <UART_SetConfig+0x84>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4aaa      	ldr	r2, [pc, #680]	; (800395c <UART_SetConfig+0x328>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d16c      	bne.n	8003792 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80036b8:	f7ff f89a 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009a      	lsls	r2, r3, #2
 80036c6:	441a      	add	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	4aa3      	ldr	r2, [pc, #652]	; (8003960 <UART_SetConfig+0x32c>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	011c      	lsls	r4, r3, #4
 80036dc:	f7ff f888 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009a      	lsls	r2, r3, #2
 80036ea:	441a      	add	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80036f6:	f7ff f87b 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009a      	lsls	r2, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	4a93      	ldr	r2, [pc, #588]	; (8003960 <UART_SetConfig+0x32c>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2264      	movs	r2, #100	; 0x64
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	1aeb      	subs	r3, r5, r3
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	3332      	adds	r3, #50	; 0x32
 8003724:	4a8e      	ldr	r2, [pc, #568]	; (8003960 <UART_SetConfig+0x32c>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003732:	441c      	add	r4, r3
 8003734:	f7ff f85c 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8003738:	4602      	mov	r2, r0
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009a      	lsls	r2, r3, #2
 8003742:	441a      	add	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fbb2 f5f3 	udiv	r5, r2, r3
 800374e:	f7ff f84f 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8003752:	4602      	mov	r2, r0
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	4a7d      	ldr	r2, [pc, #500]	; (8003960 <UART_SetConfig+0x32c>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2264      	movs	r2, #100	; 0x64
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	1aeb      	subs	r3, r5, r3
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	3332      	adds	r3, #50	; 0x32
 800377c:	4a78      	ldr	r2, [pc, #480]	; (8003960 <UART_SetConfig+0x32c>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	f003 0207 	and.w	r2, r3, #7
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4422      	add	r2, r4
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	e154      	b.n	8003a3c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003792:	f7ff f819 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8003796:	4602      	mov	r2, r0
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009a      	lsls	r2, r3, #2
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	4a6c      	ldr	r2, [pc, #432]	; (8003960 <UART_SetConfig+0x32c>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	011c      	lsls	r4, r3, #4
 80037b6:	f7ff f807 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009a      	lsls	r2, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80037d0:	f7fe fffa 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009a      	lsls	r2, r3, #2
 80037de:	441a      	add	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	4a5d      	ldr	r2, [pc, #372]	; (8003960 <UART_SetConfig+0x32c>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	2264      	movs	r2, #100	; 0x64
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	1aeb      	subs	r3, r5, r3
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	3332      	adds	r3, #50	; 0x32
 80037fe:	4a58      	ldr	r2, [pc, #352]	; (8003960 <UART_SetConfig+0x32c>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800380c:	441c      	add	r4, r3
 800380e:	f7fe ffdb 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8003812:	4602      	mov	r2, r0
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009a      	lsls	r2, r3, #2
 800381c:	441a      	add	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fbb2 f5f3 	udiv	r5, r2, r3
 8003828:	f7fe ffce 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 800382c:	4602      	mov	r2, r0
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009a      	lsls	r2, r3, #2
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	4a47      	ldr	r2, [pc, #284]	; (8003960 <UART_SetConfig+0x32c>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	2264      	movs	r2, #100	; 0x64
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	1aeb      	subs	r3, r5, r3
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	3332      	adds	r3, #50	; 0x32
 8003856:	4a42      	ldr	r2, [pc, #264]	; (8003960 <UART_SetConfig+0x32c>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	f003 0207 	and.w	r2, r3, #7
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4422      	add	r2, r4
 8003868:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800386a:	e0e7      	b.n	8003a3c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a39      	ldr	r2, [pc, #228]	; (8003958 <UART_SetConfig+0x324>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <UART_SetConfig+0x24c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a38      	ldr	r2, [pc, #224]	; (800395c <UART_SetConfig+0x328>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d171      	bne.n	8003964 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003880:	f7fe ffb6 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8003884:	4602      	mov	r2, r0
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	009a      	lsls	r2, r3, #2
 800388e:	441a      	add	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	4a31      	ldr	r2, [pc, #196]	; (8003960 <UART_SetConfig+0x32c>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	011c      	lsls	r4, r3, #4
 80038a4:	f7fe ffa4 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009a      	lsls	r2, r3, #2
 80038b2:	441a      	add	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80038be:	f7fe ff97 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009a      	lsls	r2, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	4a21      	ldr	r2, [pc, #132]	; (8003960 <UART_SetConfig+0x32c>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2264      	movs	r2, #100	; 0x64
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	1aeb      	subs	r3, r5, r3
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	3332      	adds	r3, #50	; 0x32
 80038ec:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <UART_SetConfig+0x32c>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f8:	441c      	add	r4, r3
 80038fa:	f7fe ff79 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 80038fe:	4602      	mov	r2, r0
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009a      	lsls	r2, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	fbb2 f5f3 	udiv	r5, r2, r3
 8003914:	f7fe ff6c 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8003918:	4602      	mov	r2, r0
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009a      	lsls	r2, r3, #2
 8003922:	441a      	add	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	4a0c      	ldr	r2, [pc, #48]	; (8003960 <UART_SetConfig+0x32c>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	2264      	movs	r2, #100	; 0x64
 8003938:	fb02 f303 	mul.w	r3, r2, r3
 800393c:	1aeb      	subs	r3, r5, r3
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	3332      	adds	r3, #50	; 0x32
 8003942:	4a07      	ldr	r2, [pc, #28]	; (8003960 <UART_SetConfig+0x32c>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	f003 020f 	and.w	r2, r3, #15
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4422      	add	r2, r4
 8003954:	609a      	str	r2, [r3, #8]
 8003956:	e071      	b.n	8003a3c <UART_SetConfig+0x408>
 8003958:	40011000 	.word	0x40011000
 800395c:	40011400 	.word	0x40011400
 8003960:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003964:	f7fe ff30 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8003968:	4602      	mov	r2, r0
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009a      	lsls	r2, r3, #2
 8003972:	441a      	add	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	4a31      	ldr	r2, [pc, #196]	; (8003a44 <UART_SetConfig+0x410>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	011c      	lsls	r4, r3, #4
 8003988:	f7fe ff1e 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 800398c:	4602      	mov	r2, r0
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	009a      	lsls	r2, r3, #2
 8003996:	441a      	add	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	fbb2 f5f3 	udiv	r5, r2, r3
 80039a2:	f7fe ff11 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009a      	lsls	r2, r3, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <UART_SetConfig+0x410>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2264      	movs	r2, #100	; 0x64
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	1aeb      	subs	r3, r5, r3
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	3332      	adds	r3, #50	; 0x32
 80039d0:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <UART_SetConfig+0x410>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039dc:	441c      	add	r4, r3
 80039de:	f7fe fef3 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 80039e2:	4602      	mov	r2, r0
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009a      	lsls	r2, r3, #2
 80039ec:	441a      	add	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80039f8:	f7fe fee6 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009a      	lsls	r2, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <UART_SetConfig+0x410>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	2264      	movs	r2, #100	; 0x64
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	1aeb      	subs	r3, r5, r3
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	3332      	adds	r3, #50	; 0x32
 8003a26:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <UART_SetConfig+0x410>)
 8003a28:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4422      	add	r2, r4
 8003a38:	609a      	str	r2, [r3, #8]
}
 8003a3a:	e7ff      	b.n	8003a3c <UART_SetConfig+0x408>
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bdb0      	pop	{r4, r5, r7, pc}
 8003a44:	51eb851f 	.word	0x51eb851f

08003a48 <__errno>:
 8003a48:	4b01      	ldr	r3, [pc, #4]	; (8003a50 <__errno+0x8>)
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	2000000c 	.word	0x2000000c

08003a54 <__libc_init_array>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4e0d      	ldr	r6, [pc, #52]	; (8003a8c <__libc_init_array+0x38>)
 8003a58:	4c0d      	ldr	r4, [pc, #52]	; (8003a90 <__libc_init_array+0x3c>)
 8003a5a:	1ba4      	subs	r4, r4, r6
 8003a5c:	10a4      	asrs	r4, r4, #2
 8003a5e:	2500      	movs	r5, #0
 8003a60:	42a5      	cmp	r5, r4
 8003a62:	d109      	bne.n	8003a78 <__libc_init_array+0x24>
 8003a64:	4e0b      	ldr	r6, [pc, #44]	; (8003a94 <__libc_init_array+0x40>)
 8003a66:	4c0c      	ldr	r4, [pc, #48]	; (8003a98 <__libc_init_array+0x44>)
 8003a68:	f000 ff0c 	bl	8004884 <_init>
 8003a6c:	1ba4      	subs	r4, r4, r6
 8003a6e:	10a4      	asrs	r4, r4, #2
 8003a70:	2500      	movs	r5, #0
 8003a72:	42a5      	cmp	r5, r4
 8003a74:	d105      	bne.n	8003a82 <__libc_init_array+0x2e>
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
 8003a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a7c:	4798      	blx	r3
 8003a7e:	3501      	adds	r5, #1
 8003a80:	e7ee      	b.n	8003a60 <__libc_init_array+0xc>
 8003a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a86:	4798      	blx	r3
 8003a88:	3501      	adds	r5, #1
 8003a8a:	e7f2      	b.n	8003a72 <__libc_init_array+0x1e>
 8003a8c:	080049ac 	.word	0x080049ac
 8003a90:	080049ac 	.word	0x080049ac
 8003a94:	080049ac 	.word	0x080049ac
 8003a98:	080049b0 	.word	0x080049b0

08003a9c <malloc>:
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <malloc+0xc>)
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f000 b859 	b.w	8003b58 <_malloc_r>
 8003aa6:	bf00      	nop
 8003aa8:	2000000c 	.word	0x2000000c

08003aac <memset>:
 8003aac:	4402      	add	r2, r0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <_free_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4605      	mov	r5, r0
 8003ac0:	2900      	cmp	r1, #0
 8003ac2:	d045      	beq.n	8003b50 <_free_r+0x94>
 8003ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac8:	1f0c      	subs	r4, r1, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bfb8      	it	lt
 8003ace:	18e4      	addlt	r4, r4, r3
 8003ad0:	f000 f98e 	bl	8003df0 <__malloc_lock>
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <_free_r+0x98>)
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	4610      	mov	r0, r2
 8003ada:	b933      	cbnz	r3, 8003aea <_free_r+0x2e>
 8003adc:	6063      	str	r3, [r4, #4]
 8003ade:	6014      	str	r4, [r2, #0]
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ae6:	f000 b984 	b.w	8003df2 <__malloc_unlock>
 8003aea:	42a3      	cmp	r3, r4
 8003aec:	d90c      	bls.n	8003b08 <_free_r+0x4c>
 8003aee:	6821      	ldr	r1, [r4, #0]
 8003af0:	1862      	adds	r2, r4, r1
 8003af2:	4293      	cmp	r3, r2
 8003af4:	bf04      	itt	eq
 8003af6:	681a      	ldreq	r2, [r3, #0]
 8003af8:	685b      	ldreq	r3, [r3, #4]
 8003afa:	6063      	str	r3, [r4, #4]
 8003afc:	bf04      	itt	eq
 8003afe:	1852      	addeq	r2, r2, r1
 8003b00:	6022      	streq	r2, [r4, #0]
 8003b02:	6004      	str	r4, [r0, #0]
 8003b04:	e7ec      	b.n	8003ae0 <_free_r+0x24>
 8003b06:	4613      	mov	r3, r2
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	b10a      	cbz	r2, 8003b10 <_free_r+0x54>
 8003b0c:	42a2      	cmp	r2, r4
 8003b0e:	d9fa      	bls.n	8003b06 <_free_r+0x4a>
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	1858      	adds	r0, r3, r1
 8003b14:	42a0      	cmp	r0, r4
 8003b16:	d10b      	bne.n	8003b30 <_free_r+0x74>
 8003b18:	6820      	ldr	r0, [r4, #0]
 8003b1a:	4401      	add	r1, r0
 8003b1c:	1858      	adds	r0, r3, r1
 8003b1e:	4282      	cmp	r2, r0
 8003b20:	6019      	str	r1, [r3, #0]
 8003b22:	d1dd      	bne.n	8003ae0 <_free_r+0x24>
 8003b24:	6810      	ldr	r0, [r2, #0]
 8003b26:	6852      	ldr	r2, [r2, #4]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	4401      	add	r1, r0
 8003b2c:	6019      	str	r1, [r3, #0]
 8003b2e:	e7d7      	b.n	8003ae0 <_free_r+0x24>
 8003b30:	d902      	bls.n	8003b38 <_free_r+0x7c>
 8003b32:	230c      	movs	r3, #12
 8003b34:	602b      	str	r3, [r5, #0]
 8003b36:	e7d3      	b.n	8003ae0 <_free_r+0x24>
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	1821      	adds	r1, r4, r0
 8003b3c:	428a      	cmp	r2, r1
 8003b3e:	bf04      	itt	eq
 8003b40:	6811      	ldreq	r1, [r2, #0]
 8003b42:	6852      	ldreq	r2, [r2, #4]
 8003b44:	6062      	str	r2, [r4, #4]
 8003b46:	bf04      	itt	eq
 8003b48:	1809      	addeq	r1, r1, r0
 8003b4a:	6021      	streq	r1, [r4, #0]
 8003b4c:	605c      	str	r4, [r3, #4]
 8003b4e:	e7c7      	b.n	8003ae0 <_free_r+0x24>
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
 8003b52:	bf00      	nop
 8003b54:	200000ac 	.word	0x200000ac

08003b58 <_malloc_r>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	1ccd      	adds	r5, r1, #3
 8003b5c:	f025 0503 	bic.w	r5, r5, #3
 8003b60:	3508      	adds	r5, #8
 8003b62:	2d0c      	cmp	r5, #12
 8003b64:	bf38      	it	cc
 8003b66:	250c      	movcc	r5, #12
 8003b68:	2d00      	cmp	r5, #0
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	db01      	blt.n	8003b72 <_malloc_r+0x1a>
 8003b6e:	42a9      	cmp	r1, r5
 8003b70:	d903      	bls.n	8003b7a <_malloc_r+0x22>
 8003b72:	230c      	movs	r3, #12
 8003b74:	6033      	str	r3, [r6, #0]
 8003b76:	2000      	movs	r0, #0
 8003b78:	bd70      	pop	{r4, r5, r6, pc}
 8003b7a:	f000 f939 	bl	8003df0 <__malloc_lock>
 8003b7e:	4a21      	ldr	r2, [pc, #132]	; (8003c04 <_malloc_r+0xac>)
 8003b80:	6814      	ldr	r4, [r2, #0]
 8003b82:	4621      	mov	r1, r4
 8003b84:	b991      	cbnz	r1, 8003bac <_malloc_r+0x54>
 8003b86:	4c20      	ldr	r4, [pc, #128]	; (8003c08 <_malloc_r+0xb0>)
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	b91b      	cbnz	r3, 8003b94 <_malloc_r+0x3c>
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f000 f855 	bl	8003c3c <_sbrk_r>
 8003b92:	6020      	str	r0, [r4, #0]
 8003b94:	4629      	mov	r1, r5
 8003b96:	4630      	mov	r0, r6
 8003b98:	f000 f850 	bl	8003c3c <_sbrk_r>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d124      	bne.n	8003bea <_malloc_r+0x92>
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	6033      	str	r3, [r6, #0]
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f000 f924 	bl	8003df2 <__malloc_unlock>
 8003baa:	e7e4      	b.n	8003b76 <_malloc_r+0x1e>
 8003bac:	680b      	ldr	r3, [r1, #0]
 8003bae:	1b5b      	subs	r3, r3, r5
 8003bb0:	d418      	bmi.n	8003be4 <_malloc_r+0x8c>
 8003bb2:	2b0b      	cmp	r3, #11
 8003bb4:	d90f      	bls.n	8003bd6 <_malloc_r+0x7e>
 8003bb6:	600b      	str	r3, [r1, #0]
 8003bb8:	50cd      	str	r5, [r1, r3]
 8003bba:	18cc      	adds	r4, r1, r3
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f000 f918 	bl	8003df2 <__malloc_unlock>
 8003bc2:	f104 000b 	add.w	r0, r4, #11
 8003bc6:	1d23      	adds	r3, r4, #4
 8003bc8:	f020 0007 	bic.w	r0, r0, #7
 8003bcc:	1ac3      	subs	r3, r0, r3
 8003bce:	d0d3      	beq.n	8003b78 <_malloc_r+0x20>
 8003bd0:	425a      	negs	r2, r3
 8003bd2:	50e2      	str	r2, [r4, r3]
 8003bd4:	e7d0      	b.n	8003b78 <_malloc_r+0x20>
 8003bd6:	428c      	cmp	r4, r1
 8003bd8:	684b      	ldr	r3, [r1, #4]
 8003bda:	bf16      	itet	ne
 8003bdc:	6063      	strne	r3, [r4, #4]
 8003bde:	6013      	streq	r3, [r2, #0]
 8003be0:	460c      	movne	r4, r1
 8003be2:	e7eb      	b.n	8003bbc <_malloc_r+0x64>
 8003be4:	460c      	mov	r4, r1
 8003be6:	6849      	ldr	r1, [r1, #4]
 8003be8:	e7cc      	b.n	8003b84 <_malloc_r+0x2c>
 8003bea:	1cc4      	adds	r4, r0, #3
 8003bec:	f024 0403 	bic.w	r4, r4, #3
 8003bf0:	42a0      	cmp	r0, r4
 8003bf2:	d005      	beq.n	8003c00 <_malloc_r+0xa8>
 8003bf4:	1a21      	subs	r1, r4, r0
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f000 f820 	bl	8003c3c <_sbrk_r>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d0cf      	beq.n	8003ba0 <_malloc_r+0x48>
 8003c00:	6025      	str	r5, [r4, #0]
 8003c02:	e7db      	b.n	8003bbc <_malloc_r+0x64>
 8003c04:	200000ac 	.word	0x200000ac
 8003c08:	200000b0 	.word	0x200000b0

08003c0c <iprintf>:
 8003c0c:	b40f      	push	{r0, r1, r2, r3}
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <iprintf+0x2c>)
 8003c10:	b513      	push	{r0, r1, r4, lr}
 8003c12:	681c      	ldr	r4, [r3, #0]
 8003c14:	b124      	cbz	r4, 8003c20 <iprintf+0x14>
 8003c16:	69a3      	ldr	r3, [r4, #24]
 8003c18:	b913      	cbnz	r3, 8003c20 <iprintf+0x14>
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f000 f85e 	bl	8003cdc <__sinit>
 8003c20:	ab05      	add	r3, sp, #20
 8003c22:	9a04      	ldr	r2, [sp, #16]
 8003c24:	68a1      	ldr	r1, [r4, #8]
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f000 f90d 	bl	8003e48 <_vfiprintf_r>
 8003c2e:	b002      	add	sp, #8
 8003c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c34:	b004      	add	sp, #16
 8003c36:	4770      	bx	lr
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <_sbrk_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4c06      	ldr	r4, [pc, #24]	; (8003c58 <_sbrk_r+0x1c>)
 8003c40:	2300      	movs	r3, #0
 8003c42:	4605      	mov	r5, r0
 8003c44:	4608      	mov	r0, r1
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	f7fd fca2 	bl	8001590 <_sbrk>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_sbrk_r+0x1a>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_sbrk_r+0x1a>
 8003c54:	602b      	str	r3, [r5, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	200001a0 	.word	0x200001a0

08003c5c <std>:
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	b510      	push	{r4, lr}
 8003c60:	4604      	mov	r4, r0
 8003c62:	e9c0 3300 	strd	r3, r3, [r0]
 8003c66:	6083      	str	r3, [r0, #8]
 8003c68:	8181      	strh	r1, [r0, #12]
 8003c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8003c6c:	81c2      	strh	r2, [r0, #14]
 8003c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c72:	6183      	str	r3, [r0, #24]
 8003c74:	4619      	mov	r1, r3
 8003c76:	2208      	movs	r2, #8
 8003c78:	305c      	adds	r0, #92	; 0x5c
 8003c7a:	f7ff ff17 	bl	8003aac <memset>
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <std+0x38>)
 8003c80:	6263      	str	r3, [r4, #36]	; 0x24
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <std+0x3c>)
 8003c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <std+0x40>)
 8003c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <std+0x44>)
 8003c8c:	6224      	str	r4, [r4, #32]
 8003c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8003c90:	bd10      	pop	{r4, pc}
 8003c92:	bf00      	nop
 8003c94:	08004385 	.word	0x08004385
 8003c98:	080043a7 	.word	0x080043a7
 8003c9c:	080043df 	.word	0x080043df
 8003ca0:	08004403 	.word	0x08004403

08003ca4 <_cleanup_r>:
 8003ca4:	4901      	ldr	r1, [pc, #4]	; (8003cac <_cleanup_r+0x8>)
 8003ca6:	f000 b885 	b.w	8003db4 <_fwalk_reent>
 8003caa:	bf00      	nop
 8003cac:	080046dd 	.word	0x080046dd

08003cb0 <__sfmoreglue>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	1e4a      	subs	r2, r1, #1
 8003cb4:	2568      	movs	r5, #104	; 0x68
 8003cb6:	4355      	muls	r5, r2
 8003cb8:	460e      	mov	r6, r1
 8003cba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cbe:	f7ff ff4b 	bl	8003b58 <_malloc_r>
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	b140      	cbz	r0, 8003cd8 <__sfmoreglue+0x28>
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	e9c0 1600 	strd	r1, r6, [r0]
 8003ccc:	300c      	adds	r0, #12
 8003cce:	60a0      	str	r0, [r4, #8]
 8003cd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cd4:	f7ff feea 	bl	8003aac <memset>
 8003cd8:	4620      	mov	r0, r4
 8003cda:	bd70      	pop	{r4, r5, r6, pc}

08003cdc <__sinit>:
 8003cdc:	6983      	ldr	r3, [r0, #24]
 8003cde:	b510      	push	{r4, lr}
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	bb33      	cbnz	r3, 8003d32 <__sinit+0x56>
 8003ce4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003ce8:	6503      	str	r3, [r0, #80]	; 0x50
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <__sinit+0x58>)
 8003cec:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <__sinit+0x5c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6282      	str	r2, [r0, #40]	; 0x28
 8003cf2:	4298      	cmp	r0, r3
 8003cf4:	bf04      	itt	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	6183      	streq	r3, [r0, #24]
 8003cfa:	f000 f81f 	bl	8003d3c <__sfp>
 8003cfe:	6060      	str	r0, [r4, #4]
 8003d00:	4620      	mov	r0, r4
 8003d02:	f000 f81b 	bl	8003d3c <__sfp>
 8003d06:	60a0      	str	r0, [r4, #8]
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f000 f817 	bl	8003d3c <__sfp>
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60e0      	str	r0, [r4, #12]
 8003d12:	2104      	movs	r1, #4
 8003d14:	6860      	ldr	r0, [r4, #4]
 8003d16:	f7ff ffa1 	bl	8003c5c <std>
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	2109      	movs	r1, #9
 8003d1e:	68a0      	ldr	r0, [r4, #8]
 8003d20:	f7ff ff9c 	bl	8003c5c <std>
 8003d24:	2202      	movs	r2, #2
 8003d26:	2112      	movs	r1, #18
 8003d28:	68e0      	ldr	r0, [r4, #12]
 8003d2a:	f7ff ff97 	bl	8003c5c <std>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61a3      	str	r3, [r4, #24]
 8003d32:	bd10      	pop	{r4, pc}
 8003d34:	0800490c 	.word	0x0800490c
 8003d38:	08003ca5 	.word	0x08003ca5

08003d3c <__sfp>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <__sfp+0x70>)
 8003d40:	681e      	ldr	r6, [r3, #0]
 8003d42:	69b3      	ldr	r3, [r6, #24]
 8003d44:	4607      	mov	r7, r0
 8003d46:	b913      	cbnz	r3, 8003d4e <__sfp+0x12>
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f7ff ffc7 	bl	8003cdc <__sinit>
 8003d4e:	3648      	adds	r6, #72	; 0x48
 8003d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	d503      	bpl.n	8003d60 <__sfp+0x24>
 8003d58:	6833      	ldr	r3, [r6, #0]
 8003d5a:	b133      	cbz	r3, 8003d6a <__sfp+0x2e>
 8003d5c:	6836      	ldr	r6, [r6, #0]
 8003d5e:	e7f7      	b.n	8003d50 <__sfp+0x14>
 8003d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d64:	b16d      	cbz	r5, 8003d82 <__sfp+0x46>
 8003d66:	3468      	adds	r4, #104	; 0x68
 8003d68:	e7f4      	b.n	8003d54 <__sfp+0x18>
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	f7ff ff9f 	bl	8003cb0 <__sfmoreglue>
 8003d72:	6030      	str	r0, [r6, #0]
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d1f1      	bne.n	8003d5c <__sfp+0x20>
 8003d78:	230c      	movs	r3, #12
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	4620      	mov	r0, r4
 8003d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <__sfp+0x74>)
 8003d84:	6665      	str	r5, [r4, #100]	; 0x64
 8003d86:	e9c4 5500 	strd	r5, r5, [r4]
 8003d8a:	60a5      	str	r5, [r4, #8]
 8003d8c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003d90:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003d94:	2208      	movs	r2, #8
 8003d96:	4629      	mov	r1, r5
 8003d98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d9c:	f7ff fe86 	bl	8003aac <memset>
 8003da0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003da4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003da8:	e7e9      	b.n	8003d7e <__sfp+0x42>
 8003daa:	bf00      	nop
 8003dac:	0800490c 	.word	0x0800490c
 8003db0:	ffff0001 	.word	0xffff0001

08003db4 <_fwalk_reent>:
 8003db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db8:	4680      	mov	r8, r0
 8003dba:	4689      	mov	r9, r1
 8003dbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003dc0:	2600      	movs	r6, #0
 8003dc2:	b914      	cbnz	r4, 8003dca <_fwalk_reent+0x16>
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003dce:	3f01      	subs	r7, #1
 8003dd0:	d501      	bpl.n	8003dd6 <_fwalk_reent+0x22>
 8003dd2:	6824      	ldr	r4, [r4, #0]
 8003dd4:	e7f5      	b.n	8003dc2 <_fwalk_reent+0xe>
 8003dd6:	89ab      	ldrh	r3, [r5, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d907      	bls.n	8003dec <_fwalk_reent+0x38>
 8003ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003de0:	3301      	adds	r3, #1
 8003de2:	d003      	beq.n	8003dec <_fwalk_reent+0x38>
 8003de4:	4629      	mov	r1, r5
 8003de6:	4640      	mov	r0, r8
 8003de8:	47c8      	blx	r9
 8003dea:	4306      	orrs	r6, r0
 8003dec:	3568      	adds	r5, #104	; 0x68
 8003dee:	e7ee      	b.n	8003dce <_fwalk_reent+0x1a>

08003df0 <__malloc_lock>:
 8003df0:	4770      	bx	lr

08003df2 <__malloc_unlock>:
 8003df2:	4770      	bx	lr

08003df4 <__sfputc_r>:
 8003df4:	6893      	ldr	r3, [r2, #8]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	b410      	push	{r4}
 8003dfc:	6093      	str	r3, [r2, #8]
 8003dfe:	da08      	bge.n	8003e12 <__sfputc_r+0x1e>
 8003e00:	6994      	ldr	r4, [r2, #24]
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	db01      	blt.n	8003e0a <__sfputc_r+0x16>
 8003e06:	290a      	cmp	r1, #10
 8003e08:	d103      	bne.n	8003e12 <__sfputc_r+0x1e>
 8003e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e0e:	f000 bafd 	b.w	800440c <__swbuf_r>
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	1c58      	adds	r0, r3, #1
 8003e16:	6010      	str	r0, [r2, #0]
 8003e18:	7019      	strb	r1, [r3, #0]
 8003e1a:	4608      	mov	r0, r1
 8003e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <__sfputs_r>:
 8003e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e24:	4606      	mov	r6, r0
 8003e26:	460f      	mov	r7, r1
 8003e28:	4614      	mov	r4, r2
 8003e2a:	18d5      	adds	r5, r2, r3
 8003e2c:	42ac      	cmp	r4, r5
 8003e2e:	d101      	bne.n	8003e34 <__sfputs_r+0x12>
 8003e30:	2000      	movs	r0, #0
 8003e32:	e007      	b.n	8003e44 <__sfputs_r+0x22>
 8003e34:	463a      	mov	r2, r7
 8003e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f7ff ffda 	bl	8003df4 <__sfputc_r>
 8003e40:	1c43      	adds	r3, r0, #1
 8003e42:	d1f3      	bne.n	8003e2c <__sfputs_r+0xa>
 8003e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e48 <_vfiprintf_r>:
 8003e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	b09d      	sub	sp, #116	; 0x74
 8003e50:	4617      	mov	r7, r2
 8003e52:	461d      	mov	r5, r3
 8003e54:	4606      	mov	r6, r0
 8003e56:	b118      	cbz	r0, 8003e60 <_vfiprintf_r+0x18>
 8003e58:	6983      	ldr	r3, [r0, #24]
 8003e5a:	b90b      	cbnz	r3, 8003e60 <_vfiprintf_r+0x18>
 8003e5c:	f7ff ff3e 	bl	8003cdc <__sinit>
 8003e60:	4b7c      	ldr	r3, [pc, #496]	; (8004054 <_vfiprintf_r+0x20c>)
 8003e62:	429c      	cmp	r4, r3
 8003e64:	d158      	bne.n	8003f18 <_vfiprintf_r+0xd0>
 8003e66:	6874      	ldr	r4, [r6, #4]
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	0718      	lsls	r0, r3, #28
 8003e6c:	d55e      	bpl.n	8003f2c <_vfiprintf_r+0xe4>
 8003e6e:	6923      	ldr	r3, [r4, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d05b      	beq.n	8003f2c <_vfiprintf_r+0xe4>
 8003e74:	2300      	movs	r3, #0
 8003e76:	9309      	str	r3, [sp, #36]	; 0x24
 8003e78:	2320      	movs	r3, #32
 8003e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e7e:	2330      	movs	r3, #48	; 0x30
 8003e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e84:	9503      	str	r5, [sp, #12]
 8003e86:	f04f 0b01 	mov.w	fp, #1
 8003e8a:	46b8      	mov	r8, r7
 8003e8c:	4645      	mov	r5, r8
 8003e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e92:	b10b      	cbz	r3, 8003e98 <_vfiprintf_r+0x50>
 8003e94:	2b25      	cmp	r3, #37	; 0x25
 8003e96:	d154      	bne.n	8003f42 <_vfiprintf_r+0xfa>
 8003e98:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e9c:	d00b      	beq.n	8003eb6 <_vfiprintf_r+0x6e>
 8003e9e:	4653      	mov	r3, sl
 8003ea0:	463a      	mov	r2, r7
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	f7ff ffbc 	bl	8003e22 <__sfputs_r>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	f000 80c2 	beq.w	8004034 <_vfiprintf_r+0x1ec>
 8003eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb2:	4453      	add	r3, sl
 8003eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb6:	f898 3000 	ldrb.w	r3, [r8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80ba 	beq.w	8004034 <_vfiprintf_r+0x1ec>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	9307      	str	r3, [sp, #28]
 8003ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ed4:	46a8      	mov	r8, r5
 8003ed6:	2205      	movs	r2, #5
 8003ed8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003edc:	485e      	ldr	r0, [pc, #376]	; (8004058 <_vfiprintf_r+0x210>)
 8003ede:	f7fc f997 	bl	8000210 <memchr>
 8003ee2:	9b04      	ldr	r3, [sp, #16]
 8003ee4:	bb78      	cbnz	r0, 8003f46 <_vfiprintf_r+0xfe>
 8003ee6:	06d9      	lsls	r1, r3, #27
 8003ee8:	bf44      	itt	mi
 8003eea:	2220      	movmi	r2, #32
 8003eec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ef0:	071a      	lsls	r2, r3, #28
 8003ef2:	bf44      	itt	mi
 8003ef4:	222b      	movmi	r2, #43	; 0x2b
 8003ef6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003efa:	782a      	ldrb	r2, [r5, #0]
 8003efc:	2a2a      	cmp	r2, #42	; 0x2a
 8003efe:	d02a      	beq.n	8003f56 <_vfiprintf_r+0x10e>
 8003f00:	9a07      	ldr	r2, [sp, #28]
 8003f02:	46a8      	mov	r8, r5
 8003f04:	2000      	movs	r0, #0
 8003f06:	250a      	movs	r5, #10
 8003f08:	4641      	mov	r1, r8
 8003f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f0e:	3b30      	subs	r3, #48	; 0x30
 8003f10:	2b09      	cmp	r3, #9
 8003f12:	d969      	bls.n	8003fe8 <_vfiprintf_r+0x1a0>
 8003f14:	b360      	cbz	r0, 8003f70 <_vfiprintf_r+0x128>
 8003f16:	e024      	b.n	8003f62 <_vfiprintf_r+0x11a>
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <_vfiprintf_r+0x214>)
 8003f1a:	429c      	cmp	r4, r3
 8003f1c:	d101      	bne.n	8003f22 <_vfiprintf_r+0xda>
 8003f1e:	68b4      	ldr	r4, [r6, #8]
 8003f20:	e7a2      	b.n	8003e68 <_vfiprintf_r+0x20>
 8003f22:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <_vfiprintf_r+0x218>)
 8003f24:	429c      	cmp	r4, r3
 8003f26:	bf08      	it	eq
 8003f28:	68f4      	ldreq	r4, [r6, #12]
 8003f2a:	e79d      	b.n	8003e68 <_vfiprintf_r+0x20>
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 fad0 	bl	80044d4 <__swsetup_r>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d09d      	beq.n	8003e74 <_vfiprintf_r+0x2c>
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	b01d      	add	sp, #116	; 0x74
 8003f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f42:	46a8      	mov	r8, r5
 8003f44:	e7a2      	b.n	8003e8c <_vfiprintf_r+0x44>
 8003f46:	4a44      	ldr	r2, [pc, #272]	; (8004058 <_vfiprintf_r+0x210>)
 8003f48:	1a80      	subs	r0, r0, r2
 8003f4a:	fa0b f000 	lsl.w	r0, fp, r0
 8003f4e:	4318      	orrs	r0, r3
 8003f50:	9004      	str	r0, [sp, #16]
 8003f52:	4645      	mov	r5, r8
 8003f54:	e7be      	b.n	8003ed4 <_vfiprintf_r+0x8c>
 8003f56:	9a03      	ldr	r2, [sp, #12]
 8003f58:	1d11      	adds	r1, r2, #4
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	9103      	str	r1, [sp, #12]
 8003f5e:	2a00      	cmp	r2, #0
 8003f60:	db01      	blt.n	8003f66 <_vfiprintf_r+0x11e>
 8003f62:	9207      	str	r2, [sp, #28]
 8003f64:	e004      	b.n	8003f70 <_vfiprintf_r+0x128>
 8003f66:	4252      	negs	r2, r2
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	9207      	str	r2, [sp, #28]
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	f898 3000 	ldrb.w	r3, [r8]
 8003f74:	2b2e      	cmp	r3, #46	; 0x2e
 8003f76:	d10e      	bne.n	8003f96 <_vfiprintf_r+0x14e>
 8003f78:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f7e:	d138      	bne.n	8003ff2 <_vfiprintf_r+0x1aa>
 8003f80:	9b03      	ldr	r3, [sp, #12]
 8003f82:	1d1a      	adds	r2, r3, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	9203      	str	r2, [sp, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bfb8      	it	lt
 8003f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f90:	f108 0802 	add.w	r8, r8, #2
 8003f94:	9305      	str	r3, [sp, #20]
 8003f96:	4d33      	ldr	r5, [pc, #204]	; (8004064 <_vfiprintf_r+0x21c>)
 8003f98:	f898 1000 	ldrb.w	r1, [r8]
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f7fc f936 	bl	8000210 <memchr>
 8003fa4:	b140      	cbz	r0, 8003fb8 <_vfiprintf_r+0x170>
 8003fa6:	2340      	movs	r3, #64	; 0x40
 8003fa8:	1b40      	subs	r0, r0, r5
 8003faa:	fa03 f000 	lsl.w	r0, r3, r0
 8003fae:	9b04      	ldr	r3, [sp, #16]
 8003fb0:	4303      	orrs	r3, r0
 8003fb2:	f108 0801 	add.w	r8, r8, #1
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	f898 1000 	ldrb.w	r1, [r8]
 8003fbc:	482a      	ldr	r0, [pc, #168]	; (8004068 <_vfiprintf_r+0x220>)
 8003fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fc2:	2206      	movs	r2, #6
 8003fc4:	f108 0701 	add.w	r7, r8, #1
 8003fc8:	f7fc f922 	bl	8000210 <memchr>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d037      	beq.n	8004040 <_vfiprintf_r+0x1f8>
 8003fd0:	4b26      	ldr	r3, [pc, #152]	; (800406c <_vfiprintf_r+0x224>)
 8003fd2:	bb1b      	cbnz	r3, 800401c <_vfiprintf_r+0x1d4>
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	3307      	adds	r3, #7
 8003fd8:	f023 0307 	bic.w	r3, r3, #7
 8003fdc:	3308      	adds	r3, #8
 8003fde:	9303      	str	r3, [sp, #12]
 8003fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe2:	444b      	add	r3, r9
 8003fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe6:	e750      	b.n	8003e8a <_vfiprintf_r+0x42>
 8003fe8:	fb05 3202 	mla	r2, r5, r2, r3
 8003fec:	2001      	movs	r0, #1
 8003fee:	4688      	mov	r8, r1
 8003ff0:	e78a      	b.n	8003f08 <_vfiprintf_r+0xc0>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f108 0801 	add.w	r8, r8, #1
 8003ff8:	9305      	str	r3, [sp, #20]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	250a      	movs	r5, #10
 8003ffe:	4640      	mov	r0, r8
 8004000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004004:	3a30      	subs	r2, #48	; 0x30
 8004006:	2a09      	cmp	r2, #9
 8004008:	d903      	bls.n	8004012 <_vfiprintf_r+0x1ca>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0c3      	beq.n	8003f96 <_vfiprintf_r+0x14e>
 800400e:	9105      	str	r1, [sp, #20]
 8004010:	e7c1      	b.n	8003f96 <_vfiprintf_r+0x14e>
 8004012:	fb05 2101 	mla	r1, r5, r1, r2
 8004016:	2301      	movs	r3, #1
 8004018:	4680      	mov	r8, r0
 800401a:	e7f0      	b.n	8003ffe <_vfiprintf_r+0x1b6>
 800401c:	ab03      	add	r3, sp, #12
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	4622      	mov	r2, r4
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <_vfiprintf_r+0x228>)
 8004024:	a904      	add	r1, sp, #16
 8004026:	4630      	mov	r0, r6
 8004028:	f3af 8000 	nop.w
 800402c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004030:	4681      	mov	r9, r0
 8004032:	d1d5      	bne.n	8003fe0 <_vfiprintf_r+0x198>
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	065b      	lsls	r3, r3, #25
 8004038:	f53f af7e 	bmi.w	8003f38 <_vfiprintf_r+0xf0>
 800403c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800403e:	e77d      	b.n	8003f3c <_vfiprintf_r+0xf4>
 8004040:	ab03      	add	r3, sp, #12
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	4622      	mov	r2, r4
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <_vfiprintf_r+0x228>)
 8004048:	a904      	add	r1, sp, #16
 800404a:	4630      	mov	r0, r6
 800404c:	f000 f888 	bl	8004160 <_printf_i>
 8004050:	e7ec      	b.n	800402c <_vfiprintf_r+0x1e4>
 8004052:	bf00      	nop
 8004054:	08004930 	.word	0x08004930
 8004058:	08004970 	.word	0x08004970
 800405c:	08004950 	.word	0x08004950
 8004060:	08004910 	.word	0x08004910
 8004064:	08004976 	.word	0x08004976
 8004068:	0800497a 	.word	0x0800497a
 800406c:	00000000 	.word	0x00000000
 8004070:	08003e23 	.word	0x08003e23

08004074 <_printf_common>:
 8004074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004078:	4691      	mov	r9, r2
 800407a:	461f      	mov	r7, r3
 800407c:	688a      	ldr	r2, [r1, #8]
 800407e:	690b      	ldr	r3, [r1, #16]
 8004080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004084:	4293      	cmp	r3, r2
 8004086:	bfb8      	it	lt
 8004088:	4613      	movlt	r3, r2
 800408a:	f8c9 3000 	str.w	r3, [r9]
 800408e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004092:	4606      	mov	r6, r0
 8004094:	460c      	mov	r4, r1
 8004096:	b112      	cbz	r2, 800409e <_printf_common+0x2a>
 8004098:	3301      	adds	r3, #1
 800409a:	f8c9 3000 	str.w	r3, [r9]
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	0699      	lsls	r1, r3, #26
 80040a2:	bf42      	ittt	mi
 80040a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040a8:	3302      	addmi	r3, #2
 80040aa:	f8c9 3000 	strmi.w	r3, [r9]
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	f015 0506 	ands.w	r5, r5, #6
 80040b4:	d107      	bne.n	80040c6 <_printf_common+0x52>
 80040b6:	f104 0a19 	add.w	sl, r4, #25
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	f8d9 2000 	ldr.w	r2, [r9]
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	42ab      	cmp	r3, r5
 80040c4:	dc28      	bgt.n	8004118 <_printf_common+0xa4>
 80040c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	3300      	adds	r3, #0
 80040ce:	bf18      	it	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	0692      	lsls	r2, r2, #26
 80040d4:	d42d      	bmi.n	8004132 <_printf_common+0xbe>
 80040d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040da:	4639      	mov	r1, r7
 80040dc:	4630      	mov	r0, r6
 80040de:	47c0      	blx	r8
 80040e0:	3001      	adds	r0, #1
 80040e2:	d020      	beq.n	8004126 <_printf_common+0xb2>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	68e5      	ldr	r5, [r4, #12]
 80040e8:	f8d9 2000 	ldr.w	r2, [r9]
 80040ec:	f003 0306 	and.w	r3, r3, #6
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	bf08      	it	eq
 80040f4:	1aad      	subeq	r5, r5, r2
 80040f6:	68a3      	ldr	r3, [r4, #8]
 80040f8:	6922      	ldr	r2, [r4, #16]
 80040fa:	bf0c      	ite	eq
 80040fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004100:	2500      	movne	r5, #0
 8004102:	4293      	cmp	r3, r2
 8004104:	bfc4      	itt	gt
 8004106:	1a9b      	subgt	r3, r3, r2
 8004108:	18ed      	addgt	r5, r5, r3
 800410a:	f04f 0900 	mov.w	r9, #0
 800410e:	341a      	adds	r4, #26
 8004110:	454d      	cmp	r5, r9
 8004112:	d11a      	bne.n	800414a <_printf_common+0xd6>
 8004114:	2000      	movs	r0, #0
 8004116:	e008      	b.n	800412a <_printf_common+0xb6>
 8004118:	2301      	movs	r3, #1
 800411a:	4652      	mov	r2, sl
 800411c:	4639      	mov	r1, r7
 800411e:	4630      	mov	r0, r6
 8004120:	47c0      	blx	r8
 8004122:	3001      	adds	r0, #1
 8004124:	d103      	bne.n	800412e <_printf_common+0xba>
 8004126:	f04f 30ff 	mov.w	r0, #4294967295
 800412a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412e:	3501      	adds	r5, #1
 8004130:	e7c3      	b.n	80040ba <_printf_common+0x46>
 8004132:	18e1      	adds	r1, r4, r3
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	2030      	movs	r0, #48	; 0x30
 8004138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800413c:	4422      	add	r2, r4
 800413e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004142:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004146:	3302      	adds	r3, #2
 8004148:	e7c5      	b.n	80040d6 <_printf_common+0x62>
 800414a:	2301      	movs	r3, #1
 800414c:	4622      	mov	r2, r4
 800414e:	4639      	mov	r1, r7
 8004150:	4630      	mov	r0, r6
 8004152:	47c0      	blx	r8
 8004154:	3001      	adds	r0, #1
 8004156:	d0e6      	beq.n	8004126 <_printf_common+0xb2>
 8004158:	f109 0901 	add.w	r9, r9, #1
 800415c:	e7d8      	b.n	8004110 <_printf_common+0x9c>
	...

08004160 <_printf_i>:
 8004160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004164:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004168:	460c      	mov	r4, r1
 800416a:	7e09      	ldrb	r1, [r1, #24]
 800416c:	b085      	sub	sp, #20
 800416e:	296e      	cmp	r1, #110	; 0x6e
 8004170:	4617      	mov	r7, r2
 8004172:	4606      	mov	r6, r0
 8004174:	4698      	mov	r8, r3
 8004176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004178:	f000 80b3 	beq.w	80042e2 <_printf_i+0x182>
 800417c:	d822      	bhi.n	80041c4 <_printf_i+0x64>
 800417e:	2963      	cmp	r1, #99	; 0x63
 8004180:	d036      	beq.n	80041f0 <_printf_i+0x90>
 8004182:	d80a      	bhi.n	800419a <_printf_i+0x3a>
 8004184:	2900      	cmp	r1, #0
 8004186:	f000 80b9 	beq.w	80042fc <_printf_i+0x19c>
 800418a:	2958      	cmp	r1, #88	; 0x58
 800418c:	f000 8083 	beq.w	8004296 <_printf_i+0x136>
 8004190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004194:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004198:	e032      	b.n	8004200 <_printf_i+0xa0>
 800419a:	2964      	cmp	r1, #100	; 0x64
 800419c:	d001      	beq.n	80041a2 <_printf_i+0x42>
 800419e:	2969      	cmp	r1, #105	; 0x69
 80041a0:	d1f6      	bne.n	8004190 <_printf_i+0x30>
 80041a2:	6820      	ldr	r0, [r4, #0]
 80041a4:	6813      	ldr	r3, [r2, #0]
 80041a6:	0605      	lsls	r5, r0, #24
 80041a8:	f103 0104 	add.w	r1, r3, #4
 80041ac:	d52a      	bpl.n	8004204 <_printf_i+0xa4>
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	da03      	bge.n	80041be <_printf_i+0x5e>
 80041b6:	222d      	movs	r2, #45	; 0x2d
 80041b8:	425b      	negs	r3, r3
 80041ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80041be:	486f      	ldr	r0, [pc, #444]	; (800437c <_printf_i+0x21c>)
 80041c0:	220a      	movs	r2, #10
 80041c2:	e039      	b.n	8004238 <_printf_i+0xd8>
 80041c4:	2973      	cmp	r1, #115	; 0x73
 80041c6:	f000 809d 	beq.w	8004304 <_printf_i+0x1a4>
 80041ca:	d808      	bhi.n	80041de <_printf_i+0x7e>
 80041cc:	296f      	cmp	r1, #111	; 0x6f
 80041ce:	d020      	beq.n	8004212 <_printf_i+0xb2>
 80041d0:	2970      	cmp	r1, #112	; 0x70
 80041d2:	d1dd      	bne.n	8004190 <_printf_i+0x30>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	f043 0320 	orr.w	r3, r3, #32
 80041da:	6023      	str	r3, [r4, #0]
 80041dc:	e003      	b.n	80041e6 <_printf_i+0x86>
 80041de:	2975      	cmp	r1, #117	; 0x75
 80041e0:	d017      	beq.n	8004212 <_printf_i+0xb2>
 80041e2:	2978      	cmp	r1, #120	; 0x78
 80041e4:	d1d4      	bne.n	8004190 <_printf_i+0x30>
 80041e6:	2378      	movs	r3, #120	; 0x78
 80041e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ec:	4864      	ldr	r0, [pc, #400]	; (8004380 <_printf_i+0x220>)
 80041ee:	e055      	b.n	800429c <_printf_i+0x13c>
 80041f0:	6813      	ldr	r3, [r2, #0]
 80041f2:	1d19      	adds	r1, r3, #4
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6011      	str	r1, [r2, #0]
 80041f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004200:	2301      	movs	r3, #1
 8004202:	e08c      	b.n	800431e <_printf_i+0x1be>
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6011      	str	r1, [r2, #0]
 8004208:	f010 0f40 	tst.w	r0, #64	; 0x40
 800420c:	bf18      	it	ne
 800420e:	b21b      	sxthne	r3, r3
 8004210:	e7cf      	b.n	80041b2 <_printf_i+0x52>
 8004212:	6813      	ldr	r3, [r2, #0]
 8004214:	6825      	ldr	r5, [r4, #0]
 8004216:	1d18      	adds	r0, r3, #4
 8004218:	6010      	str	r0, [r2, #0]
 800421a:	0628      	lsls	r0, r5, #24
 800421c:	d501      	bpl.n	8004222 <_printf_i+0xc2>
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	e002      	b.n	8004228 <_printf_i+0xc8>
 8004222:	0668      	lsls	r0, r5, #25
 8004224:	d5fb      	bpl.n	800421e <_printf_i+0xbe>
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	4854      	ldr	r0, [pc, #336]	; (800437c <_printf_i+0x21c>)
 800422a:	296f      	cmp	r1, #111	; 0x6f
 800422c:	bf14      	ite	ne
 800422e:	220a      	movne	r2, #10
 8004230:	2208      	moveq	r2, #8
 8004232:	2100      	movs	r1, #0
 8004234:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004238:	6865      	ldr	r5, [r4, #4]
 800423a:	60a5      	str	r5, [r4, #8]
 800423c:	2d00      	cmp	r5, #0
 800423e:	f2c0 8095 	blt.w	800436c <_printf_i+0x20c>
 8004242:	6821      	ldr	r1, [r4, #0]
 8004244:	f021 0104 	bic.w	r1, r1, #4
 8004248:	6021      	str	r1, [r4, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d13d      	bne.n	80042ca <_printf_i+0x16a>
 800424e:	2d00      	cmp	r5, #0
 8004250:	f040 808e 	bne.w	8004370 <_printf_i+0x210>
 8004254:	4665      	mov	r5, ip
 8004256:	2a08      	cmp	r2, #8
 8004258:	d10b      	bne.n	8004272 <_printf_i+0x112>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	07db      	lsls	r3, r3, #31
 800425e:	d508      	bpl.n	8004272 <_printf_i+0x112>
 8004260:	6923      	ldr	r3, [r4, #16]
 8004262:	6862      	ldr	r2, [r4, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	bfde      	ittt	le
 8004268:	2330      	movle	r3, #48	; 0x30
 800426a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800426e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004272:	ebac 0305 	sub.w	r3, ip, r5
 8004276:	6123      	str	r3, [r4, #16]
 8004278:	f8cd 8000 	str.w	r8, [sp]
 800427c:	463b      	mov	r3, r7
 800427e:	aa03      	add	r2, sp, #12
 8004280:	4621      	mov	r1, r4
 8004282:	4630      	mov	r0, r6
 8004284:	f7ff fef6 	bl	8004074 <_printf_common>
 8004288:	3001      	adds	r0, #1
 800428a:	d14d      	bne.n	8004328 <_printf_i+0x1c8>
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	b005      	add	sp, #20
 8004292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004296:	4839      	ldr	r0, [pc, #228]	; (800437c <_printf_i+0x21c>)
 8004298:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800429c:	6813      	ldr	r3, [r2, #0]
 800429e:	6821      	ldr	r1, [r4, #0]
 80042a0:	1d1d      	adds	r5, r3, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6015      	str	r5, [r2, #0]
 80042a6:	060a      	lsls	r2, r1, #24
 80042a8:	d50b      	bpl.n	80042c2 <_printf_i+0x162>
 80042aa:	07ca      	lsls	r2, r1, #31
 80042ac:	bf44      	itt	mi
 80042ae:	f041 0120 	orrmi.w	r1, r1, #32
 80042b2:	6021      	strmi	r1, [r4, #0]
 80042b4:	b91b      	cbnz	r3, 80042be <_printf_i+0x15e>
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	f022 0220 	bic.w	r2, r2, #32
 80042bc:	6022      	str	r2, [r4, #0]
 80042be:	2210      	movs	r2, #16
 80042c0:	e7b7      	b.n	8004232 <_printf_i+0xd2>
 80042c2:	064d      	lsls	r5, r1, #25
 80042c4:	bf48      	it	mi
 80042c6:	b29b      	uxthmi	r3, r3
 80042c8:	e7ef      	b.n	80042aa <_printf_i+0x14a>
 80042ca:	4665      	mov	r5, ip
 80042cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80042d0:	fb02 3311 	mls	r3, r2, r1, r3
 80042d4:	5cc3      	ldrb	r3, [r0, r3]
 80042d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80042da:	460b      	mov	r3, r1
 80042dc:	2900      	cmp	r1, #0
 80042de:	d1f5      	bne.n	80042cc <_printf_i+0x16c>
 80042e0:	e7b9      	b.n	8004256 <_printf_i+0xf6>
 80042e2:	6813      	ldr	r3, [r2, #0]
 80042e4:	6825      	ldr	r5, [r4, #0]
 80042e6:	6961      	ldr	r1, [r4, #20]
 80042e8:	1d18      	adds	r0, r3, #4
 80042ea:	6010      	str	r0, [r2, #0]
 80042ec:	0628      	lsls	r0, r5, #24
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	d501      	bpl.n	80042f6 <_printf_i+0x196>
 80042f2:	6019      	str	r1, [r3, #0]
 80042f4:	e002      	b.n	80042fc <_printf_i+0x19c>
 80042f6:	066a      	lsls	r2, r5, #25
 80042f8:	d5fb      	bpl.n	80042f2 <_printf_i+0x192>
 80042fa:	8019      	strh	r1, [r3, #0]
 80042fc:	2300      	movs	r3, #0
 80042fe:	6123      	str	r3, [r4, #16]
 8004300:	4665      	mov	r5, ip
 8004302:	e7b9      	b.n	8004278 <_printf_i+0x118>
 8004304:	6813      	ldr	r3, [r2, #0]
 8004306:	1d19      	adds	r1, r3, #4
 8004308:	6011      	str	r1, [r2, #0]
 800430a:	681d      	ldr	r5, [r3, #0]
 800430c:	6862      	ldr	r2, [r4, #4]
 800430e:	2100      	movs	r1, #0
 8004310:	4628      	mov	r0, r5
 8004312:	f7fb ff7d 	bl	8000210 <memchr>
 8004316:	b108      	cbz	r0, 800431c <_printf_i+0x1bc>
 8004318:	1b40      	subs	r0, r0, r5
 800431a:	6060      	str	r0, [r4, #4]
 800431c:	6863      	ldr	r3, [r4, #4]
 800431e:	6123      	str	r3, [r4, #16]
 8004320:	2300      	movs	r3, #0
 8004322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004326:	e7a7      	b.n	8004278 <_printf_i+0x118>
 8004328:	6923      	ldr	r3, [r4, #16]
 800432a:	462a      	mov	r2, r5
 800432c:	4639      	mov	r1, r7
 800432e:	4630      	mov	r0, r6
 8004330:	47c0      	blx	r8
 8004332:	3001      	adds	r0, #1
 8004334:	d0aa      	beq.n	800428c <_printf_i+0x12c>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	079b      	lsls	r3, r3, #30
 800433a:	d413      	bmi.n	8004364 <_printf_i+0x204>
 800433c:	68e0      	ldr	r0, [r4, #12]
 800433e:	9b03      	ldr	r3, [sp, #12]
 8004340:	4298      	cmp	r0, r3
 8004342:	bfb8      	it	lt
 8004344:	4618      	movlt	r0, r3
 8004346:	e7a3      	b.n	8004290 <_printf_i+0x130>
 8004348:	2301      	movs	r3, #1
 800434a:	464a      	mov	r2, r9
 800434c:	4639      	mov	r1, r7
 800434e:	4630      	mov	r0, r6
 8004350:	47c0      	blx	r8
 8004352:	3001      	adds	r0, #1
 8004354:	d09a      	beq.n	800428c <_printf_i+0x12c>
 8004356:	3501      	adds	r5, #1
 8004358:	68e3      	ldr	r3, [r4, #12]
 800435a:	9a03      	ldr	r2, [sp, #12]
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	42ab      	cmp	r3, r5
 8004360:	dcf2      	bgt.n	8004348 <_printf_i+0x1e8>
 8004362:	e7eb      	b.n	800433c <_printf_i+0x1dc>
 8004364:	2500      	movs	r5, #0
 8004366:	f104 0919 	add.w	r9, r4, #25
 800436a:	e7f5      	b.n	8004358 <_printf_i+0x1f8>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ac      	bne.n	80042ca <_printf_i+0x16a>
 8004370:	7803      	ldrb	r3, [r0, #0]
 8004372:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004376:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800437a:	e76c      	b.n	8004256 <_printf_i+0xf6>
 800437c:	08004981 	.word	0x08004981
 8004380:	08004992 	.word	0x08004992

08004384 <__sread>:
 8004384:	b510      	push	{r4, lr}
 8004386:	460c      	mov	r4, r1
 8004388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438c:	f000 fa46 	bl	800481c <_read_r>
 8004390:	2800      	cmp	r0, #0
 8004392:	bfab      	itete	ge
 8004394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004396:	89a3      	ldrhlt	r3, [r4, #12]
 8004398:	181b      	addge	r3, r3, r0
 800439a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800439e:	bfac      	ite	ge
 80043a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80043a2:	81a3      	strhlt	r3, [r4, #12]
 80043a4:	bd10      	pop	{r4, pc}

080043a6 <__swrite>:
 80043a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043aa:	461f      	mov	r7, r3
 80043ac:	898b      	ldrh	r3, [r1, #12]
 80043ae:	05db      	lsls	r3, r3, #23
 80043b0:	4605      	mov	r5, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	4616      	mov	r6, r2
 80043b6:	d505      	bpl.n	80043c4 <__swrite+0x1e>
 80043b8:	2302      	movs	r3, #2
 80043ba:	2200      	movs	r2, #0
 80043bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c0:	f000 f9b6 	bl	8004730 <_lseek_r>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ce:	81a3      	strh	r3, [r4, #12]
 80043d0:	4632      	mov	r2, r6
 80043d2:	463b      	mov	r3, r7
 80043d4:	4628      	mov	r0, r5
 80043d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043da:	f000 b869 	b.w	80044b0 <_write_r>

080043de <__sseek>:
 80043de:	b510      	push	{r4, lr}
 80043e0:	460c      	mov	r4, r1
 80043e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e6:	f000 f9a3 	bl	8004730 <_lseek_r>
 80043ea:	1c43      	adds	r3, r0, #1
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	bf15      	itete	ne
 80043f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80043f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043fa:	81a3      	strheq	r3, [r4, #12]
 80043fc:	bf18      	it	ne
 80043fe:	81a3      	strhne	r3, [r4, #12]
 8004400:	bd10      	pop	{r4, pc}

08004402 <__sclose>:
 8004402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004406:	f000 b8d3 	b.w	80045b0 <_close_r>
	...

0800440c <__swbuf_r>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	460e      	mov	r6, r1
 8004410:	4614      	mov	r4, r2
 8004412:	4605      	mov	r5, r0
 8004414:	b118      	cbz	r0, 800441e <__swbuf_r+0x12>
 8004416:	6983      	ldr	r3, [r0, #24]
 8004418:	b90b      	cbnz	r3, 800441e <__swbuf_r+0x12>
 800441a:	f7ff fc5f 	bl	8003cdc <__sinit>
 800441e:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <__swbuf_r+0x98>)
 8004420:	429c      	cmp	r4, r3
 8004422:	d12a      	bne.n	800447a <__swbuf_r+0x6e>
 8004424:	686c      	ldr	r4, [r5, #4]
 8004426:	69a3      	ldr	r3, [r4, #24]
 8004428:	60a3      	str	r3, [r4, #8]
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	071a      	lsls	r2, r3, #28
 800442e:	d52e      	bpl.n	800448e <__swbuf_r+0x82>
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	b363      	cbz	r3, 800448e <__swbuf_r+0x82>
 8004434:	6923      	ldr	r3, [r4, #16]
 8004436:	6820      	ldr	r0, [r4, #0]
 8004438:	1ac0      	subs	r0, r0, r3
 800443a:	6963      	ldr	r3, [r4, #20]
 800443c:	b2f6      	uxtb	r6, r6
 800443e:	4283      	cmp	r3, r0
 8004440:	4637      	mov	r7, r6
 8004442:	dc04      	bgt.n	800444e <__swbuf_r+0x42>
 8004444:	4621      	mov	r1, r4
 8004446:	4628      	mov	r0, r5
 8004448:	f000 f948 	bl	80046dc <_fflush_r>
 800444c:	bb28      	cbnz	r0, 800449a <__swbuf_r+0x8e>
 800444e:	68a3      	ldr	r3, [r4, #8]
 8004450:	3b01      	subs	r3, #1
 8004452:	60a3      	str	r3, [r4, #8]
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	6022      	str	r2, [r4, #0]
 800445a:	701e      	strb	r6, [r3, #0]
 800445c:	6963      	ldr	r3, [r4, #20]
 800445e:	3001      	adds	r0, #1
 8004460:	4283      	cmp	r3, r0
 8004462:	d004      	beq.n	800446e <__swbuf_r+0x62>
 8004464:	89a3      	ldrh	r3, [r4, #12]
 8004466:	07db      	lsls	r3, r3, #31
 8004468:	d519      	bpl.n	800449e <__swbuf_r+0x92>
 800446a:	2e0a      	cmp	r6, #10
 800446c:	d117      	bne.n	800449e <__swbuf_r+0x92>
 800446e:	4621      	mov	r1, r4
 8004470:	4628      	mov	r0, r5
 8004472:	f000 f933 	bl	80046dc <_fflush_r>
 8004476:	b190      	cbz	r0, 800449e <__swbuf_r+0x92>
 8004478:	e00f      	b.n	800449a <__swbuf_r+0x8e>
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <__swbuf_r+0x9c>)
 800447c:	429c      	cmp	r4, r3
 800447e:	d101      	bne.n	8004484 <__swbuf_r+0x78>
 8004480:	68ac      	ldr	r4, [r5, #8]
 8004482:	e7d0      	b.n	8004426 <__swbuf_r+0x1a>
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <__swbuf_r+0xa0>)
 8004486:	429c      	cmp	r4, r3
 8004488:	bf08      	it	eq
 800448a:	68ec      	ldreq	r4, [r5, #12]
 800448c:	e7cb      	b.n	8004426 <__swbuf_r+0x1a>
 800448e:	4621      	mov	r1, r4
 8004490:	4628      	mov	r0, r5
 8004492:	f000 f81f 	bl	80044d4 <__swsetup_r>
 8004496:	2800      	cmp	r0, #0
 8004498:	d0cc      	beq.n	8004434 <__swbuf_r+0x28>
 800449a:	f04f 37ff 	mov.w	r7, #4294967295
 800449e:	4638      	mov	r0, r7
 80044a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044a2:	bf00      	nop
 80044a4:	08004930 	.word	0x08004930
 80044a8:	08004950 	.word	0x08004950
 80044ac:	08004910 	.word	0x08004910

080044b0 <_write_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4c07      	ldr	r4, [pc, #28]	; (80044d0 <_write_r+0x20>)
 80044b4:	4605      	mov	r5, r0
 80044b6:	4608      	mov	r0, r1
 80044b8:	4611      	mov	r1, r2
 80044ba:	2200      	movs	r2, #0
 80044bc:	6022      	str	r2, [r4, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	f7fd f815 	bl	80014ee <_write>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_write_r+0x1e>
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_write_r+0x1e>
 80044cc:	602b      	str	r3, [r5, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	200001a0 	.word	0x200001a0

080044d4 <__swsetup_r>:
 80044d4:	4b32      	ldr	r3, [pc, #200]	; (80045a0 <__swsetup_r+0xcc>)
 80044d6:	b570      	push	{r4, r5, r6, lr}
 80044d8:	681d      	ldr	r5, [r3, #0]
 80044da:	4606      	mov	r6, r0
 80044dc:	460c      	mov	r4, r1
 80044de:	b125      	cbz	r5, 80044ea <__swsetup_r+0x16>
 80044e0:	69ab      	ldr	r3, [r5, #24]
 80044e2:	b913      	cbnz	r3, 80044ea <__swsetup_r+0x16>
 80044e4:	4628      	mov	r0, r5
 80044e6:	f7ff fbf9 	bl	8003cdc <__sinit>
 80044ea:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <__swsetup_r+0xd0>)
 80044ec:	429c      	cmp	r4, r3
 80044ee:	d10f      	bne.n	8004510 <__swsetup_r+0x3c>
 80044f0:	686c      	ldr	r4, [r5, #4]
 80044f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	0715      	lsls	r5, r2, #28
 80044fa:	d42c      	bmi.n	8004556 <__swsetup_r+0x82>
 80044fc:	06d0      	lsls	r0, r2, #27
 80044fe:	d411      	bmi.n	8004524 <__swsetup_r+0x50>
 8004500:	2209      	movs	r2, #9
 8004502:	6032      	str	r2, [r6, #0]
 8004504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	f04f 30ff 	mov.w	r0, #4294967295
 800450e:	e03e      	b.n	800458e <__swsetup_r+0xba>
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <__swsetup_r+0xd4>)
 8004512:	429c      	cmp	r4, r3
 8004514:	d101      	bne.n	800451a <__swsetup_r+0x46>
 8004516:	68ac      	ldr	r4, [r5, #8]
 8004518:	e7eb      	b.n	80044f2 <__swsetup_r+0x1e>
 800451a:	4b24      	ldr	r3, [pc, #144]	; (80045ac <__swsetup_r+0xd8>)
 800451c:	429c      	cmp	r4, r3
 800451e:	bf08      	it	eq
 8004520:	68ec      	ldreq	r4, [r5, #12]
 8004522:	e7e6      	b.n	80044f2 <__swsetup_r+0x1e>
 8004524:	0751      	lsls	r1, r2, #29
 8004526:	d512      	bpl.n	800454e <__swsetup_r+0x7a>
 8004528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800452a:	b141      	cbz	r1, 800453e <__swsetup_r+0x6a>
 800452c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004530:	4299      	cmp	r1, r3
 8004532:	d002      	beq.n	800453a <__swsetup_r+0x66>
 8004534:	4630      	mov	r0, r6
 8004536:	f7ff fac1 	bl	8003abc <_free_r>
 800453a:	2300      	movs	r3, #0
 800453c:	6363      	str	r3, [r4, #52]	; 0x34
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004544:	81a3      	strh	r3, [r4, #12]
 8004546:	2300      	movs	r3, #0
 8004548:	6063      	str	r3, [r4, #4]
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	f043 0308 	orr.w	r3, r3, #8
 8004554:	81a3      	strh	r3, [r4, #12]
 8004556:	6923      	ldr	r3, [r4, #16]
 8004558:	b94b      	cbnz	r3, 800456e <__swsetup_r+0x9a>
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004564:	d003      	beq.n	800456e <__swsetup_r+0x9a>
 8004566:	4621      	mov	r1, r4
 8004568:	4630      	mov	r0, r6
 800456a:	f000 f917 	bl	800479c <__smakebuf_r>
 800456e:	89a2      	ldrh	r2, [r4, #12]
 8004570:	f012 0301 	ands.w	r3, r2, #1
 8004574:	d00c      	beq.n	8004590 <__swsetup_r+0xbc>
 8004576:	2300      	movs	r3, #0
 8004578:	60a3      	str	r3, [r4, #8]
 800457a:	6963      	ldr	r3, [r4, #20]
 800457c:	425b      	negs	r3, r3
 800457e:	61a3      	str	r3, [r4, #24]
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	b953      	cbnz	r3, 800459a <__swsetup_r+0xc6>
 8004584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004588:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800458c:	d1ba      	bne.n	8004504 <__swsetup_r+0x30>
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	0792      	lsls	r2, r2, #30
 8004592:	bf58      	it	pl
 8004594:	6963      	ldrpl	r3, [r4, #20]
 8004596:	60a3      	str	r3, [r4, #8]
 8004598:	e7f2      	b.n	8004580 <__swsetup_r+0xac>
 800459a:	2000      	movs	r0, #0
 800459c:	e7f7      	b.n	800458e <__swsetup_r+0xba>
 800459e:	bf00      	nop
 80045a0:	2000000c 	.word	0x2000000c
 80045a4:	08004930 	.word	0x08004930
 80045a8:	08004950 	.word	0x08004950
 80045ac:	08004910 	.word	0x08004910

080045b0 <_close_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4c06      	ldr	r4, [pc, #24]	; (80045cc <_close_r+0x1c>)
 80045b4:	2300      	movs	r3, #0
 80045b6:	4605      	mov	r5, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	f7fc ffb3 	bl	8001526 <_close>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_close_r+0x1a>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_close_r+0x1a>
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	200001a0 	.word	0x200001a0

080045d0 <__sflush_r>:
 80045d0:	898a      	ldrh	r2, [r1, #12]
 80045d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d6:	4605      	mov	r5, r0
 80045d8:	0710      	lsls	r0, r2, #28
 80045da:	460c      	mov	r4, r1
 80045dc:	d458      	bmi.n	8004690 <__sflush_r+0xc0>
 80045de:	684b      	ldr	r3, [r1, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	dc05      	bgt.n	80045f0 <__sflush_r+0x20>
 80045e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	dc02      	bgt.n	80045f0 <__sflush_r+0x20>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045f2:	2e00      	cmp	r6, #0
 80045f4:	d0f9      	beq.n	80045ea <__sflush_r+0x1a>
 80045f6:	2300      	movs	r3, #0
 80045f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045fc:	682f      	ldr	r7, [r5, #0]
 80045fe:	6a21      	ldr	r1, [r4, #32]
 8004600:	602b      	str	r3, [r5, #0]
 8004602:	d032      	beq.n	800466a <__sflush_r+0x9a>
 8004604:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	075a      	lsls	r2, r3, #29
 800460a:	d505      	bpl.n	8004618 <__sflush_r+0x48>
 800460c:	6863      	ldr	r3, [r4, #4]
 800460e:	1ac0      	subs	r0, r0, r3
 8004610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004612:	b10b      	cbz	r3, 8004618 <__sflush_r+0x48>
 8004614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004616:	1ac0      	subs	r0, r0, r3
 8004618:	2300      	movs	r3, #0
 800461a:	4602      	mov	r2, r0
 800461c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800461e:	6a21      	ldr	r1, [r4, #32]
 8004620:	4628      	mov	r0, r5
 8004622:	47b0      	blx	r6
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	d106      	bne.n	8004638 <__sflush_r+0x68>
 800462a:	6829      	ldr	r1, [r5, #0]
 800462c:	291d      	cmp	r1, #29
 800462e:	d848      	bhi.n	80046c2 <__sflush_r+0xf2>
 8004630:	4a29      	ldr	r2, [pc, #164]	; (80046d8 <__sflush_r+0x108>)
 8004632:	40ca      	lsrs	r2, r1
 8004634:	07d6      	lsls	r6, r2, #31
 8004636:	d544      	bpl.n	80046c2 <__sflush_r+0xf2>
 8004638:	2200      	movs	r2, #0
 800463a:	6062      	str	r2, [r4, #4]
 800463c:	04d9      	lsls	r1, r3, #19
 800463e:	6922      	ldr	r2, [r4, #16]
 8004640:	6022      	str	r2, [r4, #0]
 8004642:	d504      	bpl.n	800464e <__sflush_r+0x7e>
 8004644:	1c42      	adds	r2, r0, #1
 8004646:	d101      	bne.n	800464c <__sflush_r+0x7c>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b903      	cbnz	r3, 800464e <__sflush_r+0x7e>
 800464c:	6560      	str	r0, [r4, #84]	; 0x54
 800464e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004650:	602f      	str	r7, [r5, #0]
 8004652:	2900      	cmp	r1, #0
 8004654:	d0c9      	beq.n	80045ea <__sflush_r+0x1a>
 8004656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800465a:	4299      	cmp	r1, r3
 800465c:	d002      	beq.n	8004664 <__sflush_r+0x94>
 800465e:	4628      	mov	r0, r5
 8004660:	f7ff fa2c 	bl	8003abc <_free_r>
 8004664:	2000      	movs	r0, #0
 8004666:	6360      	str	r0, [r4, #52]	; 0x34
 8004668:	e7c0      	b.n	80045ec <__sflush_r+0x1c>
 800466a:	2301      	movs	r3, #1
 800466c:	4628      	mov	r0, r5
 800466e:	47b0      	blx	r6
 8004670:	1c41      	adds	r1, r0, #1
 8004672:	d1c8      	bne.n	8004606 <__sflush_r+0x36>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0c5      	beq.n	8004606 <__sflush_r+0x36>
 800467a:	2b1d      	cmp	r3, #29
 800467c:	d001      	beq.n	8004682 <__sflush_r+0xb2>
 800467e:	2b16      	cmp	r3, #22
 8004680:	d101      	bne.n	8004686 <__sflush_r+0xb6>
 8004682:	602f      	str	r7, [r5, #0]
 8004684:	e7b1      	b.n	80045ea <__sflush_r+0x1a>
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800468c:	81a3      	strh	r3, [r4, #12]
 800468e:	e7ad      	b.n	80045ec <__sflush_r+0x1c>
 8004690:	690f      	ldr	r7, [r1, #16]
 8004692:	2f00      	cmp	r7, #0
 8004694:	d0a9      	beq.n	80045ea <__sflush_r+0x1a>
 8004696:	0793      	lsls	r3, r2, #30
 8004698:	680e      	ldr	r6, [r1, #0]
 800469a:	bf08      	it	eq
 800469c:	694b      	ldreq	r3, [r1, #20]
 800469e:	600f      	str	r7, [r1, #0]
 80046a0:	bf18      	it	ne
 80046a2:	2300      	movne	r3, #0
 80046a4:	eba6 0807 	sub.w	r8, r6, r7
 80046a8:	608b      	str	r3, [r1, #8]
 80046aa:	f1b8 0f00 	cmp.w	r8, #0
 80046ae:	dd9c      	ble.n	80045ea <__sflush_r+0x1a>
 80046b0:	4643      	mov	r3, r8
 80046b2:	463a      	mov	r2, r7
 80046b4:	6a21      	ldr	r1, [r4, #32]
 80046b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046b8:	4628      	mov	r0, r5
 80046ba:	47b0      	blx	r6
 80046bc:	2800      	cmp	r0, #0
 80046be:	dc06      	bgt.n	80046ce <__sflush_r+0xfe>
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	e78e      	b.n	80045ec <__sflush_r+0x1c>
 80046ce:	4407      	add	r7, r0
 80046d0:	eba8 0800 	sub.w	r8, r8, r0
 80046d4:	e7e9      	b.n	80046aa <__sflush_r+0xda>
 80046d6:	bf00      	nop
 80046d8:	20400001 	.word	0x20400001

080046dc <_fflush_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	690b      	ldr	r3, [r1, #16]
 80046e0:	4605      	mov	r5, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	b1db      	cbz	r3, 800471e <_fflush_r+0x42>
 80046e6:	b118      	cbz	r0, 80046f0 <_fflush_r+0x14>
 80046e8:	6983      	ldr	r3, [r0, #24]
 80046ea:	b90b      	cbnz	r3, 80046f0 <_fflush_r+0x14>
 80046ec:	f7ff faf6 	bl	8003cdc <__sinit>
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <_fflush_r+0x48>)
 80046f2:	429c      	cmp	r4, r3
 80046f4:	d109      	bne.n	800470a <_fflush_r+0x2e>
 80046f6:	686c      	ldr	r4, [r5, #4]
 80046f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fc:	b17b      	cbz	r3, 800471e <_fflush_r+0x42>
 80046fe:	4621      	mov	r1, r4
 8004700:	4628      	mov	r0, r5
 8004702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004706:	f7ff bf63 	b.w	80045d0 <__sflush_r>
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <_fflush_r+0x4c>)
 800470c:	429c      	cmp	r4, r3
 800470e:	d101      	bne.n	8004714 <_fflush_r+0x38>
 8004710:	68ac      	ldr	r4, [r5, #8]
 8004712:	e7f1      	b.n	80046f8 <_fflush_r+0x1c>
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <_fflush_r+0x50>)
 8004716:	429c      	cmp	r4, r3
 8004718:	bf08      	it	eq
 800471a:	68ec      	ldreq	r4, [r5, #12]
 800471c:	e7ec      	b.n	80046f8 <_fflush_r+0x1c>
 800471e:	2000      	movs	r0, #0
 8004720:	bd38      	pop	{r3, r4, r5, pc}
 8004722:	bf00      	nop
 8004724:	08004930 	.word	0x08004930
 8004728:	08004950 	.word	0x08004950
 800472c:	08004910 	.word	0x08004910

08004730 <_lseek_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4c07      	ldr	r4, [pc, #28]	; (8004750 <_lseek_r+0x20>)
 8004734:	4605      	mov	r5, r0
 8004736:	4608      	mov	r0, r1
 8004738:	4611      	mov	r1, r2
 800473a:	2200      	movs	r2, #0
 800473c:	6022      	str	r2, [r4, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	f7fc ff18 	bl	8001574 <_lseek>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_lseek_r+0x1e>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	b103      	cbz	r3, 800474e <_lseek_r+0x1e>
 800474c:	602b      	str	r3, [r5, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	200001a0 	.word	0x200001a0

08004754 <__swhatbuf_r>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	460e      	mov	r6, r1
 8004758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475c:	2900      	cmp	r1, #0
 800475e:	b096      	sub	sp, #88	; 0x58
 8004760:	4614      	mov	r4, r2
 8004762:	461d      	mov	r5, r3
 8004764:	da07      	bge.n	8004776 <__swhatbuf_r+0x22>
 8004766:	2300      	movs	r3, #0
 8004768:	602b      	str	r3, [r5, #0]
 800476a:	89b3      	ldrh	r3, [r6, #12]
 800476c:	061a      	lsls	r2, r3, #24
 800476e:	d410      	bmi.n	8004792 <__swhatbuf_r+0x3e>
 8004770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004774:	e00e      	b.n	8004794 <__swhatbuf_r+0x40>
 8004776:	466a      	mov	r2, sp
 8004778:	f000 f862 	bl	8004840 <_fstat_r>
 800477c:	2800      	cmp	r0, #0
 800477e:	dbf2      	blt.n	8004766 <__swhatbuf_r+0x12>
 8004780:	9a01      	ldr	r2, [sp, #4]
 8004782:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004786:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800478a:	425a      	negs	r2, r3
 800478c:	415a      	adcs	r2, r3
 800478e:	602a      	str	r2, [r5, #0]
 8004790:	e7ee      	b.n	8004770 <__swhatbuf_r+0x1c>
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	2000      	movs	r0, #0
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	b016      	add	sp, #88	; 0x58
 800479a:	bd70      	pop	{r4, r5, r6, pc}

0800479c <__smakebuf_r>:
 800479c:	898b      	ldrh	r3, [r1, #12]
 800479e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047a0:	079d      	lsls	r5, r3, #30
 80047a2:	4606      	mov	r6, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	d507      	bpl.n	80047b8 <__smakebuf_r+0x1c>
 80047a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	2301      	movs	r3, #1
 80047b2:	6163      	str	r3, [r4, #20]
 80047b4:	b002      	add	sp, #8
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	ab01      	add	r3, sp, #4
 80047ba:	466a      	mov	r2, sp
 80047bc:	f7ff ffca 	bl	8004754 <__swhatbuf_r>
 80047c0:	9900      	ldr	r1, [sp, #0]
 80047c2:	4605      	mov	r5, r0
 80047c4:	4630      	mov	r0, r6
 80047c6:	f7ff f9c7 	bl	8003b58 <_malloc_r>
 80047ca:	b948      	cbnz	r0, 80047e0 <__smakebuf_r+0x44>
 80047cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d0:	059a      	lsls	r2, r3, #22
 80047d2:	d4ef      	bmi.n	80047b4 <__smakebuf_r+0x18>
 80047d4:	f023 0303 	bic.w	r3, r3, #3
 80047d8:	f043 0302 	orr.w	r3, r3, #2
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	e7e3      	b.n	80047a8 <__smakebuf_r+0xc>
 80047e0:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <__smakebuf_r+0x7c>)
 80047e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	6020      	str	r0, [r4, #0]
 80047e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	9b00      	ldr	r3, [sp, #0]
 80047f0:	6163      	str	r3, [r4, #20]
 80047f2:	9b01      	ldr	r3, [sp, #4]
 80047f4:	6120      	str	r0, [r4, #16]
 80047f6:	b15b      	cbz	r3, 8004810 <__smakebuf_r+0x74>
 80047f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047fc:	4630      	mov	r0, r6
 80047fe:	f000 f831 	bl	8004864 <_isatty_r>
 8004802:	b128      	cbz	r0, 8004810 <__smakebuf_r+0x74>
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	81a3      	strh	r3, [r4, #12]
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	431d      	orrs	r5, r3
 8004814:	81a5      	strh	r5, [r4, #12]
 8004816:	e7cd      	b.n	80047b4 <__smakebuf_r+0x18>
 8004818:	08003ca5 	.word	0x08003ca5

0800481c <_read_r>:
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	4c07      	ldr	r4, [pc, #28]	; (800483c <_read_r+0x20>)
 8004820:	4605      	mov	r5, r0
 8004822:	4608      	mov	r0, r1
 8004824:	4611      	mov	r1, r2
 8004826:	2200      	movs	r2, #0
 8004828:	6022      	str	r2, [r4, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	f7fc fe42 	bl	80014b4 <_read>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_read_r+0x1e>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	b103      	cbz	r3, 800483a <_read_r+0x1e>
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	200001a0 	.word	0x200001a0

08004840 <_fstat_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	4c07      	ldr	r4, [pc, #28]	; (8004860 <_fstat_r+0x20>)
 8004844:	2300      	movs	r3, #0
 8004846:	4605      	mov	r5, r0
 8004848:	4608      	mov	r0, r1
 800484a:	4611      	mov	r1, r2
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	f7fc fe76 	bl	800153e <_fstat>
 8004852:	1c43      	adds	r3, r0, #1
 8004854:	d102      	bne.n	800485c <_fstat_r+0x1c>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	b103      	cbz	r3, 800485c <_fstat_r+0x1c>
 800485a:	602b      	str	r3, [r5, #0]
 800485c:	bd38      	pop	{r3, r4, r5, pc}
 800485e:	bf00      	nop
 8004860:	200001a0 	.word	0x200001a0

08004864 <_isatty_r>:
 8004864:	b538      	push	{r3, r4, r5, lr}
 8004866:	4c06      	ldr	r4, [pc, #24]	; (8004880 <_isatty_r+0x1c>)
 8004868:	2300      	movs	r3, #0
 800486a:	4605      	mov	r5, r0
 800486c:	4608      	mov	r0, r1
 800486e:	6023      	str	r3, [r4, #0]
 8004870:	f7fc fe75 	bl	800155e <_isatty>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d102      	bne.n	800487e <_isatty_r+0x1a>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	b103      	cbz	r3, 800487e <_isatty_r+0x1a>
 800487c:	602b      	str	r3, [r5, #0]
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	200001a0 	.word	0x200001a0

08004884 <_init>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	bf00      	nop
 8004888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488a:	bc08      	pop	{r3}
 800488c:	469e      	mov	lr, r3
 800488e:	4770      	bx	lr

08004890 <_fini>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	bf00      	nop
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr
