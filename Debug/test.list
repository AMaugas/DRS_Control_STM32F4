
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a90  08004a90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a98  08004a98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08004b10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004b10  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d239  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000221a  00000000  00000000  0002d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002f4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002fe50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c47  00000000  00000000  00030680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c86  00000000  00000000  000532c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9b48  00000000  00000000  0005cf4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126a95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae0  00000000  00000000  00126b10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004970 	.word	0x08004970

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004970 	.word	0x08004970

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <initializeServoBus>:
 */

#include "HerkulexServo.h"

HerkulexServoBus *initializeServoBus(UART_HandleTypeDef *HUART_Handler)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    HerkulexServoBus *servoBus = (HerkulexServoBus *)malloc(sizeof(HerkulexServoBus));
 80005b8:	2050      	movs	r0, #80	; 0x50
 80005ba:	f003 fae5 	bl	8003b88 <malloc>
 80005be:	4603      	mov	r3, r0
 80005c0:	60bb      	str	r3, [r7, #8]

    if (servoBus != NULL)
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d05e      	beq.n	8000686 <initializeServoBus+0xd6>
    {
        servoBus->m_serial = HUART_Handler;
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	73fb      	strb	r3, [r7, #15]
 80005d2:	e007      	b.n	80005e4 <initializeServoBus+0x34>
        {
            servoBus->m_rx_buffer[i] = 0;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	4413      	add	r3, r2
 80005da:	2200      	movs	r2, #0
 80005dc:	711a      	strb	r2, [r3, #4]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d9f4      	bls.n	80005d4 <initializeServoBus+0x24>
        }
        servoBus->m_last_serial = 0;
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	f04f 0300 	mov.w	r3, #0
 80005f0:	f04f 0400 	mov.w	r4, #0
 80005f4:	e9c2 3404 	strd	r3, r4, [r2, #16]

        servoBus->m_rx_packet.size = 0x00;
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
        servoBus->m_rx_packet.id = 0x00;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2200      	movs	r2, #0
 8000602:	765a      	strb	r2, [r3, #25]
        servoBus->m_rx_packet.cmd = HerkulexCommand_None;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2200      	movs	r2, #0
 8000608:	769a      	strb	r2, [r3, #26]
        servoBus->m_rx_packet.checksum1 = 0x00;
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2200      	movs	r2, #0
 800060e:	76da      	strb	r2, [r3, #27]
        servoBus->m_rx_packet.checksum2 = 0x00;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	2200      	movs	r2, #0
 8000614:	771a      	strb	r2, [r3, #28]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	73bb      	strb	r3, [r7, #14]
 800061a:	e009      	b.n	8000630 <initializeServoBus+0x80>
        {
            *(servoBus->m_rx_packet.data + i) = 0;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	f103 021d 	add.w	r2, r3, #29
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < HERKULEX_PACKET_RX_MAX_DATA; i++)
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	3301      	adds	r3, #1
 800062e:	73bb      	strb	r3, [r7, #14]
 8000630:	7bbb      	ldrb	r3, [r7, #14]
 8000632:	2b03      	cmp	r3, #3
 8000634:	d9f2      	bls.n	800061c <initializeServoBus+0x6c>
        }

        servoBus->m_rx_packet.status_error = HerkulexStatusError_None;
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        servoBus->m_rx_packet.status_detail = HerkulexStatusDetail_None;
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        servoBus->m_rx_packet.error = HerkulexPacketError_None;
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

        servoBus->m_rx_packet_ready = 0;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        for (uint8_t i = 0; i < HERKULEX_SERIAL_TX_BUFFER; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	737b      	strb	r3, [r7, #13]
 800065a:	e009      	b.n	8000670 <initializeServoBus+0xc0>
        {
            *(servoBus->m_tx_buffer + i) = 0;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8000662:	7b7b      	ldrb	r3, [r7, #13]
 8000664:	4413      	add	r3, r2
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < HERKULEX_SERIAL_TX_BUFFER; i++)
 800066a:	7b7b      	ldrb	r3, [r7, #13]
 800066c:	3301      	adds	r3, #1
 800066e:	737b      	strb	r3, [r7, #13]
 8000670:	7b7b      	ldrb	r3, [r7, #13]
 8000672:	2b28      	cmp	r3, #40	; 0x28
 8000674:	d9f2      	bls.n	800065c <initializeServoBus+0xac>
        }
        servoBus->m_move_tags = 0;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	2200      	movs	r2, #0
 800067a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        servoBus->m_schedule_state = HerkulexScheduleState_None;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	2200      	movs	r2, #0
 8000682:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
    }
    return servoBus;
 8000686:	68bb      	ldr	r3, [r7, #8]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bd90      	pop	{r4, r7, pc}

08000690 <sendPacket>:

void sendPacket(HerkulexServoBus *self, uint8_t id, HerkulexCommand cmd, uint8_t *pData, uint8_t dataLen)
{
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	b08d      	sub	sp, #52	; 0x34
 8000694:	af04      	add	r7, sp, #16
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	460b      	mov	r3, r1
 800069c:	72fb      	strb	r3, [r7, #11]
 800069e:	4613      	mov	r3, r2
 80006a0:	72bb      	strb	r3, [r7, #10]
    uint8_t checksum1;
    uint8_t checksum2;
    uint8_t packetSize = 7 + dataLen;
 80006a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80006a6:	3307      	adds	r3, #7
 80006a8:	773b      	strb	r3, [r7, #28]
    uint8_t packet[7] = {0xFF, 0xFF, packetSize, id, (uint8_t)cmd, 0x00, 0x00};
 80006aa:	23ff      	movs	r3, #255	; 0xff
 80006ac:	753b      	strb	r3, [r7, #20]
 80006ae:	23ff      	movs	r3, #255	; 0xff
 80006b0:	757b      	strb	r3, [r7, #21]
 80006b2:	7f3b      	ldrb	r3, [r7, #28]
 80006b4:	75bb      	strb	r3, [r7, #22]
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	75fb      	strb	r3, [r7, #23]
 80006ba:	7abb      	ldrb	r3, [r7, #10]
 80006bc:	763b      	strb	r3, [r7, #24]
 80006be:	2300      	movs	r3, #0
 80006c0:	767b      	strb	r3, [r7, #25]
 80006c2:	2300      	movs	r3, #0
 80006c4:	76bb      	strb	r3, [r7, #26]
    /* uint8_t packet[packetSize]; */

    packet[0] = 0xFF;
 80006c6:	23ff      	movs	r3, #255	; 0xff
 80006c8:	753b      	strb	r3, [r7, #20]
    packet[1] = 0xFF;
 80006ca:	23ff      	movs	r3, #255	; 0xff
 80006cc:	757b      	strb	r3, [r7, #21]
    packet[2] = packetSize;
 80006ce:	7f3b      	ldrb	r3, [r7, #28]
 80006d0:	75bb      	strb	r3, [r7, #22]
    packet[3] = id;
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	75fb      	strb	r3, [r7, #23]
    packet[4] = (uint8_t)cmd;
 80006d6:	7abb      	ldrb	r3, [r7, #10]
 80006d8:	763b      	strb	r3, [r7, #24]

    checksum1 = packetSize ^ id ^ (uint8_t)cmd;
 80006da:	7f3a      	ldrb	r2, [r7, #28]
 80006dc:	7afb      	ldrb	r3, [r7, #11]
 80006de:	4053      	eors	r3, r2
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	7abb      	ldrb	r3, [r7, #10]
 80006e4:	4053      	eors	r3, r2
 80006e6:	77fb      	strb	r3, [r7, #31]

    if (pData && dataLen > 0)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d015      	beq.n	800071a <sendPacket+0x8a>
 80006ee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d011      	beq.n	800071a <sendPacket+0x8a>
    {
        for (uint8_t i = 0; i < dataLen; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	77bb      	strb	r3, [r7, #30]
 80006fa:	e009      	b.n	8000710 <sendPacket+0x80>
        {
            checksum1 ^= *(pData + i);
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	781a      	ldrb	r2, [r3, #0]
 8000704:	7ffb      	ldrb	r3, [r7, #31]
 8000706:	4053      	eors	r3, r2
 8000708:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < dataLen; i++)
 800070a:	7fbb      	ldrb	r3, [r7, #30]
 800070c:	3301      	adds	r3, #1
 800070e:	77bb      	strb	r3, [r7, #30]
 8000710:	7fba      	ldrb	r2, [r7, #30]
 8000712:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000716:	429a      	cmp	r2, r3
 8000718:	d3f0      	bcc.n	80006fc <sendPacket+0x6c>
            /* packet[7 + i] = *(pData + i); */
        }
    }

    checksum1 = checksum1 & 0xFE;
 800071a:	7ffb      	ldrb	r3, [r7, #31]
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	77fb      	strb	r3, [r7, #31]
    checksum2 = (~checksum1) & 0xFE;
 8000722:	7ffb      	ldrb	r3, [r7, #31]
 8000724:	43db      	mvns	r3, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f023 0301 	bic.w	r3, r3, #1
 800072c:	76fb      	strb	r3, [r7, #27]

    packet[5] = checksum1;
 800072e:	7ffb      	ldrb	r3, [r7, #31]
 8000730:	767b      	strb	r3, [r7, #25]
    packet[6] = checksum2;
 8000732:	7efb      	ldrb	r3, [r7, #27]
 8000734:	76bb      	strb	r3, [r7, #26]

    HAL_UART_Transmit(self->m_serial, packet, 7, 10);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	f107 0114 	add.w	r1, r7, #20
 800073e:	230a      	movs	r3, #10
 8000740:	2207      	movs	r2, #7
 8000742:	f002 fcd8 	bl	80030f6 <HAL_UART_Transmit>
    printf("Data transmitted: 0x%.2X 0x%.2X 0x%.2X 0x%.2X 0x%.2X 0x%.2X 0x%.2X", packet[0], packet[1], packet[2], packet[3], packet[4], packet[5], packet[6]);
 8000746:	7d3b      	ldrb	r3, [r7, #20]
 8000748:	461c      	mov	r4, r3
 800074a:	7d7b      	ldrb	r3, [r7, #21]
 800074c:	461d      	mov	r5, r3
 800074e:	7dbb      	ldrb	r3, [r7, #22]
 8000750:	461e      	mov	r6, r3
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	7e3a      	ldrb	r2, [r7, #24]
 8000756:	7e79      	ldrb	r1, [r7, #25]
 8000758:	7eb8      	ldrb	r0, [r7, #26]
 800075a:	9003      	str	r0, [sp, #12]
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	4633      	mov	r3, r6
 8000764:	462a      	mov	r2, r5
 8000766:	4621      	mov	r1, r4
 8000768:	4816      	ldr	r0, [pc, #88]	; (80007c4 <sendPacket+0x134>)
 800076a:	f003 fac5 	bl	8003cf8 <iprintf>

    if (pData && dataLen > 0)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d01f      	beq.n	80007b4 <sendPacket+0x124>
 8000774:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000778:	2b00      	cmp	r3, #0
 800077a:	d01b      	beq.n	80007b4 <sendPacket+0x124>
    {
        HAL_UART_Transmit(self->m_serial, pData, dataLen, 10);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000784:	b29a      	uxth	r2, r3
 8000786:	230a      	movs	r3, #10
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	f002 fcb4 	bl	80030f6 <HAL_UART_Transmit>
        for (uint8_t i = 0; i < dataLen; i++)
 800078e:	2300      	movs	r3, #0
 8000790:	777b      	strb	r3, [r7, #29]
 8000792:	e00a      	b.n	80007aa <sendPacket+0x11a>
        {
            printf(" 0x%.2X", *(pData + i));
 8000794:	7f7b      	ldrb	r3, [r7, #29]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <sendPacket+0x138>)
 80007a0:	f003 faaa 	bl	8003cf8 <iprintf>
        for (uint8_t i = 0; i < dataLen; i++)
 80007a4:	7f7b      	ldrb	r3, [r7, #29]
 80007a6:	3301      	adds	r3, #1
 80007a8:	777b      	strb	r3, [r7, #29]
 80007aa:	7f7a      	ldrb	r2, [r7, #29]
 80007ac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d3ef      	bcc.n	8000794 <sendPacket+0x104>
        }
    }

    printf("\n\r");
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <sendPacket+0x13c>)
 80007b6:	f003 fa9f 	bl	8003cf8 <iprintf>
    //    for (uint8_t i = 0; i < packetSize; i++)
    //    {
    //        printf("0x%.2X ", packet[i]);
    //    }
    //    printf("\n\r");
}
 80007ba:	bf00      	nop
 80007bc:	3724      	adds	r7, #36	; 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c2:	bf00      	nop
 80007c4:	08004988 	.word	0x08004988
 80007c8:	080049cc 	.word	0x080049cc
 80007cc:	080049d4 	.word	0x080049d4

080007d0 <prepareSynchronizedMove>:
    self->m_schedule_state = HerkulexScheduleState_IndividualMove;
    self->m_move_tags = 0;
}

void prepareSynchronizedMove(HerkulexServoBus *self, uint16_t time_ms)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	460b      	mov	r3, r1
 80007da:	817b      	strh	r3, [r7, #10]
    uint8_t playtime = (uint8_t)(time_ms / 11.2f);
 80007dc:	897b      	ldrh	r3, [r7, #10]
 80007de:	ee07 3a90 	vmov	s15, r3
 80007e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007e6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000820 <prepareSynchronizedMove+0x50>
 80007ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80007f6:	793b      	ldrb	r3, [r7, #4]
 80007f8:	75fb      	strb	r3, [r7, #23]

    self->m_schedule_state = HerkulexScheduleState_SynchronizedMove;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2202      	movs	r2, #2
 80007fe:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
    *(self->m_tx_buffer + 0) = playtime;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	7dfa      	ldrb	r2, [r7, #23]
 8000806:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    self->m_move_tags = 0;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2200      	movs	r2, #0
 800080e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 8000812:	bf00      	nop
 8000814:	371c      	adds	r7, #28
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	41333333 	.word	0x41333333

08000824 <executeMove>:

void executeMove(HerkulexServoBus *self)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af02      	add	r7, sp, #8
 800082a:	6078      	str	r0, [r7, #4]
    uint8_t dataLen;

    switch (self->m_schedule_state)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000832:	2b01      	cmp	r3, #1
 8000834:	d003      	beq.n	800083e <executeMove+0x1a>
 8000836:	2b02      	cmp	r3, #2
 8000838:	d014      	beq.n	8000864 <executeMove+0x40>
 800083a:	2b00      	cmp	r3, #0
        dataLen = 1 + self->m_move_tags * 4;
        sendPacket(self, HERKULEX_BROADCAST_ID, HerkulexCommand_SJog, self->m_tx_buffer, dataLen);
        break;

    case HerkulexScheduleState_None:
        break;
 800083c:	e025      	b.n	800088a <executeMove+0x66>
        dataLen = self->m_move_tags * 5;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8000844:	461a      	mov	r2, r3
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	4413      	add	r3, r2
 800084a:	73fb      	strb	r3, [r7, #15]
        sendPacket(self, HERKULEX_BROADCAST_ID, HerkulexCommand_IJog, self->m_tx_buffer, dataLen);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	4613      	mov	r3, r2
 8000858:	2205      	movs	r2, #5
 800085a:	21fe      	movs	r1, #254	; 0xfe
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff17 	bl	8000690 <sendPacket>
        break;
 8000862:	e012      	b.n	800088a <executeMove+0x66>
        dataLen = 1 + self->m_move_tags * 4;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3301      	adds	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
        sendPacket(self, HERKULEX_BROADCAST_ID, HerkulexCommand_SJog, self->m_tx_buffer, dataLen);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	4613      	mov	r3, r2
 800087e:	2206      	movs	r2, #6
 8000880:	21fe      	movs	r1, #254	; 0xfe
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ff04 	bl	8000690 <sendPacket>
        break;
 8000888:	bf00      	nop
    }

    self->m_schedule_state = HerkulexScheduleState_None;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
    self->m_move_tags = 0;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <initializeServo>:

HerkulexPacket m_response = {0, 0, HerkulexCommand_None, 0, 0, {0}, HerkulexStatusError_None, HerkulexStatusDetail_None, HerkulexPacketError_None};
uint8_t tx_buffer[5] = {0, 0, 0, 0, 0};

HerkulexServo *initializeServo(HerkulexServoBus *servoBus, uint8_t id)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
    HerkulexServo *servo = (HerkulexServo *)malloc(sizeof(HerkulexServo));
 80008b0:	2010      	movs	r0, #16
 80008b2:	f003 f969 	bl	8003b88 <malloc>
 80008b6:	4603      	mov	r3, r0
 80008b8:	60fb      	str	r3, [r7, #12]

    if (servo != NULL)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d011      	beq.n	80008e4 <initializeServo+0x40>
    {
        servo->m_bus = servoBus;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
        servo->m_id = id;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	78fa      	ldrb	r2, [r7, #3]
 80008ca:	711a      	strb	r2, [r3, #4]
        servo->m_led = HerkulexLed_Off;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2200      	movs	r2, #0
 80008d0:	715a      	strb	r2, [r3, #5]
        servo->m_position_control_mode = 1;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2201      	movs	r2, #1
 80008d6:	719a      	strb	r2, [r3, #6]
        servo->m_response = &m_response;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <initializeServo+0x4c>)
 80008dc:	609a      	str	r2, [r3, #8]
        servo->m_tx_buffer = tx_buffer;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <initializeServo+0x50>)
 80008e2:	60da      	str	r2, [r3, #12]
    }

    return servo;
 80008e4:	68fb      	ldr	r3, [r7, #12]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	20000098 	.word	0x20000098

080008f8 <jog>:

void jog(HerkulexServo *servo, uint8_t jog_lsb, uint8_t jog_msb, uint8_t set, uint8_t playtime)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	4608      	mov	r0, r1
 8000902:	4611      	mov	r1, r2
 8000904:	461a      	mov	r2, r3
 8000906:	4603      	mov	r3, r0
 8000908:	70fb      	strb	r3, [r7, #3]
 800090a:	460b      	mov	r3, r1
 800090c:	70bb      	strb	r3, [r7, #2]
 800090e:	4613      	mov	r3, r2
 8000910:	707b      	strb	r3, [r7, #1]
    uint8_t idx_offset;

    switch (servo->m_bus->m_schedule_state)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800091a:	2b01      	cmp	r3, #1
 800091c:	d029      	beq.n	8000972 <jog+0x7a>
 800091e:	2b02      	cmp	r3, #2
 8000920:	d06f      	beq.n	8000a02 <jog+0x10a>
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <jog+0x30>
        servo->m_bus->m_tx_buffer[idx_offset + 3] = servo->m_id;

        servo->m_bus->m_move_tags++;
        break;
    default:
        break;
 8000926:	e0aa      	b.n	8000a7e <jog+0x186>
        *(servo->m_tx_buffer + 0) = jog_lsb;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	78fa      	ldrb	r2, [r7, #3]
 800092e:	701a      	strb	r2, [r3, #0]
        *(servo->m_tx_buffer + 1) = jog_msb;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	78ba      	ldrb	r2, [r7, #2]
 8000938:	701a      	strb	r2, [r3, #0]
        *(servo->m_tx_buffer + 2) = set;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	3302      	adds	r3, #2
 8000940:	787a      	ldrb	r2, [r7, #1]
 8000942:	701a      	strb	r2, [r3, #0]
        *(servo->m_tx_buffer + 3) = servo->m_id;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	3303      	adds	r3, #3
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	7912      	ldrb	r2, [r2, #4]
 800094e:	701a      	strb	r2, [r3, #0]
        *(servo->m_tx_buffer + 4) = playtime;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	3304      	adds	r3, #4
 8000956:	7e3a      	ldrb	r2, [r7, #24]
 8000958:	701a      	strb	r2, [r3, #0]
        sendPacket(servo->m_bus, HERKULEX_BROADCAST_ID, HerkulexCommand_IJog, servo->m_tx_buffer, 5);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68da      	ldr	r2, [r3, #12]
 8000962:	2305      	movs	r3, #5
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	4613      	mov	r3, r2
 8000968:	2205      	movs	r2, #5
 800096a:	21fe      	movs	r1, #254	; 0xfe
 800096c:	f7ff fe90 	bl	8000690 <sendPacket>
        break;
 8000970:	e085      	b.n	8000a7e <jog+0x186>
        if (((servo->m_bus->m_move_tags + 1) * 5) > HERKULEX_SERIAL_TX_BUFFER)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	2b29      	cmp	r3, #41	; 0x29
 8000984:	dc78      	bgt.n	8000a78 <jog+0x180>
        idx_offset = servo->m_bus->m_move_tags * 5; /* 5 bytes per tag */
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800098e:	461a      	mov	r2, r3
 8000990:	0092      	lsls	r2, r2, #2
 8000992:	4413      	add	r3, r2
 8000994:	73fb      	strb	r3, [r7, #15]
        *(servo->m_bus->m_tx_buffer + idx_offset) = jog_lsb;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	4413      	add	r3, r2
 80009a2:	78fa      	ldrb	r2, [r7, #3]
 80009a4:	701a      	strb	r2, [r3, #0]
        *(servo->m_bus->m_tx_buffer + idx_offset + 1) = jog_msb;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	3301      	adds	r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	78ba      	ldrb	r2, [r7, #2]
 80009b6:	701a      	strb	r2, [r3, #0]
        *(servo->m_bus->m_tx_buffer + idx_offset + 2) = set;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	3302      	adds	r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	787a      	ldrb	r2, [r7, #1]
 80009c8:	701a      	strb	r2, [r3, #0]
        *(servo->m_bus->m_tx_buffer + idx_offset + 3) = servo->m_id;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	3303      	adds	r3, #3
 80009d6:	4413      	add	r3, r2
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	7912      	ldrb	r2, [r2, #4]
 80009dc:	701a      	strb	r2, [r3, #0]
        *(servo->m_bus->m_tx_buffer + idx_offset + 4) = playtime;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	3304      	adds	r3, #4
 80009ea:	4413      	add	r3, r2
 80009ec:	7e3a      	ldrb	r2, [r7, #24]
 80009ee:	701a      	strb	r2, [r3, #0]
        servo->m_bus->m_move_tags++;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 80009f8:	3201      	adds	r2, #1
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        break;
 8000a00:	e03d      	b.n	8000a7e <jog+0x186>
        if ((1 + (servo->m_bus->m_move_tags + 1) * 4) > HERKULEX_SERIAL_TX_BUFFER)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	3301      	adds	r3, #1
 8000a10:	2b29      	cmp	r3, #41	; 0x29
 8000a12:	dc33      	bgt.n	8000a7c <jog+0x184>
        idx_offset = 1 + servo->m_bus->m_move_tags * 4; /* 4 bytes per tag, 1 byte offset for time */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	3301      	adds	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
        servo->m_bus->m_tx_buffer[idx_offset] = jog_lsb;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	78fa      	ldrb	r2, [r7, #3]
 8000a2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        servo->m_bus->m_tx_buffer[idx_offset + 1] = jog_msb;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	78ba      	ldrb	r2, [r7, #2]
 8000a3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        servo->m_bus->m_tx_buffer[idx_offset + 2] = set;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	787a      	ldrb	r2, [r7, #1]
 8000a4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        servo->m_bus->m_tx_buffer[idx_offset + 3] = servo->m_id;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	3303      	adds	r3, #3
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	7909      	ldrb	r1, [r1, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	460a      	mov	r2, r1
 8000a62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        servo->m_bus->m_move_tags++;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8000a6e:	3201      	adds	r2, #1
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        break;
 8000a76:	e002      	b.n	8000a7e <jog+0x186>
            return; /* No room for another move tag, exit */
 8000a78:	bf00      	nop
 8000a7a:	e000      	b.n	8000a7e <jog+0x186>
            return; /* No room for another move tag, exit */
 8000a7c:	bf00      	nop
    }
}
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <setPosition>:

void setPosition(HerkulexServo *servo, float degree, uint8_t time_ms, HerkulexLed led)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a90:	460b      	mov	r3, r1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71bb      	strb	r3, [r7, #6]
    uint16_t pos;

    pos = (uint16_t)(512 + (degree / 0.325f));
 8000a98:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a9c:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000b20 <setPosition+0x9c>
 8000aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aa4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000b24 <setPosition+0xa0>
 8000aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ab0:	ee17 3a90 	vmov	r3, s15
 8000ab4:	82bb      	strh	r3, [r7, #20]

    uint8_t playtime = (uint8_t)(time_ms / 11.2f);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ac0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000b28 <setPosition+0xa4>
 8000ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000acc:	edc7 7a00 	vstr	s15, [r7]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	74fb      	strb	r3, [r7, #19]

    if (!servo->m_position_control_mode)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	799b      	ldrb	r3, [r3, #6]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d01d      	beq.n	8000b18 <setPosition+0x94>

    uint8_t jog_lsb;
    uint8_t jog_msb;
    uint8_t set;

    jog_lsb = (uint8_t)pos;
 8000adc:	8abb      	ldrh	r3, [r7, #20]
 8000ade:	74bb      	strb	r3, [r7, #18]
    jog_msb = (uint8_t)(pos >> 8);
 8000ae0:	8abb      	ldrh	r3, [r7, #20]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	747b      	strb	r3, [r7, #17]

    if (led != HerkulexLed_Ignore)
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	2bff      	cmp	r3, #255	; 0xff
 8000aec:	d006      	beq.n	8000afc <setPosition+0x78>
    {
        servo->m_led = led;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	79ba      	ldrb	r2, [r7, #6]
 8000af2:	715a      	strb	r2, [r3, #5]
        set = (uint8_t)(led << 2);
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	75fb      	strb	r3, [r7, #23]
 8000afa:	e003      	b.n	8000b04 <setPosition+0x80>
    }
    else
    {
        set = (uint8_t)(servo->m_led << 2);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	795b      	ldrb	r3, [r3, #5]
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	75fb      	strb	r3, [r7, #23]
    }

    jog(servo, jog_lsb, jog_msb, set, playtime);
 8000b04:	7df8      	ldrb	r0, [r7, #23]
 8000b06:	7c7a      	ldrb	r2, [r7, #17]
 8000b08:	7cb9      	ldrb	r1, [r7, #18]
 8000b0a:	7cfb      	ldrb	r3, [r7, #19]
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	4603      	mov	r3, r0
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f7ff fef1 	bl	80008f8 <jog>
 8000b16:	e000      	b.n	8000b1a <setPosition+0x96>
        return;
 8000b18:	bf00      	nop
}
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	3ea66666 	.word	0x3ea66666
 8000b24:	44000000 	.word	0x44000000
 8000b28:	41333333 	.word	0x41333333

08000b2c <setTorqueOn>:

    jog(servo, jog_lsb, jog_msb, set, playtime);
}

void setTorqueOn(HerkulexServo *servo)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    writeRam(servo, HerkulexRamRegister_TorqueControl, 0x60);
 8000b34:	2260      	movs	r2, #96	; 0x60
 8000b36:	2134      	movs	r1, #52	; 0x34
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f81b 	bl	8000b74 <writeRam>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <setLedColor>:
{
    writeRam(servo, HerkulexRamRegister_TorqueControl, 0x40);
}

void setLedColor(HerkulexServo *servo, HerkulexLed color)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
    if (color == HerkulexLed_Ignore)
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	2bff      	cmp	r3, #255	; 0xff
 8000b56:	d009      	beq.n	8000b6c <setLedColor+0x26>
    {
        return;
    }

    servo->m_led = color;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	78fa      	ldrb	r2, [r7, #3]
 8000b5c:	715a      	strb	r2, [r3, #5]
    writeRam(servo, HerkulexRamRegister_LedControl, (uint8_t)color);
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	461a      	mov	r2, r3
 8000b62:	2135      	movs	r1, #53	; 0x35
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 f805 	bl	8000b74 <writeRam>
 8000b6a:	e000      	b.n	8000b6e <setLedColor+0x28>
        return;
 8000b6c:	bf00      	nop
}
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <writeRam>:

void writeRam(HerkulexServo *servo, HerkulexRamRegister reg, uint8_t val)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
 8000b80:	4613      	mov	r3, r2
 8000b82:	70bb      	strb	r3, [r7, #2]
    *(servo->m_tx_buffer + 0) = (uint8_t)reg;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	78fa      	ldrb	r2, [r7, #3]
 8000b8a:	701a      	strb	r2, [r3, #0]
    *(servo->m_tx_buffer + 1) = 1;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	3301      	adds	r3, #1
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
    *(servo->m_tx_buffer + 2) = val;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	78ba      	ldrb	r2, [r7, #2]
 8000b9e:	701a      	strb	r2, [r3, #0]

    sendPacket(servo->m_bus, servo->m_id, HerkulexCommand_RamWrite, servo->m_tx_buffer, 3);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7919      	ldrb	r1, [r3, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	2303      	movs	r3, #3
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	f7ff fd6c 	bl	8000690 <sendPacket>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_DMA_Init+0x3c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <MX_DMA_Init+0x3c>)
 8000bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_DMA_Init+0x3c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	200b      	movs	r0, #11
 8000be8:	f001 f871 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bec:	200b      	movs	r0, #11
 8000bee:	f001 f88a 	bl	8001d06 <HAL_NVIC_EnableIRQ>

}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a29      	ldr	r2, [pc, #164]	; (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	4816      	ldr	r0, [pc, #88]	; (8000cc8 <MX_GPIO_Init+0xc8>)
 8000c70:	f001 fd00 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_GPIO_Init+0xcc>)
 8000c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <MX_GPIO_Init+0xd0>)
 8000c8a:	f001 fb61 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000c8e:	2320      	movs	r3, #32
 8000c90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <MX_GPIO_Init+0xc8>)
 8000ca6:	f001 fb53 	bl	8002350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2028      	movs	r0, #40	; 0x28
 8000cb0:	f001 f80d 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cb4:	2028      	movs	r0, #40	; 0x28
 8000cb6:	f001 f826 	bl	8001d06 <HAL_NVIC_EnableIRQ>

}
 8000cba:	bf00      	nop
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	10210000 	.word	0x10210000
 8000cd0:	40020800 	.word	0x40020800

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b092      	sub	sp, #72	; 0x48
 8000cd8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cda:	f000 fe89 	bl	80019f0 <HAL_Init>

	/* USER CODE BEGIN Init */
	buttonPressed = 0;
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <main+0x110>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
	receivedUART = 0;
 8000ce4:	4b40      	ldr	r3, [pc, #256]	; (8000de8 <main+0x114>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
	passed = 0;
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <main+0x118>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]

	HerkulexServoBus *herkulexBus = initializeServoBus(&huart5);
 8000cf0:	483f      	ldr	r0, [pc, #252]	; (8000df0 <main+0x11c>)
 8000cf2:	f7ff fc5d 	bl	80005b0 <initializeServoBus>
 8000cf6:	6438      	str	r0, [r7, #64]	; 0x40
	HerkulexServo *servo_chevilleDroite = initializeServo(herkulexBus, 0xDA);
 8000cf8:	21da      	movs	r1, #218	; 0xda
 8000cfa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000cfc:	f7ff fdd2 	bl	80008a4 <initializeServo>
 8000d00:	63f8      	str	r0, [r7, #60]	; 0x3c
	HerkulexServo *servo_genouDroit = initializeServo(herkulexBus, 0xDC);
 8000d02:	21dc      	movs	r1, #220	; 0xdc
 8000d04:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d06:	f7ff fdcd 	bl	80008a4 <initializeServo>
 8000d0a:	63b8      	str	r0, [r7, #56]	; 0x38
	HerkulexServo *servo_hancheDroite = initializeServo(herkulexBus, 0xDB);
 8000d0c:	21db      	movs	r1, #219	; 0xdb
 8000d0e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d10:	f7ff fdc8 	bl	80008a4 <initializeServo>
 8000d14:	6378      	str	r0, [r7, #52]	; 0x34
	HerkulexServo *servo_bassinDroit = initializeServo(herkulexBus, 0xCB);
 8000d16:	21cb      	movs	r1, #203	; 0xcb
 8000d18:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d1a:	f7ff fdc3 	bl	80008a4 <initializeServo>
 8000d1e:	6338      	str	r0, [r7, #48]	; 0x30
	HerkulexServo *servo_bassinGauche = initializeServo(herkulexBus, 0xBB);
 8000d20:	21bb      	movs	r1, #187	; 0xbb
 8000d22:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d24:	f7ff fdbe 	bl	80008a4 <initializeServo>
 8000d28:	62f8      	str	r0, [r7, #44]	; 0x2c
	HerkulexServo *servo_hancheGauche = initializeServo(herkulexBus, 0xDD);
 8000d2a:	21dd      	movs	r1, #221	; 0xdd
 8000d2c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d2e:	f7ff fdb9 	bl	80008a4 <initializeServo>
 8000d32:	62b8      	str	r0, [r7, #40]	; 0x28
	HerkulexServo *servo_genouGauche = initializeServo(herkulexBus, 0xCA);
 8000d34:	21ca      	movs	r1, #202	; 0xca
 8000d36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d38:	f7ff fdb4 	bl	80008a4 <initializeServo>
 8000d3c:	6278      	str	r0, [r7, #36]	; 0x24
	HerkulexServo *servo_chevilleGauche = initializeServo(herkulexBus, 0xCC);
 8000d3e:	21cc      	movs	r1, #204	; 0xcc
 8000d40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d42:	f7ff fdaf 	bl	80008a4 <initializeServo>
 8000d46:	6238      	str	r0, [r7, #32]

	HerkulexServo *articulations[8] = {servo_chevilleDroite, servo_genouDroit, servo_hancheDroite, servo_bassinDroit, servo_bassinGauche, servo_hancheGauche, servo_genouGauche, servo_chevilleGauche};
 8000d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	61fb      	str	r3, [r7, #28]
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d68:	f000 f846 	bl	8000df8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d6c:	f7ff ff48 	bl	8000c00 <MX_GPIO_Init>
	MX_UART5_Init();
 8000d70:	f000 fce6 	bl	8001740 <MX_UART5_Init>
	MX_USART2_UART_Init();
 8000d74:	f000 fd0e 	bl	8001794 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8000d78:	f7ff ff22 	bl	8000bc0 <MX_DMA_Init>
	/* USER CODE BEGIN 2 */
	for (uint8_t i = 0; i < 8; i++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d82:	e00f      	b.n	8000da4 <main+0xd0>
	{
		setTorqueOn(articulations[i]);
 8000d84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000d8e:	4413      	add	r3, r2
 8000d90:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fec9 	bl	8000b2c <setTorqueOn>
	for (uint8_t i = 0; i < 8; i++)
 8000d9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000da4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000da8:	2b07      	cmp	r3, #7
 8000daa:	d9eb      	bls.n	8000d84 <main+0xb0>
	}

	initialisePosition(articulations);
 8000dac:	463b      	mov	r3, r7
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 fb1c 	bl	80013ec <initialisePosition>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2120      	movs	r1, #32
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <main+0x120>)
 8000dba:	f001 fc5b 	bl	8002674 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (buttonPressed)
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <main+0x110>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0fb      	beq.n	8000dbe <main+0xea>
		{
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2120      	movs	r1, #32
 8000dca:	480a      	ldr	r0, [pc, #40]	; (8000df4 <main+0x120>)
 8000dcc:	f001 fc52 	bl	8002674 <HAL_GPIO_WritePin>
			walk(articulations, 10);
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	210a      	movs	r1, #10
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f8a9 	bl	8000f2c <walk>
			buttonPressed = 0;
 8000dda:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <main+0x110>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
		if (buttonPressed)
 8000de0:	e7ed      	b.n	8000dbe <main+0xea>
 8000de2:	bf00      	nop
 8000de4:	200000b1 	.word	0x200000b1
 8000de8:	200000b2 	.word	0x200000b2
 8000dec:	200000b0 	.word	0x200000b0
 8000df0:	200000b4 	.word	0x200000b4
 8000df4:	40020000 	.word	0x40020000

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2234      	movs	r2, #52	; 0x34
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fec6 	bl	8003b98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage 
  */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <SystemClock_Config+0xb8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <SystemClock_Config+0xb8>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <SystemClock_Config+0xb8>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <SystemClock_Config+0xbc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e44:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <SystemClock_Config+0xbc>)
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <SystemClock_Config+0xbc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks 
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e60:	2310      	movs	r3, #16
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fe9b 	bl	8002ba8 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000e78:	f000 f850 	bl	8000f1c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks 
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fc1e 	bl	80026d8 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000ea2:	f000 f83b 	bl	8000f1c <Error_Handler>
	}
}
 8000ea6:	bf00      	nop
 8000ea8:	3750      	adds	r7, #80	; 0x50
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <__io_putchar+0x20>)
 8000eca:	f002 f914 	bl	80030f6 <HAL_UART_Transmit>

	return ch;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000f4 	.word	0x200000f4

08000edc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
	buttonPressed = 1;
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	200000b1 	.word	0x200000b1

08000efc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 * the HAL_UART_RxCpltCallback could be implemented in the user file
	 * */
	receivedUART = 1;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_UART_RxCpltCallback+0x1c>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200000b2 	.word	0x200000b2

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <walk>:
 */

#include "servoControl.h"

void walk(HerkulexServo **articulations, uint8_t numberOfStep)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
    uint16_t walkTime = 1120;
 8000f38:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8000f3c:	81bb      	strh	r3, [r7, #12]
    WalkPhase phase = WalkPhase_None;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
    uint8_t step = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73bb      	strb	r3, [r7, #14]

    while (step < numberOfStep)
 8000f46:	e245      	b.n	80013d4 <walk+0x4a8>
    {
        switch (phase)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	f200 8241 	bhi.w	80013d2 <walk+0x4a6>
 8000f50:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <walk+0x2c>)
 8000f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f56:	bf00      	nop
 8000f58:	08000f75 	.word	0x08000f75
 8000f5c:	08000f87 	.word	0x08000f87
 8000f60:	08001043 	.word	0x08001043
 8000f64:	080010e7 	.word	0x080010e7
 8000f68:	080011a1 	.word	0x080011a1
 8000f6c:	08001261 	.word	0x08001261
 8000f70:	0800131d 	.word	0x0800131d
        {
        case WalkPhase_None:
            if (step == 0)
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <walk+0x54>
            {
                phase = WalkPhase_One;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e229      	b.n	80013d4 <walk+0x4a8>
            }
            else
            {
                phase = WalkPhase_Three;
 8000f80:	2303      	movs	r3, #3
 8000f82:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8000f84:	e226      	b.n	80013d4 <walk+0x4a8>

        case WalkPhase_One:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, walkTime);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	89ba      	ldrh	r2, [r7, #12]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fc1d 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + bassinDroit), 22.5f, 0, HerkulexLed_Blue);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	330c      	adds	r3, #12
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8001258 <walk+0x32c>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd6d 	bl	8000a84 <setPosition>
            setPosition(*(articulations + bassinGauche), 22.5f, 0, HerkulexLed_Blue);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3310      	adds	r3, #16
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8001258 <walk+0x32c>
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fd63 	bl	8000a84 <setPosition>
            setPosition(*(articulations + chevilleDroite), -20.0f, 0, HerkulexLed_Blue);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fd5a 	bl	8000a84 <setPosition>
            setPosition(*(articulations + chevilleGauche), -20.0f, 0, HerkulexLed_Blue);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	331c      	adds	r3, #28
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	2100      	movs	r1, #0
 8000fda:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fd50 	bl	8000a84 <setPosition>
            // setTorqueOff(*(articulations + chevilleGauche));

            executeMove((**(articulations + 0)).m_bus);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fc1a 	bl	8000824 <executeMove>
            setLedColor(*(articulations + genouGauche), HerkulexLed_Blue);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3318      	adds	r3, #24
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fda4 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + genouDroit), HerkulexLed_Blue);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3304      	adds	r3, #4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2102      	movs	r1, #2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fd9d 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + hancheGauche), HerkulexLed_Blue);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3314      	adds	r3, #20
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2102      	movs	r1, #2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd96 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + hancheDroite), HerkulexLed_Blue);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3308      	adds	r3, #8
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2102      	movs	r1, #2
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fd8f 	bl	8000b46 <setLedColor>
            HAL_Delay(walkTime);
 8001028:	89bb      	ldrh	r3, [r7, #12]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fd52 	bl	8001ad4 <HAL_Delay>
            setTorqueOn(*(articulations + chevilleGauche));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	331c      	adds	r3, #28
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fd78 	bl	8000b2c <setTorqueOn>
            phase = WalkPhase_Two;
 800103c:	2302      	movs	r3, #2
 800103e:	73fb      	strb	r3, [r7, #15]
            break;
 8001040:	e1c8      	b.n	80013d4 <walk+0x4a8>

        case WalkPhase_Two:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, walkTime);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	89ba      	ldrh	r2, [r7, #12]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fbbf 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + hancheGauche), 30.0f, 0, HerkulexLed_Cyan);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3314      	adds	r3, #20
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2203      	movs	r2, #3
 800105a:	2100      	movs	r1, #0
 800105c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fd0f 	bl	8000a84 <setPosition>
            setPosition(*(articulations + genouGauche), -30.0f, 0, HerkulexLed_Cyan);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3318      	adds	r3, #24
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2203      	movs	r2, #3
 800106e:	2100      	movs	r1, #0
 8001070:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fd05 	bl	8000a84 <setPosition>

            executeMove((**(articulations + 0)).m_bus);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fbcf 	bl	8000824 <executeMove>
            setLedColor(*(articulations + bassinDroit), HerkulexLed_Cyan);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	330c      	adds	r3, #12
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2103      	movs	r1, #3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fd59 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + bassinGauche), HerkulexLed_Cyan);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3310      	adds	r3, #16
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2103      	movs	r1, #3
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fd52 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + chevilleDroite), HerkulexLed_Cyan);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2103      	movs	r1, #3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fd4c 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + chevilleGauche), HerkulexLed_Cyan);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	331c      	adds	r3, #28
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2103      	movs	r1, #3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fd45 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + genouDroit), HerkulexLed_Cyan);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3304      	adds	r3, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2103      	movs	r1, #3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fd3e 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + hancheDroite), HerkulexLed_Cyan);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3308      	adds	r3, #8
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2103      	movs	r1, #3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fd37 	bl	8000b46 <setLedColor>
            HAL_Delay(walkTime);
 80010d8:	89bb      	ldrh	r3, [r7, #12]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fcfa 	bl	8001ad4 <HAL_Delay>
            phase = WalkPhase_Three;
 80010e0:	2303      	movs	r3, #3
 80010e2:	73fb      	strb	r3, [r7, #15]
            break;
 80010e4:	e176      	b.n	80013d4 <walk+0x4a8>

        case WalkPhase_Three:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, walkTime);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	89ba      	ldrh	r2, [r7, #12]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fb6d 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + bassinDroit), -22.5f, 0, HerkulexLed_Purple);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	330c      	adds	r3, #12
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2206      	movs	r2, #6
 80010fe:	2100      	movs	r1, #0
 8001100:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001250 <walk+0x324>
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fcbd 	bl	8000a84 <setPosition>
            setPosition(*(articulations + bassinGauche), -22.5f, 0, HerkulexLed_Purple);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3310      	adds	r3, #16
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2206      	movs	r2, #6
 8001112:	2100      	movs	r1, #0
 8001114:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8001250 <walk+0x324>
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fcb3 	bl	8000a84 <setPosition>
            // setTorqueOff(*(articulations + chevilleDroite));
            setPosition(*(articulations + chevilleGauche), 20.0f, 0, HerkulexLed_Purple);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	331c      	adds	r3, #28
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2206      	movs	r2, #6
 8001126:	2100      	movs	r1, #0
 8001128:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fca9 	bl	8000a84 <setPosition>
            setPosition(*(articulations + chevilleDroite), 20.0f, 0, HerkulexLed_Purple);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2206      	movs	r2, #6
 8001138:	2100      	movs	r1, #0
 800113a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fca0 	bl	8000a84 <setPosition>

            executeMove((**(articulations + 0)).m_bus);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fb6a 	bl	8000824 <executeMove>
            setLedColor(*(articulations + genouDroit), HerkulexLed_Purple);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2106      	movs	r1, #6
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fcf4 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + genouGauche), HerkulexLed_Purple);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3318      	adds	r3, #24
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2106      	movs	r1, #6
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fced 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + hancheDroite), HerkulexLed_Purple);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3308      	adds	r3, #8
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2106      	movs	r1, #6
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fce6 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + hancheGauche), HerkulexLed_Purple);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3314      	adds	r3, #20
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2106      	movs	r1, #6
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fcdf 	bl	8000b46 <setLedColor>
            HAL_Delay(walkTime);
 8001188:	89bb      	ldrh	r3, [r7, #12]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fca2 	bl	8001ad4 <HAL_Delay>
            setTorqueOn(*(articulations + chevilleDroite));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fcc9 	bl	8000b2c <setTorqueOn>
            phase = WalkPhase_Four;
 800119a:	2304      	movs	r3, #4
 800119c:	73fb      	strb	r3, [r7, #15]
            break;
 800119e:	e119      	b.n	80013d4 <walk+0x4a8>

        case WalkPhase_Four:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, walkTime);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	89ba      	ldrh	r2, [r7, #12]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fb10 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + genouDroit), 27.5f, 0, HerkulexLed_White);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3304      	adds	r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2207      	movs	r2, #7
 80011b8:	2100      	movs	r1, #0
 80011ba:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001254 <walk+0x328>
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fc60 	bl	8000a84 <setPosition>
            setPosition(*(articulations + genouGauche), 0, 0, HerkulexLed_White);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3318      	adds	r3, #24
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2207      	movs	r2, #7
 80011cc:	2100      	movs	r1, #0
 80011ce:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800125c <walk+0x330>
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fc56 	bl	8000a84 <setPosition>
            setPosition(*(articulations + hancheDroite), -30.0f, 0, HerkulexLed_White);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3308      	adds	r3, #8
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2207      	movs	r2, #7
 80011e0:	2100      	movs	r1, #0
 80011e2:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fc4c 	bl	8000a84 <setPosition>
            setPosition(*(articulations + hancheGauche), 0, 0, HerkulexLed_White);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3314      	adds	r3, #20
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2207      	movs	r2, #7
 80011f4:	2100      	movs	r1, #0
 80011f6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800125c <walk+0x330>
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fc42 	bl	8000a84 <setPosition>

            executeMove((**(articulations + 0)).m_bus);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fb0c 	bl	8000824 <executeMove>
            setLedColor(*(articulations + bassinDroit), HerkulexLed_White);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	330c      	adds	r3, #12
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2107      	movs	r1, #7
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fc96 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + bassinGauche), HerkulexLed_White);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3310      	adds	r3, #16
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2107      	movs	r1, #7
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fc8f 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + chevilleDroite), HerkulexLed_White);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2107      	movs	r1, #7
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fc89 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + chevilleGauche), HerkulexLed_White);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	331c      	adds	r3, #28
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2107      	movs	r1, #7
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fc82 	bl	8000b46 <setLedColor>
            HAL_Delay(walkTime);
 8001242:	89bb      	ldrh	r3, [r7, #12]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fc45 	bl	8001ad4 <HAL_Delay>
            phase = WalkPhase_Five;
 800124a:	2305      	movs	r3, #5
 800124c:	73fb      	strb	r3, [r7, #15]
            break;
 800124e:	e0c1      	b.n	80013d4 <walk+0x4a8>
 8001250:	c1b40000 	.word	0xc1b40000
 8001254:	41dc0000 	.word	0x41dc0000
 8001258:	41b40000 	.word	0x41b40000
 800125c:	00000000 	.word	0x00000000

        case WalkPhase_Five:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, walkTime);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	89ba      	ldrh	r2, [r7, #12]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fab0 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + bassinDroit), 22.5, 0, HerkulexLed_Green);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	330c      	adds	r3, #12
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2201      	movs	r2, #1
 8001278:	2100      	movs	r1, #0
 800127a:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8001258 <walk+0x32c>
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fc00 	bl	8000a84 <setPosition>
            setPosition(*(articulations + bassinGauche), 22.5, 0, HerkulexLed_Green);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3310      	adds	r3, #16
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	2100      	movs	r1, #0
 800128e:	ed1f 0a0e 	vldr	s0, [pc, #-56]	; 8001258 <walk+0x32c>
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fbf6 	bl	8000a84 <setPosition>
            setPosition(*(articulations + chevilleDroite), -20.0f, 0, HerkulexLed_Green);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	2100      	movs	r1, #0
 80012a0:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fbed 	bl	8000a84 <setPosition>
            // setTorqueOff(*(articulations + chevilleGauche));
            setPosition(*(articulations + chevilleGauche), -20.0f, 0, HerkulexLed_Purple);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	331c      	adds	r3, #28
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2206      	movs	r2, #6
 80012b2:	2100      	movs	r1, #0
 80012b4:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fbe3 	bl	8000a84 <setPosition>

            executeMove((**(articulations + 0)).m_bus);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff faad 	bl	8000824 <executeMove>
            setLedColor(*(articulations + hancheDroite), HerkulexLed_Green);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3308      	adds	r3, #8
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2101      	movs	r1, #1
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fc37 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + genouGauche), HerkulexLed_Green);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3318      	adds	r3, #24
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2101      	movs	r1, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fc30 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + genouDroit), HerkulexLed_Green);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3304      	adds	r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fc29 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + hancheGauche), HerkulexLed_Green);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3314      	adds	r3, #20
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fc22 	bl	8000b46 <setLedColor>
            HAL_Delay(walkTime);
 8001302:	89bb      	ldrh	r3, [r7, #12]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fbe5 	bl	8001ad4 <HAL_Delay>
            setTorqueOn(*(articulations + chevilleGauche));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	331c      	adds	r3, #28
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fc0b 	bl	8000b2c <setTorqueOn>
            phase = WalkPhase_Six;
 8001316:	2306      	movs	r3, #6
 8001318:	73fb      	strb	r3, [r7, #15]
            break;
 800131a:	e05b      	b.n	80013d4 <walk+0x4a8>

        case WalkPhase_Six:
            prepareSynchronizedMove((**(articulations + 0)).m_bus, walkTime);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	89ba      	ldrh	r2, [r7, #12]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fa52 	bl	80007d0 <prepareSynchronizedMove>

            setPosition(*(articulations + genouDroit), 0, 0, HerkulexLed_Yellow);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3304      	adds	r3, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2205      	movs	r2, #5
 8001334:	2100      	movs	r1, #0
 8001336:	ed1f 0a37 	vldr	s0, [pc, #-220]	; 800125c <walk+0x330>
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fba2 	bl	8000a84 <setPosition>
            setPosition(*(articulations + genouGauche), -30.0f, 0, HerkulexLed_Yellow);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3318      	adds	r3, #24
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2205      	movs	r2, #5
 8001348:	2100      	movs	r1, #0
 800134a:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fb98 	bl	8000a84 <setPosition>
            setPosition(*(articulations + hancheDroite), 0, 0, HerkulexLed_Yellow);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3308      	adds	r3, #8
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2205      	movs	r2, #5
 800135c:	2100      	movs	r1, #0
 800135e:	ed1f 0a41 	vldr	s0, [pc, #-260]	; 800125c <walk+0x330>
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fb8e 	bl	8000a84 <setPosition>
            setPosition(*(articulations + hancheGauche), 30.0f, 0, HerkulexLed_Yellow);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3314      	adds	r3, #20
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2205      	movs	r2, #5
 8001370:	2100      	movs	r1, #0
 8001372:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fb84 	bl	8000a84 <setPosition>

            executeMove((**(articulations + 0)).m_bus);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fa4e 	bl	8000824 <executeMove>
            setLedColor(*(articulations + bassinDroit), HerkulexLed_Yellow);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	330c      	adds	r3, #12
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2105      	movs	r1, #5
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fbd8 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + bassinGauche), HerkulexLed_Yellow);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3310      	adds	r3, #16
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2105      	movs	r1, #5
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fbd1 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + chevilleDroite), HerkulexLed_Yellow);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2105      	movs	r1, #5
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fbcb 	bl	8000b46 <setLedColor>
            setLedColor(*(articulations + chevilleGauche), HerkulexLed_Yellow);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	331c      	adds	r3, #28
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2105      	movs	r1, #5
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fbc4 	bl	8000b46 <setLedColor>
            HAL_Delay(walkTime);
 80013be:	89bb      	ldrh	r3, [r7, #12]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fb87 	bl	8001ad4 <HAL_Delay>
            phase = WalkPhase_None;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
            step++;
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	3301      	adds	r3, #1
 80013ce:	73bb      	strb	r3, [r7, #14]
            break;
 80013d0:	e000      	b.n	80013d4 <walk+0x4a8>

        default:
            break;
 80013d2:	bf00      	nop
    while (step < numberOfStep)
 80013d4:	7bba      	ldrb	r2, [r7, #14]
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	429a      	cmp	r2, r3
 80013da:	f4ff adb5 	bcc.w	8000f48 <walk+0x1c>
        }
    }
    initialisePosition(articulations);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f804 	bl	80013ec <initialisePosition>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <initialisePosition>:

void initialisePosition(HerkulexServo **articulations)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    HerkulexServoBus *bus = (**(articulations)).m_bus;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60fb      	str	r3, [r7, #12]
    prepareSynchronizedMove(bus, 1120);
 80013fc:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff f9e5 	bl	80007d0 <prepareSynchronizedMove>

    setPosition(*(articulations + bassinDroit), 0, 0, HerkulexLed_Green);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	330c      	adds	r3, #12
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2201      	movs	r2, #1
 800140e:	2100      	movs	r1, #0
 8001410:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80014b8 <initialisePosition+0xcc>
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fb35 	bl	8000a84 <setPosition>
    setPosition(*(articulations + bassinGauche), 0, 0, HerkulexLed_Green);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3310      	adds	r3, #16
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2201      	movs	r2, #1
 8001422:	2100      	movs	r1, #0
 8001424:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80014b8 <initialisePosition+0xcc>
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fb2b 	bl	8000a84 <setPosition>
    setPosition(*(articulations + chevilleDroite), 0, 0, HerkulexLed_Green);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2201      	movs	r2, #1
 8001434:	2100      	movs	r1, #0
 8001436:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80014b8 <initialisePosition+0xcc>
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fb22 	bl	8000a84 <setPosition>
    setPosition(*(articulations + chevilleGauche), 0, 0, HerkulexLed_Green);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	331c      	adds	r3, #28
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2201      	movs	r2, #1
 8001448:	2100      	movs	r1, #0
 800144a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80014b8 <initialisePosition+0xcc>
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fb18 	bl	8000a84 <setPosition>
    setPosition(*(articulations + hancheDroite), 0, 0, HerkulexLed_Green);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3308      	adds	r3, #8
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2201      	movs	r2, #1
 800145c:	2100      	movs	r1, #0
 800145e:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80014b8 <initialisePosition+0xcc>
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fb0e 	bl	8000a84 <setPosition>
    setPosition(*(articulations + hancheGauche), 0, 0, HerkulexLed_Green);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3314      	adds	r3, #20
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2201      	movs	r2, #1
 8001470:	2100      	movs	r1, #0
 8001472:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80014b8 <initialisePosition+0xcc>
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb04 	bl	8000a84 <setPosition>
    setPosition(*(articulations + genouDroit), 0, 0, HerkulexLed_Green);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3304      	adds	r3, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	2100      	movs	r1, #0
 8001486:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80014b8 <initialisePosition+0xcc>
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fafa 	bl	8000a84 <setPosition>
    setPosition(*(articulations + genouGauche), 0, 0, HerkulexLed_Green);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3318      	adds	r3, #24
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2201      	movs	r2, #1
 8001498:	2100      	movs	r1, #0
 800149a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80014b8 <initialisePosition+0xcc>
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff faf0 	bl	8000a84 <setPosition>

    executeMove(bus);
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff f9bd 	bl	8000824 <executeMove>
    HAL_Delay(100);
 80014aa:	2064      	movs	r0, #100	; 0x64
 80014ac:	f000 fb12 	bl	8001ad4 <HAL_Delay>
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	00000000 	.word	0x00000000

080014bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_MspInit+0x4c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_MspInit+0x4c>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_MspInit+0x4c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <HAL_MspInit+0x4c>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 fa98 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <DMA1_Stream0_IRQHandler+0x10>)
 800156e:	f000 fcb5 	bl	8001edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000134 	.word	0x20000134

0800157c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001580:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001584:	f001 f890 	bl	80026a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <UART5_IRQHandler+0x10>)
 8001592:	f001 fe49 	bl	8003228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200000b4 	.word	0x200000b4

080015a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00a      	b.n	80015c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015b2:	f3af 8000 	nop.w
 80015b6:	4601      	mov	r1, r0
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	60ba      	str	r2, [r7, #8]
 80015be:	b2ca      	uxtb	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbf0      	blt.n	80015b2 <_read+0x12>
	}

return len;
 80015d0:	687b      	ldr	r3, [r7, #4]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e009      	b.n	8001600 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	60ba      	str	r2, [r7, #8]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fc5f 	bl	8000eb8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbf1      	blt.n	80015ec <_write+0x12>
	}
	return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_close>:

int _close(int file)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	return -1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163a:	605a      	str	r2, [r3, #4]
	return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_isatty>:

int _isatty(int file)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
	return 1;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
	return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <_sbrk+0x50>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x16>
		heap_end = &end;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <_sbrk+0x50>)
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <_sbrk+0x54>)
 8001690:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <_sbrk+0x50>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <_sbrk+0x50>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	466a      	mov	r2, sp
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d907      	bls.n	80016b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016a6:	f002 fa45 	bl	8003b34 <__errno>
 80016aa:	4602      	mov	r2, r0
 80016ac:	230c      	movs	r3, #12
 80016ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
 80016b4:	e006      	b.n	80016c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <_sbrk+0x50>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a03      	ldr	r2, [pc, #12]	; (80016cc <_sbrk+0x50>)
 80016c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200000a0 	.word	0x200000a0
 80016d0:	200001a0 	.word	0x200001a0

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <SystemInit+0x60>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	4a15      	ldr	r2, [pc, #84]	; (8001734 <SystemInit+0x60>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <SystemInit+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <SystemInit+0x64>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <SystemInit+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <SystemInit+0x64>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <SystemInit+0x64>)
 8001700:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <SystemInit+0x64>)
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <SystemInit+0x68>)
 800170e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <SystemInit+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a08      	ldr	r2, [pc, #32]	; (8001738 <SystemInit+0x64>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <SystemInit+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SystemInit+0x60>)
 8001724:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001728:	609a      	str	r2, [r3, #8]
#endif
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	40023800 	.word	0x40023800
 800173c:	24003010 	.word	0x24003010

08001740 <MX_UART5_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_UART5_Init+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <MX_UART5_Init+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_UART5_Init+0x4c>)
 800174c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001750:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_UART5_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_UART5_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_UART5_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_UART5_Init+0x4c>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_UART5_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_UART5_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_UART5_Init+0x4c>)
 8001778:	f001 fc70 	bl	800305c <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001782:	f7ff fbcb 	bl	8000f1c <Error_Handler>
  }

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200000b4 	.word	0x200000b4
 8001790:	40005000 	.word	0x40005000

08001794 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_USART2_UART_Init+0x50>)
 800179c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017cc:	f001 fc46 	bl	800305c <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017d6:	f7ff fba1 	bl	8000f1c <Error_Handler>
  }

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200000f4 	.word	0x200000f4
 80017e4:	40004400 	.word	0x40004400

080017e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	; 0x30
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5d      	ldr	r2, [pc, #372]	; (800197c <HAL_UART_MspInit+0x194>)
 8001806:	4293      	cmp	r3, r2
 8001808:	f040 8083 	bne.w	8001912 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <HAL_UART_MspInit+0x198>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a5a      	ldr	r2, [pc, #360]	; (8001980 <HAL_UART_MspInit+0x198>)
 8001816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_UART_MspInit+0x198>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001824:	61bb      	str	r3, [r7, #24]
 8001826:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	4b54      	ldr	r3, [pc, #336]	; (8001980 <HAL_UART_MspInit+0x198>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4a53      	ldr	r2, [pc, #332]	; (8001980 <HAL_UART_MspInit+0x198>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
 8001838:	4b51      	ldr	r3, [pc, #324]	; (8001980 <HAL_UART_MspInit+0x198>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <HAL_UART_MspInit+0x198>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a4c      	ldr	r2, [pc, #304]	; (8001980 <HAL_UART_MspInit+0x198>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <HAL_UART_MspInit+0x198>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186a:	2301      	movs	r3, #1
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001872:	2308      	movs	r3, #8
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	4841      	ldr	r0, [pc, #260]	; (8001984 <HAL_UART_MspInit+0x19c>)
 800187e:	f000 fd67 	bl	8002350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001882:	2304      	movs	r3, #4
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	2301      	movs	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001892:	2308      	movs	r3, #8
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	483a      	ldr	r0, [pc, #232]	; (8001988 <HAL_UART_MspInit+0x1a0>)
 800189e:	f000 fd57 	bl	8002350 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018a4:	4a3a      	ldr	r2, [pc, #232]	; (8001990 <HAL_UART_MspInit+0x1a8>)
 80018a6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80018a8:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ae:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018bc:	4b33      	ldr	r3, [pc, #204]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c4:	4b31      	ldr	r3, [pc, #196]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80018d0:	4b2e      	ldr	r3, [pc, #184]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018d8:	4b2c      	ldr	r3, [pc, #176]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80018e4:	4829      	ldr	r0, [pc, #164]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018e6:	f000 fa29 	bl	8001d3c <HAL_DMA_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80018f0:	f7ff fb14 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a25      	ldr	r2, [pc, #148]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
 80018fa:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_UART_MspInit+0x1a4>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2035      	movs	r0, #53	; 0x35
 8001906:	f000 f9e2 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800190a:	2035      	movs	r0, #53	; 0x35
 800190c:	f000 f9fb 	bl	8001d06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001910:	e030      	b.n	8001974 <HAL_UART_MspInit+0x18c>
  else if(uartHandle->Instance==USART2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <HAL_UART_MspInit+0x1ac>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d12b      	bne.n	8001974 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_UART_MspInit+0x198>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	4a16      	ldr	r2, [pc, #88]	; (8001980 <HAL_UART_MspInit+0x198>)
 8001926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192a:	6413      	str	r3, [r2, #64]	; 0x40
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_UART_MspInit+0x198>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_UART_MspInit+0x198>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_UART_MspInit+0x198>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6313      	str	r3, [r2, #48]	; 0x30
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_UART_MspInit+0x198>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001954:	230c      	movs	r3, #12
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001964:	2307      	movs	r3, #7
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	480a      	ldr	r0, [pc, #40]	; (8001998 <HAL_UART_MspInit+0x1b0>)
 8001970:	f000 fcee 	bl	8002350 <HAL_GPIO_Init>
}
 8001974:	bf00      	nop
 8001976:	3730      	adds	r7, #48	; 0x30
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40005000 	.word	0x40005000
 8001980:	40023800 	.word	0x40023800
 8001984:	40020800 	.word	0x40020800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	20000134 	.word	0x20000134
 8001990:	40026010 	.word	0x40026010
 8001994:	40004400 	.word	0x40004400
 8001998:	40020000 	.word	0x40020000

0800199c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800199c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019a2:	e003      	b.n	80019ac <LoopCopyDataInit>

080019a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019aa:	3104      	adds	r1, #4

080019ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019ac:	480b      	ldr	r0, [pc, #44]	; (80019dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019b4:	d3f6      	bcc.n	80019a4 <CopyDataInit>
  ldr  r2, =_sbss
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019b8:	e002      	b.n	80019c0 <LoopFillZerobss>

080019ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019bc:	f842 3b04 	str.w	r3, [r2], #4

080019c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019c4:	d3f9      	bcc.n	80019ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019c6:	f7ff fe85 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ca:	f002 f8b9 	bl	8003b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ce:	f7ff f981 	bl	8000cd4 <main>
  bx  lr    
 80019d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019d8:	08004aa0 	.word	0x08004aa0
  ldr  r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019e0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80019e4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80019e8:	2000019c 	.word	0x2000019c

080019ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <HAL_Init+0x40>)
 80019fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_Init+0x40>)
 8001a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_Init+0x40>)
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 f94d 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 f808 	bl	8001a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a24:	f7ff fd4a 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023c00 	.word	0x40023c00

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x54>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x58>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f965 	bl	8001d22 <HAL_SYSTICK_Config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00e      	b.n	8001a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b0f      	cmp	r3, #15
 8001a66:	d80a      	bhi.n	8001a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f000 f92d 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_InitTick+0x5c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x20>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000194 	.word	0x20000194

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000194 	.word	0x20000194

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff ffee 	bl	8001abc <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d005      	beq.n	8001afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_Delay+0x40>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001afa:	bf00      	nop
 8001afc:	f7ff ffde 	bl	8001abc <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d8f7      	bhi.n	8001afc <HAL_Delay+0x28>
  {
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000008 	.word	0x20000008

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff29 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff3e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff31 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff feb8 	bl	8001abc <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e099      	b.n	8001e8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d78:	e00f      	b.n	8001d9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d7a:	f7ff fe9f 	bl	8001abc <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d908      	bls.n	8001d9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e078      	b.n	8001e8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e8      	bne.n	8001d7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_DMA_Init+0x158>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f023 0307 	bic.w	r3, r3, #7
 8001e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d117      	bne.n	8001e5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00e      	beq.n	8001e5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fa0b 	bl	800225c <DMA_CheckFifoParam>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e016      	b.n	8001e8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f9c2 	bl	80021f0 <DMA_CalcBaseAndBitshift>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	223f      	movs	r2, #63	; 0x3f
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	f010803f 	.word	0xf010803f

08001e98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d004      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00c      	b.n	8001ed0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2205      	movs	r2, #5
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee8:	4b92      	ldr	r3, [pc, #584]	; (8002134 <HAL_DMA_IRQHandler+0x258>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a92      	ldr	r2, [pc, #584]	; (8002138 <HAL_DMA_IRQHandler+0x25c>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	0a9b      	lsrs	r3, r3, #10
 8001ef4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	2208      	movs	r2, #8
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01a      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0204 	bic.w	r2, r2, #4
 8001f2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	2208      	movs	r2, #8
 8001f36:	409a      	lsls	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d012      	beq.n	8001f7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f043 0202 	orr.w	r2, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2204      	movs	r2, #4
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d012      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00b      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f043 0204 	orr.w	r2, r3, #4
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2210      	movs	r2, #16
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d043      	beq.n	800204c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d03c      	beq.n	800204c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d018      	beq.n	800201e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d108      	bne.n	800200c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d024      	beq.n	800204c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
 800200a:	e01f      	b.n	800204c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
 800201c:	e016      	b.n	800204c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d107      	bne.n	800203c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0208 	bic.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2220      	movs	r2, #32
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 808e 	beq.w	800217a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8086 	beq.w	800217a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002072:	2220      	movs	r2, #32
 8002074:	409a      	lsls	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b05      	cmp	r3, #5
 8002084:	d136      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0216 	bic.w	r2, r2, #22
 8002094:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <HAL_DMA_IRQHandler+0x1da>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0208 	bic.w	r2, r2, #8
 80020c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	223f      	movs	r2, #63	; 0x3f
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d07d      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
        }
        return;
 80020f2:	e078      	b.n	80021e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01c      	beq.n	800213c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d108      	bne.n	8002122 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	2b00      	cmp	r3, #0
 8002116:	d030      	beq.n	800217a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
 8002120:	e02b      	b.n	800217a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d027      	beq.n	800217a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
 8002132:	e022      	b.n	800217a <HAL_DMA_IRQHandler+0x29e>
 8002134:	20000000 	.word	0x20000000
 8002138:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10f      	bne.n	800216a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	2b00      	cmp	r3, #0
 8002180:	d032      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d022      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2205      	movs	r2, #5
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0201 	bic.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3301      	adds	r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d307      	bcc.n	80021c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f2      	bne.n	80021a6 <HAL_DMA_IRQHandler+0x2ca>
 80021c0:	e000      	b.n	80021c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
 80021e4:	e000      	b.n	80021e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021e6:	bf00      	nop
    }
  }
}
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop

080021f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	3b10      	subs	r3, #16
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <DMA_CalcBaseAndBitshift+0x64>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800220a:	4a13      	ldr	r2, [pc, #76]	; (8002258 <DMA_CalcBaseAndBitshift+0x68>)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d909      	bls.n	8002232 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	1d1a      	adds	r2, r3, #4
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	659a      	str	r2, [r3, #88]	; 0x58
 8002230:	e007      	b.n	8002242 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	aaaaaaab 	.word	0xaaaaaaab
 8002258:	080049f0 	.word	0x080049f0

0800225c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11f      	bne.n	80022b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d855      	bhi.n	8002328 <DMA_CheckFifoParam+0xcc>
 800227c:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <DMA_CheckFifoParam+0x28>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	08002295 	.word	0x08002295
 8002288:	080022a7 	.word	0x080022a7
 800228c:	08002295 	.word	0x08002295
 8002290:	08002329 	.word	0x08002329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d045      	beq.n	800232c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a4:	e042      	b.n	800232c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ae:	d13f      	bne.n	8002330 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e03c      	b.n	8002330 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022be:	d121      	bne.n	8002304 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d836      	bhi.n	8002334 <DMA_CheckFifoParam+0xd8>
 80022c6:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <DMA_CheckFifoParam+0x70>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022e3 	.word	0x080022e3
 80022d4:	080022dd 	.word	0x080022dd
 80022d8:	080022f5 	.word	0x080022f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      break;
 80022e0:	e02f      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d024      	beq.n	8002338 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f2:	e021      	b.n	8002338 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022fc:	d11e      	bne.n	800233c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002302:	e01b      	b.n	800233c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d902      	bls.n	8002310 <DMA_CheckFifoParam+0xb4>
 800230a:	2b03      	cmp	r3, #3
 800230c:	d003      	beq.n	8002316 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800230e:	e018      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
      break;
 8002314:	e015      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00e      	beq.n	8002340 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      break;
 8002326:	e00b      	b.n	8002340 <DMA_CheckFifoParam+0xe4>
      break;
 8002328:	bf00      	nop
 800232a:	e00a      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 800232c:	bf00      	nop
 800232e:	e008      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 8002330:	bf00      	nop
 8002332:	e006      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 8002334:	bf00      	nop
 8002336:	e004      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 8002338:	bf00      	nop
 800233a:	e002      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;   
 800233c:	bf00      	nop
 800233e:	e000      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 8002340:	bf00      	nop
    }
  } 
  
  return status; 
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e165      	b.n	8002638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	f040 8154 	bne.w	8002632 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x4a>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b12      	cmp	r3, #18
 8002398:	d123      	bne.n	80023e2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	08da      	lsrs	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3208      	adds	r2, #8
 80023a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	08da      	lsrs	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3208      	adds	r2, #8
 80023dc:	69b9      	ldr	r1, [r7, #24]
 80023de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0203 	and.w	r2, r3, #3
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d00b      	beq.n	8002436 <HAL_GPIO_Init+0xe6>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800242a:	2b11      	cmp	r3, #17
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b12      	cmp	r3, #18
 8002434:	d130      	bne.n	8002498 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 0201 	and.w	r2, r3, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80ae 	beq.w	8002632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_GPIO_Init+0x2fc>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a5b      	ldr	r2, [pc, #364]	; (800264c <HAL_GPIO_Init+0x2fc>)
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_GPIO_Init+0x2fc>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	4a57      	ldr	r2, [pc, #348]	; (8002650 <HAL_GPIO_Init+0x300>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <HAL_GPIO_Init+0x304>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d025      	beq.n	800256a <HAL_GPIO_Init+0x21a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4d      	ldr	r2, [pc, #308]	; (8002658 <HAL_GPIO_Init+0x308>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <HAL_GPIO_Init+0x216>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_GPIO_Init+0x30c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x212>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_GPIO_Init+0x310>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x20e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <HAL_GPIO_Init+0x314>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x20a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a49      	ldr	r2, [pc, #292]	; (8002668 <HAL_GPIO_Init+0x318>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x206>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_GPIO_Init+0x31c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x202>
 800254e:	2306      	movs	r3, #6
 8002550:	e00c      	b.n	800256c <HAL_GPIO_Init+0x21c>
 8002552:	2307      	movs	r3, #7
 8002554:	e00a      	b.n	800256c <HAL_GPIO_Init+0x21c>
 8002556:	2305      	movs	r3, #5
 8002558:	e008      	b.n	800256c <HAL_GPIO_Init+0x21c>
 800255a:	2304      	movs	r3, #4
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x21c>
 800255e:	2303      	movs	r3, #3
 8002560:	e004      	b.n	800256c <HAL_GPIO_Init+0x21c>
 8002562:	2302      	movs	r3, #2
 8002564:	e002      	b.n	800256c <HAL_GPIO_Init+0x21c>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_GPIO_Init+0x21c>
 800256a:	2300      	movs	r3, #0
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	0092      	lsls	r2, r2, #2
 8002574:	4093      	lsls	r3, r2
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257c:	4934      	ldr	r1, [pc, #208]	; (8002650 <HAL_GPIO_Init+0x300>)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258a:	4b39      	ldr	r3, [pc, #228]	; (8002670 <HAL_GPIO_Init+0x320>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ae:	4a30      	ldr	r2, [pc, #192]	; (8002670 <HAL_GPIO_Init+0x320>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025b4:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <HAL_GPIO_Init+0x320>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025d8:	4a25      	ldr	r2, [pc, #148]	; (8002670 <HAL_GPIO_Init+0x320>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_GPIO_Init+0x320>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002602:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_GPIO_Init+0x320>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_GPIO_Init+0x320>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800262c:	4a10      	ldr	r2, [pc, #64]	; (8002670 <HAL_GPIO_Init+0x320>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3301      	adds	r3, #1
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	f67f ae96 	bls.w	800236c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002640:	bf00      	nop
 8002642:	3724      	adds	r7, #36	; 0x24
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40021400 	.word	0x40021400
 800266c:	40021800 	.word	0x40021800
 8002670:	40013c00 	.word	0x40013c00

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002690:	e003      	b.n	800269a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	041a      	lsls	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	619a      	str	r2, [r3, #24]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d006      	beq.n	80026cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fc08 	bl	8000edc <HAL_GPIO_EXTI_Callback>
  }
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40013c00 	.word	0x40013c00

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0ca      	b.n	8002882 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d90c      	bls.n	8002714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b62      	ldr	r3, [pc, #392]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b6      	b.n	8002882 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272c:	4b58      	ldr	r3, [pc, #352]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002744:	4b52      	ldr	r3, [pc, #328]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a51      	ldr	r2, [pc, #324]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800274e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	494c      	ldr	r1, [pc, #304]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d044      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d119      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e07d      	b.n	8002882 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d003      	beq.n	8002796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002792:	2b03      	cmp	r3, #3
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e06d      	b.n	8002882 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e065      	b.n	8002882 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4b36      	ldr	r3, [pc, #216]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f023 0203 	bic.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4933      	ldr	r1, [pc, #204]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c8:	f7ff f978 	bl	8001abc <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7ff f974 	bl	8001abc <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e04d      	b.n	8002882 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 020c 	and.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1eb      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d20c      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b1f      	ldr	r3, [pc, #124]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e030      	b.n	8002882 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4915      	ldr	r1, [pc, #84]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	490d      	ldr	r1, [pc, #52]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800285e:	f000 f851 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8002862:	4601      	mov	r1, r0
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	5cd3      	ldrb	r3, [r2, r3]
 8002872:	fa21 f303 	lsr.w	r3, r1, r3
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff f8da 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023c00 	.word	0x40023c00
 8002890:	40023800 	.word	0x40023800
 8002894:	080049d8 	.word	0x080049d8
 8002898:	20000000 	.word	0x20000000

0800289c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b8:	f7ff fff0 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028bc:	4601      	mov	r1, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0a9b      	lsrs	r3, r3, #10
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4a03      	ldr	r2, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	080049e8 	.word	0x080049e8

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e0:	f7ff ffdc 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028e4:	4601      	mov	r1, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0b5b      	lsrs	r3, r3, #13
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4a03      	ldr	r2, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	080049e8 	.word	0x080049e8

08002904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800291e:	4b9f      	ldr	r3, [pc, #636]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b0c      	cmp	r3, #12
 8002928:	f200 8130 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x288>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_RCC_GetSysClockFreq+0x30>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002969 	.word	0x08002969
 8002938:	08002b8d 	.word	0x08002b8d
 800293c:	08002b8d 	.word	0x08002b8d
 8002940:	08002b8d 	.word	0x08002b8d
 8002944:	0800296f 	.word	0x0800296f
 8002948:	08002b8d 	.word	0x08002b8d
 800294c:	08002b8d 	.word	0x08002b8d
 8002950:	08002b8d 	.word	0x08002b8d
 8002954:	08002975 	.word	0x08002975
 8002958:	08002b8d 	.word	0x08002b8d
 800295c:	08002b8d 	.word	0x08002b8d
 8002960:	08002b8d 	.word	0x08002b8d
 8002964:	08002a83 	.word	0x08002a83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b8d      	ldr	r3, [pc, #564]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x29c>)
 800296a:	613b      	str	r3, [r7, #16]
       break;
 800296c:	e111      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800296e:	4b8d      	ldr	r3, [pc, #564]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002970:	613b      	str	r3, [r7, #16]
      break;
 8002972:	e10e      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002974:	4b89      	ldr	r3, [pc, #548]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800297c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297e:	4b87      	ldr	r3, [pc, #540]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d023      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298a:	4b84      	ldr	r3, [pc, #528]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	f04f 0400 	mov.w	r4, #0
 8002994:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	ea03 0501 	and.w	r5, r3, r1
 80029a0:	ea04 0602 	and.w	r6, r4, r2
 80029a4:	4a7f      	ldr	r2, [pc, #508]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80029a6:	fb02 f106 	mul.w	r1, r2, r6
 80029aa:	2200      	movs	r2, #0
 80029ac:	fb02 f205 	mul.w	r2, r2, r5
 80029b0:	440a      	add	r2, r1
 80029b2:	497c      	ldr	r1, [pc, #496]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80029b4:	fba5 0101 	umull	r0, r1, r5, r1
 80029b8:	1853      	adds	r3, r2, r1
 80029ba:	4619      	mov	r1, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f04f 0400 	mov.w	r4, #0
 80029c2:	461a      	mov	r2, r3
 80029c4:	4623      	mov	r3, r4
 80029c6:	f7fd fc73 	bl	80002b0 <__aeabi_uldivmod>
 80029ca:	4603      	mov	r3, r0
 80029cc:	460c      	mov	r4, r1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e049      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d2:	4b72      	ldr	r3, [pc, #456]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	f04f 0400 	mov.w	r4, #0
 80029dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	ea03 0501 	and.w	r5, r3, r1
 80029e8:	ea04 0602 	and.w	r6, r4, r2
 80029ec:	4629      	mov	r1, r5
 80029ee:	4632      	mov	r2, r6
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	f04f 0400 	mov.w	r4, #0
 80029f8:	0154      	lsls	r4, r2, #5
 80029fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029fe:	014b      	lsls	r3, r1, #5
 8002a00:	4619      	mov	r1, r3
 8002a02:	4622      	mov	r2, r4
 8002a04:	1b49      	subs	r1, r1, r5
 8002a06:	eb62 0206 	sbc.w	r2, r2, r6
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	f04f 0400 	mov.w	r4, #0
 8002a12:	0194      	lsls	r4, r2, #6
 8002a14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a18:	018b      	lsls	r3, r1, #6
 8002a1a:	1a5b      	subs	r3, r3, r1
 8002a1c:	eb64 0402 	sbc.w	r4, r4, r2
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	00e2      	lsls	r2, r4, #3
 8002a2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a2e:	00d9      	lsls	r1, r3, #3
 8002a30:	460b      	mov	r3, r1
 8002a32:	4614      	mov	r4, r2
 8002a34:	195b      	adds	r3, r3, r5
 8002a36:	eb44 0406 	adc.w	r4, r4, r6
 8002a3a:	f04f 0100 	mov.w	r1, #0
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	02a2      	lsls	r2, r4, #10
 8002a44:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a48:	0299      	lsls	r1, r3, #10
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	4621      	mov	r1, r4
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f04f 0400 	mov.w	r4, #0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	f7fd fc28 	bl	80002b0 <__aeabi_uldivmod>
 8002a60:	4603      	mov	r3, r0
 8002a62:	460c      	mov	r4, r1
 8002a64:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a66:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0c1b      	lsrs	r3, r3, #16
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	3301      	adds	r3, #1
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	613b      	str	r3, [r7, #16]
      break;
 8002a80:	e087      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a82:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a8a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8c:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d023      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a98:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	f04f 0400 	mov.w	r4, #0
 8002aa2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	ea03 0501 	and.w	r5, r3, r1
 8002aae:	ea04 0602 	and.w	r6, r4, r2
 8002ab2:	4a3c      	ldr	r2, [pc, #240]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002ab4:	fb02 f106 	mul.w	r1, r2, r6
 8002ab8:	2200      	movs	r2, #0
 8002aba:	fb02 f205 	mul.w	r2, r2, r5
 8002abe:	440a      	add	r2, r1
 8002ac0:	4938      	ldr	r1, [pc, #224]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002ac2:	fba5 0101 	umull	r0, r1, r5, r1
 8002ac6:	1853      	adds	r3, r2, r1
 8002ac8:	4619      	mov	r1, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f04f 0400 	mov.w	r4, #0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4623      	mov	r3, r4
 8002ad4:	f7fd fbec 	bl	80002b0 <__aeabi_uldivmod>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	460c      	mov	r4, r1
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e049      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	f04f 0400 	mov.w	r4, #0
 8002aea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	ea03 0501 	and.w	r5, r3, r1
 8002af6:	ea04 0602 	and.w	r6, r4, r2
 8002afa:	4629      	mov	r1, r5
 8002afc:	4632      	mov	r2, r6
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	f04f 0400 	mov.w	r4, #0
 8002b06:	0154      	lsls	r4, r2, #5
 8002b08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b0c:	014b      	lsls	r3, r1, #5
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4622      	mov	r2, r4
 8002b12:	1b49      	subs	r1, r1, r5
 8002b14:	eb62 0206 	sbc.w	r2, r2, r6
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	f04f 0400 	mov.w	r4, #0
 8002b20:	0194      	lsls	r4, r2, #6
 8002b22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b26:	018b      	lsls	r3, r1, #6
 8002b28:	1a5b      	subs	r3, r3, r1
 8002b2a:	eb64 0402 	sbc.w	r4, r4, r2
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	00e2      	lsls	r2, r4, #3
 8002b38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b3c:	00d9      	lsls	r1, r3, #3
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4614      	mov	r4, r2
 8002b42:	195b      	adds	r3, r3, r5
 8002b44:	eb44 0406 	adc.w	r4, r4, r6
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	02a2      	lsls	r2, r4, #10
 8002b52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b56:	0299      	lsls	r1, r3, #10
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	4621      	mov	r1, r4
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f04f 0400 	mov.w	r4, #0
 8002b66:	461a      	mov	r2, r3
 8002b68:	4623      	mov	r3, r4
 8002b6a:	f7fd fba1 	bl	80002b0 <__aeabi_uldivmod>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	460c      	mov	r4, r1
 8002b72:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0f1b      	lsrs	r3, r3, #28
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	613b      	str	r3, [r7, #16]
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002b8e:	613b      	str	r3, [r7, #16]
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	693b      	ldr	r3, [r7, #16]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	017d7840 	.word	0x017d7840

08002ba8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8083 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bc2:	4b95      	ldr	r3, [pc, #596]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d019      	beq.n	8002c02 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bce:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d106      	bne.n	8002be8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bda:	4b8f      	ldr	r3, [pc, #572]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be6:	d00c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be8:	4b8b      	ldr	r3, [pc, #556]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d112      	bne.n	8002c1a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf4:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c00:	d10b      	bne.n	8002c1a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c02:	4b85      	ldr	r3, [pc, #532]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d05b      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x11e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d157      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e216      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x8a>
 8002c24:	4b7c      	ldr	r3, [pc, #496]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a7b      	ldr	r2, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e01d      	b.n	8002c6e <HAL_RCC_OscConfig+0xc6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCC_OscConfig+0xae>
 8002c3c:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a75      	ldr	r2, [pc, #468]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0xc6>
 8002c56:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6f      	ldr	r2, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b6d      	ldr	r3, [pc, #436]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6c      	ldr	r2, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d013      	beq.n	8002c9e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe ff21 	bl	8001abc <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7e:	f7fe ff1d 	bl	8001abc <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b64      	cmp	r3, #100	; 0x64
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e1db      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c90:	4b61      	ldr	r3, [pc, #388]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0xd6>
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fe ff0d 	bl	8001abc <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca6:	f7fe ff09 	bl	8001abc <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e1c7      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb8:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f0      	bne.n	8002ca6 <HAL_RCC_OscConfig+0xfe>
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d06f      	beq.n	8002db4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d017      	beq.n	8002d10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cec:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf8:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d11c      	bne.n	8002d3e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d04:	4b44      	ldr	r3, [pc, #272]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d116      	bne.n	8002d3e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x180>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e18f      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4938      	ldr	r1, [pc, #224]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3c:	e03a      	b.n	8002db4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d020      	beq.n	8002d88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d46:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe feb6 	bl	8001abc <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d54:	f7fe feb2 	bl	8001abc <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e170      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4925      	ldr	r1, [pc, #148]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
 8002d86:	e015      	b.n	8002db4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fe95 	bl	8001abc <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fe fe91 	bl	8001abc <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e14f      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d037      	beq.n	8002e30 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d016      	beq.n	8002df6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <HAL_RCC_OscConfig+0x278>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe fe75 	bl	8001abc <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7fe fe71 	bl	8001abc <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e12f      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x22e>
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_OscConfig+0x278>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fe5e 	bl	8001abc <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e02:	e00f      	b.n	8002e24 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fe fe5a 	bl	8001abc <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d908      	bls.n	8002e24 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e118      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	42470000 	.word	0x42470000
 8002e20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	4b8a      	ldr	r3, [pc, #552]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e9      	bne.n	8002e04 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8097 	beq.w	8002f6c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b83      	ldr	r3, [pc, #524]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a7e      	ldr	r2, [pc, #504]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b7c      	ldr	r3, [pc, #496]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6e:	4b79      	ldr	r3, [pc, #484]	; (8003054 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7a:	4b76      	ldr	r3, [pc, #472]	; (8003054 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a75      	ldr	r2, [pc, #468]	; (8003054 <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e86:	f7fe fe19 	bl	8001abc <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8e:	f7fe fe15 	bl	8001abc <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0d3      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	4b6c      	ldr	r3, [pc, #432]	; (8003054 <HAL_RCC_OscConfig+0x4ac>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x31a>
 8002eb4:	4b66      	ldr	r3, [pc, #408]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a65      	ldr	r2, [pc, #404]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	e01c      	b.n	8002efc <HAL_RCC_OscConfig+0x354>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x33c>
 8002eca:	4b61      	ldr	r3, [pc, #388]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a60      	ldr	r2, [pc, #384]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed6:	4b5e      	ldr	r3, [pc, #376]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a5d      	ldr	r2, [pc, #372]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0x354>
 8002ee4:	4b5a      	ldr	r3, [pc, #360]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4a59      	ldr	r2, [pc, #356]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef0:	4b57      	ldr	r3, [pc, #348]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a56      	ldr	r2, [pc, #344]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002ef6:	f023 0304 	bic.w	r3, r3, #4
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d015      	beq.n	8002f30 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe fdda 	bl	8001abc <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fdd6 	bl	8001abc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e092      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f22:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ee      	beq.n	8002f0c <HAL_RCC_OscConfig+0x364>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe fdc4 	bl	8001abc <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fe fdc0 	bl	8001abc <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e07c      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4e:	4b40      	ldr	r3, [pc, #256]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ee      	bne.n	8002f38 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	4a3a      	ldr	r2, [pc, #232]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d068      	beq.n	8003046 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f74:	4b36      	ldr	r3, [pc, #216]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d060      	beq.n	8003042 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d145      	bne.n	8003014 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_RCC_OscConfig+0x4b0>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fd95 	bl	8001abc <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe fd91 	bl	8001abc <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e04f      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa8:	4b29      	ldr	r3, [pc, #164]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	019b      	lsls	r3, r3, #6
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	085b      	lsrs	r3, r3, #1
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	061b      	lsls	r3, r3, #24
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	071b      	lsls	r3, r3, #28
 8002fe0:	491b      	ldr	r1, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_RCC_OscConfig+0x4b0>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe fd66 	bl	8001abc <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe fd62 	bl	8001abc <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e020      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x44c>
 8003012:	e018      	b.n	8003046 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_RCC_OscConfig+0x4b0>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301a:	f7fe fd4f 	bl	8001abc <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003022:	f7fe fd4b 	bl	8001abc <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e009      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_OscConfig+0x4a8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0x47a>
 8003040:	e001      	b.n	8003046 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
 8003058:	42470060 	.word	0x42470060

0800305c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e03f      	b.n	80030ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe fbb0 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2224      	movs	r2, #36	; 0x24
 800308c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800309e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fb3d 	bl	8003720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b088      	sub	sp, #32
 80030fa:	af02      	add	r7, sp, #8
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4613      	mov	r3, r2
 8003104:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b20      	cmp	r3, #32
 8003114:	f040 8083 	bne.w	800321e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_UART_Transmit+0x2e>
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e07b      	b.n	8003220 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_UART_Transmit+0x40>
 8003132:	2302      	movs	r3, #2
 8003134:	e074      	b.n	8003220 <HAL_UART_Transmit+0x12a>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2221      	movs	r2, #33	; 0x21
 8003148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800314c:	f7fe fcb6 	bl	8001abc <HAL_GetTick>
 8003150:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	88fa      	ldrh	r2, [r7, #6]
 8003156:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800315e:	e042      	b.n	80031e6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003176:	d122      	bne.n	80031be <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2200      	movs	r2, #0
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f960 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e046      	b.n	8003220 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3302      	adds	r3, #2
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	e017      	b.n	80031e6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3301      	adds	r3, #1
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	e013      	b.n	80031e6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f93d 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e023      	b.n	8003220 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	60ba      	str	r2, [r7, #8]
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1b7      	bne.n	8003160 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2200      	movs	r2, #0
 80031f8:	2140      	movs	r1, #64	; 0x40
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f924 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e00a      	b.n	8003220 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_UART_IRQHandler+0x52>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f9d2 	bl	800361c <UART_Receive_IT>
      return;
 8003278:	e0cc      	b.n	8003414 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80ab 	beq.w	80033d8 <HAL_UART_IRQHandler+0x1b0>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_UART_IRQHandler+0x70>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80a0 	beq.w	80033d8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_UART_IRQHandler+0x90>
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	f043 0201 	orr.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_UART_IRQHandler+0xb0>
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	f043 0202 	orr.w	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_UART_IRQHandler+0xd0>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	f043 0204 	orr.w	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_UART_IRQHandler+0xf0>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	f043 0208 	orr.w	r2, r3, #8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d078      	beq.n	8003412 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_UART_IRQHandler+0x112>
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f971 	bl	800361c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <HAL_UART_IRQHandler+0x13a>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d031      	beq.n	80033c6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8ba 	bl	80034dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d123      	bne.n	80033be <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003384:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	2b00      	cmp	r3, #0
 800338c:	d013      	beq.n	80033b6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	4a22      	ldr	r2, [pc, #136]	; (800341c <HAL_UART_IRQHandler+0x1f4>)
 8003394:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe fd7c 	bl	8001e98 <HAL_DMA_Abort_IT>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033b0:	4610      	mov	r0, r2
 80033b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	e00e      	b.n	80033d4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f83c 	bl	8003434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033bc:	e00a      	b.n	80033d4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f838 	bl	8003434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	e006      	b.n	80033d4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f834 	bl	8003434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033d2:	e01e      	b.n	8003412 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	bf00      	nop
    return;
 80033d6:	e01c      	b.n	8003412 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_UART_IRQHandler+0x1cc>
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8a7 	bl	8003540 <UART_Transmit_IT>
    return;
 80033f2:	e00f      	b.n	8003414 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_UART_IRQHandler+0x1ec>
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8ef 	bl	80035ec <UART_EndTransmit_IT>
    return;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003412:	bf00      	nop
  }
}
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	08003519 	.word	0x08003519

08003420 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003458:	e02c      	b.n	80034b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d028      	beq.n	80034b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x30>
 8003468:	f7fe fb28 	bl	8001abc <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	429a      	cmp	r2, r3
 8003476:	d21d      	bcs.n	80034b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003486:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e00f      	b.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4013      	ands	r3, r2
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d0c3      	beq.n	800345a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ff7e 	bl	8003434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b21      	cmp	r3, #33	; 0x21
 8003552:	d144      	bne.n	80035de <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355c:	d11a      	bne.n	8003594 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003572:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	621a      	str	r2, [r3, #32]
 8003586:	e00e      	b.n	80035a6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]
 8003592:	e008      	b.n	80035a6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	1c59      	adds	r1, r3, #1
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6211      	str	r1, [r2, #32]
 800359e:	781a      	ldrb	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	4619      	mov	r1, r3
 80035b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003602:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff07 	bl	8003420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b22      	cmp	r3, #34	; 0x22
 800362e:	d171      	bne.n	8003714 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d123      	bne.n	8003682 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10e      	bne.n	8003666 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	1c9a      	adds	r2, r3, #2
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
 8003664:	e029      	b.n	80036ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	b29b      	uxth	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	629a      	str	r2, [r3, #40]	; 0x28
 8003680:	e01b      	b.n	80036ba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6858      	ldr	r0, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	1c59      	adds	r1, r3, #1
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6291      	str	r1, [r2, #40]	; 0x28
 800369a:	b2c2      	uxtb	r2, r0
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e00c      	b.n	80036ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	1c58      	adds	r0, r3, #1
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	6288      	str	r0, [r1, #40]	; 0x28
 80036b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4619      	mov	r1, r3
 80036c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d120      	bne.n	8003710 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0220 	bic.w	r2, r2, #32
 80036dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fbf8 	bl	8000efc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	e002      	b.n	8003716 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e000      	b.n	8003716 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
  }
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003760:	f023 030c 	bic.w	r3, r3, #12
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	68f9      	ldr	r1, [r7, #12]
 800376a:	430b      	orrs	r3, r1
 800376c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378c:	f040 80e4 	bne.w	8003958 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4aab      	ldr	r2, [pc, #684]	; (8003a44 <UART_SetConfig+0x324>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <UART_SetConfig+0x84>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4aaa      	ldr	r2, [pc, #680]	; (8003a48 <UART_SetConfig+0x328>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d16c      	bne.n	800387e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80037a4:	f7ff f89a 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009a      	lsls	r2, r3, #2
 80037b2:	441a      	add	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	4aa3      	ldr	r2, [pc, #652]	; (8003a4c <UART_SetConfig+0x32c>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	011c      	lsls	r4, r3, #4
 80037c8:	f7ff f888 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	009a      	lsls	r2, r3, #2
 80037d6:	441a      	add	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fbb2 f5f3 	udiv	r5, r2, r3
 80037e2:	f7ff f87b 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80037e6:	4602      	mov	r2, r0
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009a      	lsls	r2, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	4a93      	ldr	r2, [pc, #588]	; (8003a4c <UART_SetConfig+0x32c>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2264      	movs	r2, #100	; 0x64
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	1aeb      	subs	r3, r5, r3
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	3332      	adds	r3, #50	; 0x32
 8003810:	4a8e      	ldr	r2, [pc, #568]	; (8003a4c <UART_SetConfig+0x32c>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800381e:	441c      	add	r4, r3
 8003820:	f7ff f85c 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8003824:	4602      	mov	r2, r0
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	009a      	lsls	r2, r3, #2
 800382e:	441a      	add	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fbb2 f5f3 	udiv	r5, r2, r3
 800383a:	f7ff f84f 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 800383e:	4602      	mov	r2, r0
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009a      	lsls	r2, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	4a7d      	ldr	r2, [pc, #500]	; (8003a4c <UART_SetConfig+0x32c>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2264      	movs	r2, #100	; 0x64
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	1aeb      	subs	r3, r5, r3
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	3332      	adds	r3, #50	; 0x32
 8003868:	4a78      	ldr	r2, [pc, #480]	; (8003a4c <UART_SetConfig+0x32c>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	f003 0207 	and.w	r2, r3, #7
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4422      	add	r2, r4
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	e154      	b.n	8003b28 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800387e:	f7ff f819 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003882:	4602      	mov	r2, r0
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	009a      	lsls	r2, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	4a6c      	ldr	r2, [pc, #432]	; (8003a4c <UART_SetConfig+0x32c>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	011c      	lsls	r4, r3, #4
 80038a2:	f7ff f807 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009a      	lsls	r2, r3, #2
 80038b0:	441a      	add	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80038bc:	f7fe fffa 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009a      	lsls	r2, r3, #2
 80038ca:	441a      	add	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	4a5d      	ldr	r2, [pc, #372]	; (8003a4c <UART_SetConfig+0x32c>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	2264      	movs	r2, #100	; 0x64
 80038e0:	fb02 f303 	mul.w	r3, r2, r3
 80038e4:	1aeb      	subs	r3, r5, r3
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	3332      	adds	r3, #50	; 0x32
 80038ea:	4a58      	ldr	r2, [pc, #352]	; (8003a4c <UART_SetConfig+0x32c>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038f8:	441c      	add	r4, r3
 80038fa:	f7fe ffdb 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 80038fe:	4602      	mov	r2, r0
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009a      	lsls	r2, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fbb2 f5f3 	udiv	r5, r2, r3
 8003914:	f7fe ffce 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003918:	4602      	mov	r2, r0
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009a      	lsls	r2, r3, #2
 8003922:	441a      	add	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	4a47      	ldr	r2, [pc, #284]	; (8003a4c <UART_SetConfig+0x32c>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	2264      	movs	r2, #100	; 0x64
 8003938:	fb02 f303 	mul.w	r3, r2, r3
 800393c:	1aeb      	subs	r3, r5, r3
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	3332      	adds	r3, #50	; 0x32
 8003942:	4a42      	ldr	r2, [pc, #264]	; (8003a4c <UART_SetConfig+0x32c>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	f003 0207 	and.w	r2, r3, #7
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4422      	add	r2, r4
 8003954:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003956:	e0e7      	b.n	8003b28 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a39      	ldr	r2, [pc, #228]	; (8003a44 <UART_SetConfig+0x324>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <UART_SetConfig+0x24c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a38      	ldr	r2, [pc, #224]	; (8003a48 <UART_SetConfig+0x328>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d171      	bne.n	8003a50 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800396c:	f7fe ffb6 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8003970:	4602      	mov	r2, r0
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	009a      	lsls	r2, r3, #2
 800397a:	441a      	add	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	4a31      	ldr	r2, [pc, #196]	; (8003a4c <UART_SetConfig+0x32c>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	011c      	lsls	r4, r3, #4
 8003990:	f7fe ffa4 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8003994:	4602      	mov	r2, r0
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	fbb2 f5f3 	udiv	r5, r2, r3
 80039aa:	f7fe ff97 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009a      	lsls	r2, r3, #2
 80039b8:	441a      	add	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <UART_SetConfig+0x32c>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2264      	movs	r2, #100	; 0x64
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	1aeb      	subs	r3, r5, r3
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	3332      	adds	r3, #50	; 0x32
 80039d8:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <UART_SetConfig+0x32c>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e4:	441c      	add	r4, r3
 80039e6:	f7fe ff79 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009a      	lsls	r2, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a00:	f7fe ff6c 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009a      	lsls	r2, r3, #2
 8003a0e:	441a      	add	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <UART_SetConfig+0x32c>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	2264      	movs	r2, #100	; 0x64
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
 8003a28:	1aeb      	subs	r3, r5, r3
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	3332      	adds	r3, #50	; 0x32
 8003a2e:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <UART_SetConfig+0x32c>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	f003 020f 	and.w	r2, r3, #15
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4422      	add	r2, r4
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	e071      	b.n	8003b28 <UART_SetConfig+0x408>
 8003a44:	40011000 	.word	0x40011000
 8003a48:	40011400 	.word	0x40011400
 8003a4c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003a50:	f7fe ff30 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009a      	lsls	r2, r3, #2
 8003a5e:	441a      	add	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6a:	4a31      	ldr	r2, [pc, #196]	; (8003b30 <UART_SetConfig+0x410>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	011c      	lsls	r4, r3, #4
 8003a74:	f7fe ff1e 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009a      	lsls	r2, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a8e:	f7fe ff11 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003a92:	4602      	mov	r2, r0
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	4a21      	ldr	r2, [pc, #132]	; (8003b30 <UART_SetConfig+0x410>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2264      	movs	r2, #100	; 0x64
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	1aeb      	subs	r3, r5, r3
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	3332      	adds	r3, #50	; 0x32
 8003abc:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <UART_SetConfig+0x410>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac8:	441c      	add	r4, r3
 8003aca:	f7fe fef3 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fbb2 f5f3 	udiv	r5, r2, r3
 8003ae4:	f7fe fee6 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009a      	lsls	r2, r3, #2
 8003af2:	441a      	add	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	4a0c      	ldr	r2, [pc, #48]	; (8003b30 <UART_SetConfig+0x410>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	2264      	movs	r2, #100	; 0x64
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	1aeb      	subs	r3, r5, r3
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	3332      	adds	r3, #50	; 0x32
 8003b12:	4a07      	ldr	r2, [pc, #28]	; (8003b30 <UART_SetConfig+0x410>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4422      	add	r2, r4
 8003b24:	609a      	str	r2, [r3, #8]
}
 8003b26:	e7ff      	b.n	8003b28 <UART_SetConfig+0x408>
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b30:	51eb851f 	.word	0x51eb851f

08003b34 <__errno>:
 8003b34:	4b01      	ldr	r3, [pc, #4]	; (8003b3c <__errno+0x8>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	2000000c 	.word	0x2000000c

08003b40 <__libc_init_array>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4e0d      	ldr	r6, [pc, #52]	; (8003b78 <__libc_init_array+0x38>)
 8003b44:	4c0d      	ldr	r4, [pc, #52]	; (8003b7c <__libc_init_array+0x3c>)
 8003b46:	1ba4      	subs	r4, r4, r6
 8003b48:	10a4      	asrs	r4, r4, #2
 8003b4a:	2500      	movs	r5, #0
 8003b4c:	42a5      	cmp	r5, r4
 8003b4e:	d109      	bne.n	8003b64 <__libc_init_array+0x24>
 8003b50:	4e0b      	ldr	r6, [pc, #44]	; (8003b80 <__libc_init_array+0x40>)
 8003b52:	4c0c      	ldr	r4, [pc, #48]	; (8003b84 <__libc_init_array+0x44>)
 8003b54:	f000 ff0c 	bl	8004970 <_init>
 8003b58:	1ba4      	subs	r4, r4, r6
 8003b5a:	10a4      	asrs	r4, r4, #2
 8003b5c:	2500      	movs	r5, #0
 8003b5e:	42a5      	cmp	r5, r4
 8003b60:	d105      	bne.n	8003b6e <__libc_init_array+0x2e>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b68:	4798      	blx	r3
 8003b6a:	3501      	adds	r5, #1
 8003b6c:	e7ee      	b.n	8003b4c <__libc_init_array+0xc>
 8003b6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b72:	4798      	blx	r3
 8003b74:	3501      	adds	r5, #1
 8003b76:	e7f2      	b.n	8003b5e <__libc_init_array+0x1e>
 8003b78:	08004a98 	.word	0x08004a98
 8003b7c:	08004a98 	.word	0x08004a98
 8003b80:	08004a98 	.word	0x08004a98
 8003b84:	08004a9c 	.word	0x08004a9c

08003b88 <malloc>:
 8003b88:	4b02      	ldr	r3, [pc, #8]	; (8003b94 <malloc+0xc>)
 8003b8a:	4601      	mov	r1, r0
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	f000 b859 	b.w	8003c44 <_malloc_r>
 8003b92:	bf00      	nop
 8003b94:	2000000c 	.word	0x2000000c

08003b98 <memset>:
 8003b98:	4402      	add	r2, r0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <_free_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4605      	mov	r5, r0
 8003bac:	2900      	cmp	r1, #0
 8003bae:	d045      	beq.n	8003c3c <_free_r+0x94>
 8003bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb4:	1f0c      	subs	r4, r1, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bfb8      	it	lt
 8003bba:	18e4      	addlt	r4, r4, r3
 8003bbc:	f000 f98e 	bl	8003edc <__malloc_lock>
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <_free_r+0x98>)
 8003bc2:	6813      	ldr	r3, [r2, #0]
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	b933      	cbnz	r3, 8003bd6 <_free_r+0x2e>
 8003bc8:	6063      	str	r3, [r4, #4]
 8003bca:	6014      	str	r4, [r2, #0]
 8003bcc:	4628      	mov	r0, r5
 8003bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bd2:	f000 b984 	b.w	8003ede <__malloc_unlock>
 8003bd6:	42a3      	cmp	r3, r4
 8003bd8:	d90c      	bls.n	8003bf4 <_free_r+0x4c>
 8003bda:	6821      	ldr	r1, [r4, #0]
 8003bdc:	1862      	adds	r2, r4, r1
 8003bde:	4293      	cmp	r3, r2
 8003be0:	bf04      	itt	eq
 8003be2:	681a      	ldreq	r2, [r3, #0]
 8003be4:	685b      	ldreq	r3, [r3, #4]
 8003be6:	6063      	str	r3, [r4, #4]
 8003be8:	bf04      	itt	eq
 8003bea:	1852      	addeq	r2, r2, r1
 8003bec:	6022      	streq	r2, [r4, #0]
 8003bee:	6004      	str	r4, [r0, #0]
 8003bf0:	e7ec      	b.n	8003bcc <_free_r+0x24>
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	b10a      	cbz	r2, 8003bfc <_free_r+0x54>
 8003bf8:	42a2      	cmp	r2, r4
 8003bfa:	d9fa      	bls.n	8003bf2 <_free_r+0x4a>
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	1858      	adds	r0, r3, r1
 8003c00:	42a0      	cmp	r0, r4
 8003c02:	d10b      	bne.n	8003c1c <_free_r+0x74>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	4401      	add	r1, r0
 8003c08:	1858      	adds	r0, r3, r1
 8003c0a:	4282      	cmp	r2, r0
 8003c0c:	6019      	str	r1, [r3, #0]
 8003c0e:	d1dd      	bne.n	8003bcc <_free_r+0x24>
 8003c10:	6810      	ldr	r0, [r2, #0]
 8003c12:	6852      	ldr	r2, [r2, #4]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	4401      	add	r1, r0
 8003c18:	6019      	str	r1, [r3, #0]
 8003c1a:	e7d7      	b.n	8003bcc <_free_r+0x24>
 8003c1c:	d902      	bls.n	8003c24 <_free_r+0x7c>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	e7d3      	b.n	8003bcc <_free_r+0x24>
 8003c24:	6820      	ldr	r0, [r4, #0]
 8003c26:	1821      	adds	r1, r4, r0
 8003c28:	428a      	cmp	r2, r1
 8003c2a:	bf04      	itt	eq
 8003c2c:	6811      	ldreq	r1, [r2, #0]
 8003c2e:	6852      	ldreq	r2, [r2, #4]
 8003c30:	6062      	str	r2, [r4, #4]
 8003c32:	bf04      	itt	eq
 8003c34:	1809      	addeq	r1, r1, r0
 8003c36:	6021      	streq	r1, [r4, #0]
 8003c38:	605c      	str	r4, [r3, #4]
 8003c3a:	e7c7      	b.n	8003bcc <_free_r+0x24>
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
 8003c3e:	bf00      	nop
 8003c40:	200000a4 	.word	0x200000a4

08003c44 <_malloc_r>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	1ccd      	adds	r5, r1, #3
 8003c48:	f025 0503 	bic.w	r5, r5, #3
 8003c4c:	3508      	adds	r5, #8
 8003c4e:	2d0c      	cmp	r5, #12
 8003c50:	bf38      	it	cc
 8003c52:	250c      	movcc	r5, #12
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	4606      	mov	r6, r0
 8003c58:	db01      	blt.n	8003c5e <_malloc_r+0x1a>
 8003c5a:	42a9      	cmp	r1, r5
 8003c5c:	d903      	bls.n	8003c66 <_malloc_r+0x22>
 8003c5e:	230c      	movs	r3, #12
 8003c60:	6033      	str	r3, [r6, #0]
 8003c62:	2000      	movs	r0, #0
 8003c64:	bd70      	pop	{r4, r5, r6, pc}
 8003c66:	f000 f939 	bl	8003edc <__malloc_lock>
 8003c6a:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <_malloc_r+0xac>)
 8003c6c:	6814      	ldr	r4, [r2, #0]
 8003c6e:	4621      	mov	r1, r4
 8003c70:	b991      	cbnz	r1, 8003c98 <_malloc_r+0x54>
 8003c72:	4c20      	ldr	r4, [pc, #128]	; (8003cf4 <_malloc_r+0xb0>)
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	b91b      	cbnz	r3, 8003c80 <_malloc_r+0x3c>
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f000 f855 	bl	8003d28 <_sbrk_r>
 8003c7e:	6020      	str	r0, [r4, #0]
 8003c80:	4629      	mov	r1, r5
 8003c82:	4630      	mov	r0, r6
 8003c84:	f000 f850 	bl	8003d28 <_sbrk_r>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d124      	bne.n	8003cd6 <_malloc_r+0x92>
 8003c8c:	230c      	movs	r3, #12
 8003c8e:	6033      	str	r3, [r6, #0]
 8003c90:	4630      	mov	r0, r6
 8003c92:	f000 f924 	bl	8003ede <__malloc_unlock>
 8003c96:	e7e4      	b.n	8003c62 <_malloc_r+0x1e>
 8003c98:	680b      	ldr	r3, [r1, #0]
 8003c9a:	1b5b      	subs	r3, r3, r5
 8003c9c:	d418      	bmi.n	8003cd0 <_malloc_r+0x8c>
 8003c9e:	2b0b      	cmp	r3, #11
 8003ca0:	d90f      	bls.n	8003cc2 <_malloc_r+0x7e>
 8003ca2:	600b      	str	r3, [r1, #0]
 8003ca4:	50cd      	str	r5, [r1, r3]
 8003ca6:	18cc      	adds	r4, r1, r3
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f000 f918 	bl	8003ede <__malloc_unlock>
 8003cae:	f104 000b 	add.w	r0, r4, #11
 8003cb2:	1d23      	adds	r3, r4, #4
 8003cb4:	f020 0007 	bic.w	r0, r0, #7
 8003cb8:	1ac3      	subs	r3, r0, r3
 8003cba:	d0d3      	beq.n	8003c64 <_malloc_r+0x20>
 8003cbc:	425a      	negs	r2, r3
 8003cbe:	50e2      	str	r2, [r4, r3]
 8003cc0:	e7d0      	b.n	8003c64 <_malloc_r+0x20>
 8003cc2:	428c      	cmp	r4, r1
 8003cc4:	684b      	ldr	r3, [r1, #4]
 8003cc6:	bf16      	itet	ne
 8003cc8:	6063      	strne	r3, [r4, #4]
 8003cca:	6013      	streq	r3, [r2, #0]
 8003ccc:	460c      	movne	r4, r1
 8003cce:	e7eb      	b.n	8003ca8 <_malloc_r+0x64>
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	6849      	ldr	r1, [r1, #4]
 8003cd4:	e7cc      	b.n	8003c70 <_malloc_r+0x2c>
 8003cd6:	1cc4      	adds	r4, r0, #3
 8003cd8:	f024 0403 	bic.w	r4, r4, #3
 8003cdc:	42a0      	cmp	r0, r4
 8003cde:	d005      	beq.n	8003cec <_malloc_r+0xa8>
 8003ce0:	1a21      	subs	r1, r4, r0
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f000 f820 	bl	8003d28 <_sbrk_r>
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d0cf      	beq.n	8003c8c <_malloc_r+0x48>
 8003cec:	6025      	str	r5, [r4, #0]
 8003cee:	e7db      	b.n	8003ca8 <_malloc_r+0x64>
 8003cf0:	200000a4 	.word	0x200000a4
 8003cf4:	200000a8 	.word	0x200000a8

08003cf8 <iprintf>:
 8003cf8:	b40f      	push	{r0, r1, r2, r3}
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <iprintf+0x2c>)
 8003cfc:	b513      	push	{r0, r1, r4, lr}
 8003cfe:	681c      	ldr	r4, [r3, #0]
 8003d00:	b124      	cbz	r4, 8003d0c <iprintf+0x14>
 8003d02:	69a3      	ldr	r3, [r4, #24]
 8003d04:	b913      	cbnz	r3, 8003d0c <iprintf+0x14>
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 f85e 	bl	8003dc8 <__sinit>
 8003d0c:	ab05      	add	r3, sp, #20
 8003d0e:	9a04      	ldr	r2, [sp, #16]
 8003d10:	68a1      	ldr	r1, [r4, #8]
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	4620      	mov	r0, r4
 8003d16:	f000 f90d 	bl	8003f34 <_vfiprintf_r>
 8003d1a:	b002      	add	sp, #8
 8003d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d20:	b004      	add	sp, #16
 8003d22:	4770      	bx	lr
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <_sbrk_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4c06      	ldr	r4, [pc, #24]	; (8003d44 <_sbrk_r+0x1c>)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4605      	mov	r5, r0
 8003d30:	4608      	mov	r0, r1
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	f7fd fca2 	bl	800167c <_sbrk>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d102      	bne.n	8003d42 <_sbrk_r+0x1a>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	b103      	cbz	r3, 8003d42 <_sbrk_r+0x1a>
 8003d40:	602b      	str	r3, [r5, #0]
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	20000198 	.word	0x20000198

08003d48 <std>:
 8003d48:	2300      	movs	r3, #0
 8003d4a:	b510      	push	{r4, lr}
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d52:	6083      	str	r3, [r0, #8]
 8003d54:	8181      	strh	r1, [r0, #12]
 8003d56:	6643      	str	r3, [r0, #100]	; 0x64
 8003d58:	81c2      	strh	r2, [r0, #14]
 8003d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d5e:	6183      	str	r3, [r0, #24]
 8003d60:	4619      	mov	r1, r3
 8003d62:	2208      	movs	r2, #8
 8003d64:	305c      	adds	r0, #92	; 0x5c
 8003d66:	f7ff ff17 	bl	8003b98 <memset>
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <std+0x38>)
 8003d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <std+0x3c>)
 8003d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <std+0x40>)
 8003d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <std+0x44>)
 8003d78:	6224      	str	r4, [r4, #32]
 8003d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	bf00      	nop
 8003d80:	08004471 	.word	0x08004471
 8003d84:	08004493 	.word	0x08004493
 8003d88:	080044cb 	.word	0x080044cb
 8003d8c:	080044ef 	.word	0x080044ef

08003d90 <_cleanup_r>:
 8003d90:	4901      	ldr	r1, [pc, #4]	; (8003d98 <_cleanup_r+0x8>)
 8003d92:	f000 b885 	b.w	8003ea0 <_fwalk_reent>
 8003d96:	bf00      	nop
 8003d98:	080047c9 	.word	0x080047c9

08003d9c <__sfmoreglue>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	1e4a      	subs	r2, r1, #1
 8003da0:	2568      	movs	r5, #104	; 0x68
 8003da2:	4355      	muls	r5, r2
 8003da4:	460e      	mov	r6, r1
 8003da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003daa:	f7ff ff4b 	bl	8003c44 <_malloc_r>
 8003dae:	4604      	mov	r4, r0
 8003db0:	b140      	cbz	r0, 8003dc4 <__sfmoreglue+0x28>
 8003db2:	2100      	movs	r1, #0
 8003db4:	e9c0 1600 	strd	r1, r6, [r0]
 8003db8:	300c      	adds	r0, #12
 8003dba:	60a0      	str	r0, [r4, #8]
 8003dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003dc0:	f7ff feea 	bl	8003b98 <memset>
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	bd70      	pop	{r4, r5, r6, pc}

08003dc8 <__sinit>:
 8003dc8:	6983      	ldr	r3, [r0, #24]
 8003dca:	b510      	push	{r4, lr}
 8003dcc:	4604      	mov	r4, r0
 8003dce:	bb33      	cbnz	r3, 8003e1e <__sinit+0x56>
 8003dd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003dd4:	6503      	str	r3, [r0, #80]	; 0x50
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <__sinit+0x58>)
 8003dd8:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <__sinit+0x5c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6282      	str	r2, [r0, #40]	; 0x28
 8003dde:	4298      	cmp	r0, r3
 8003de0:	bf04      	itt	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	6183      	streq	r3, [r0, #24]
 8003de6:	f000 f81f 	bl	8003e28 <__sfp>
 8003dea:	6060      	str	r0, [r4, #4]
 8003dec:	4620      	mov	r0, r4
 8003dee:	f000 f81b 	bl	8003e28 <__sfp>
 8003df2:	60a0      	str	r0, [r4, #8]
 8003df4:	4620      	mov	r0, r4
 8003df6:	f000 f817 	bl	8003e28 <__sfp>
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	60e0      	str	r0, [r4, #12]
 8003dfe:	2104      	movs	r1, #4
 8003e00:	6860      	ldr	r0, [r4, #4]
 8003e02:	f7ff ffa1 	bl	8003d48 <std>
 8003e06:	2201      	movs	r2, #1
 8003e08:	2109      	movs	r1, #9
 8003e0a:	68a0      	ldr	r0, [r4, #8]
 8003e0c:	f7ff ff9c 	bl	8003d48 <std>
 8003e10:	2202      	movs	r2, #2
 8003e12:	2112      	movs	r1, #18
 8003e14:	68e0      	ldr	r0, [r4, #12]
 8003e16:	f7ff ff97 	bl	8003d48 <std>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	61a3      	str	r3, [r4, #24]
 8003e1e:	bd10      	pop	{r4, pc}
 8003e20:	080049f8 	.word	0x080049f8
 8003e24:	08003d91 	.word	0x08003d91

08003e28 <__sfp>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <__sfp+0x70>)
 8003e2c:	681e      	ldr	r6, [r3, #0]
 8003e2e:	69b3      	ldr	r3, [r6, #24]
 8003e30:	4607      	mov	r7, r0
 8003e32:	b913      	cbnz	r3, 8003e3a <__sfp+0x12>
 8003e34:	4630      	mov	r0, r6
 8003e36:	f7ff ffc7 	bl	8003dc8 <__sinit>
 8003e3a:	3648      	adds	r6, #72	; 0x48
 8003e3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	d503      	bpl.n	8003e4c <__sfp+0x24>
 8003e44:	6833      	ldr	r3, [r6, #0]
 8003e46:	b133      	cbz	r3, 8003e56 <__sfp+0x2e>
 8003e48:	6836      	ldr	r6, [r6, #0]
 8003e4a:	e7f7      	b.n	8003e3c <__sfp+0x14>
 8003e4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e50:	b16d      	cbz	r5, 8003e6e <__sfp+0x46>
 8003e52:	3468      	adds	r4, #104	; 0x68
 8003e54:	e7f4      	b.n	8003e40 <__sfp+0x18>
 8003e56:	2104      	movs	r1, #4
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7ff ff9f 	bl	8003d9c <__sfmoreglue>
 8003e5e:	6030      	str	r0, [r6, #0]
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d1f1      	bne.n	8003e48 <__sfp+0x20>
 8003e64:	230c      	movs	r3, #12
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4604      	mov	r4, r0
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <__sfp+0x74>)
 8003e70:	6665      	str	r5, [r4, #100]	; 0x64
 8003e72:	e9c4 5500 	strd	r5, r5, [r4]
 8003e76:	60a5      	str	r5, [r4, #8]
 8003e78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e80:	2208      	movs	r2, #8
 8003e82:	4629      	mov	r1, r5
 8003e84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e88:	f7ff fe86 	bl	8003b98 <memset>
 8003e8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e94:	e7e9      	b.n	8003e6a <__sfp+0x42>
 8003e96:	bf00      	nop
 8003e98:	080049f8 	.word	0x080049f8
 8003e9c:	ffff0001 	.word	0xffff0001

08003ea0 <_fwalk_reent>:
 8003ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea4:	4680      	mov	r8, r0
 8003ea6:	4689      	mov	r9, r1
 8003ea8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003eac:	2600      	movs	r6, #0
 8003eae:	b914      	cbnz	r4, 8003eb6 <_fwalk_reent+0x16>
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003eba:	3f01      	subs	r7, #1
 8003ebc:	d501      	bpl.n	8003ec2 <_fwalk_reent+0x22>
 8003ebe:	6824      	ldr	r4, [r4, #0]
 8003ec0:	e7f5      	b.n	8003eae <_fwalk_reent+0xe>
 8003ec2:	89ab      	ldrh	r3, [r5, #12]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d907      	bls.n	8003ed8 <_fwalk_reent+0x38>
 8003ec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	d003      	beq.n	8003ed8 <_fwalk_reent+0x38>
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	47c8      	blx	r9
 8003ed6:	4306      	orrs	r6, r0
 8003ed8:	3568      	adds	r5, #104	; 0x68
 8003eda:	e7ee      	b.n	8003eba <_fwalk_reent+0x1a>

08003edc <__malloc_lock>:
 8003edc:	4770      	bx	lr

08003ede <__malloc_unlock>:
 8003ede:	4770      	bx	lr

08003ee0 <__sfputc_r>:
 8003ee0:	6893      	ldr	r3, [r2, #8]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	b410      	push	{r4}
 8003ee8:	6093      	str	r3, [r2, #8]
 8003eea:	da08      	bge.n	8003efe <__sfputc_r+0x1e>
 8003eec:	6994      	ldr	r4, [r2, #24]
 8003eee:	42a3      	cmp	r3, r4
 8003ef0:	db01      	blt.n	8003ef6 <__sfputc_r+0x16>
 8003ef2:	290a      	cmp	r1, #10
 8003ef4:	d103      	bne.n	8003efe <__sfputc_r+0x1e>
 8003ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003efa:	f000 bafd 	b.w	80044f8 <__swbuf_r>
 8003efe:	6813      	ldr	r3, [r2, #0]
 8003f00:	1c58      	adds	r0, r3, #1
 8003f02:	6010      	str	r0, [r2, #0]
 8003f04:	7019      	strb	r1, [r3, #0]
 8003f06:	4608      	mov	r0, r1
 8003f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <__sfputs_r>:
 8003f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f10:	4606      	mov	r6, r0
 8003f12:	460f      	mov	r7, r1
 8003f14:	4614      	mov	r4, r2
 8003f16:	18d5      	adds	r5, r2, r3
 8003f18:	42ac      	cmp	r4, r5
 8003f1a:	d101      	bne.n	8003f20 <__sfputs_r+0x12>
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	e007      	b.n	8003f30 <__sfputs_r+0x22>
 8003f20:	463a      	mov	r2, r7
 8003f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f26:	4630      	mov	r0, r6
 8003f28:	f7ff ffda 	bl	8003ee0 <__sfputc_r>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d1f3      	bne.n	8003f18 <__sfputs_r+0xa>
 8003f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f34 <_vfiprintf_r>:
 8003f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f38:	460c      	mov	r4, r1
 8003f3a:	b09d      	sub	sp, #116	; 0x74
 8003f3c:	4617      	mov	r7, r2
 8003f3e:	461d      	mov	r5, r3
 8003f40:	4606      	mov	r6, r0
 8003f42:	b118      	cbz	r0, 8003f4c <_vfiprintf_r+0x18>
 8003f44:	6983      	ldr	r3, [r0, #24]
 8003f46:	b90b      	cbnz	r3, 8003f4c <_vfiprintf_r+0x18>
 8003f48:	f7ff ff3e 	bl	8003dc8 <__sinit>
 8003f4c:	4b7c      	ldr	r3, [pc, #496]	; (8004140 <_vfiprintf_r+0x20c>)
 8003f4e:	429c      	cmp	r4, r3
 8003f50:	d158      	bne.n	8004004 <_vfiprintf_r+0xd0>
 8003f52:	6874      	ldr	r4, [r6, #4]
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	0718      	lsls	r0, r3, #28
 8003f58:	d55e      	bpl.n	8004018 <_vfiprintf_r+0xe4>
 8003f5a:	6923      	ldr	r3, [r4, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d05b      	beq.n	8004018 <_vfiprintf_r+0xe4>
 8003f60:	2300      	movs	r3, #0
 8003f62:	9309      	str	r3, [sp, #36]	; 0x24
 8003f64:	2320      	movs	r3, #32
 8003f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f6a:	2330      	movs	r3, #48	; 0x30
 8003f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f70:	9503      	str	r5, [sp, #12]
 8003f72:	f04f 0b01 	mov.w	fp, #1
 8003f76:	46b8      	mov	r8, r7
 8003f78:	4645      	mov	r5, r8
 8003f7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f7e:	b10b      	cbz	r3, 8003f84 <_vfiprintf_r+0x50>
 8003f80:	2b25      	cmp	r3, #37	; 0x25
 8003f82:	d154      	bne.n	800402e <_vfiprintf_r+0xfa>
 8003f84:	ebb8 0a07 	subs.w	sl, r8, r7
 8003f88:	d00b      	beq.n	8003fa2 <_vfiprintf_r+0x6e>
 8003f8a:	4653      	mov	r3, sl
 8003f8c:	463a      	mov	r2, r7
 8003f8e:	4621      	mov	r1, r4
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7ff ffbc 	bl	8003f0e <__sfputs_r>
 8003f96:	3001      	adds	r0, #1
 8003f98:	f000 80c2 	beq.w	8004120 <_vfiprintf_r+0x1ec>
 8003f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f9e:	4453      	add	r3, sl
 8003fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa2:	f898 3000 	ldrb.w	r3, [r8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80ba 	beq.w	8004120 <_vfiprintf_r+0x1ec>
 8003fac:	2300      	movs	r3, #0
 8003fae:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	9307      	str	r3, [sp, #28]
 8003fba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fbe:	931a      	str	r3, [sp, #104]	; 0x68
 8003fc0:	46a8      	mov	r8, r5
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003fc8:	485e      	ldr	r0, [pc, #376]	; (8004144 <_vfiprintf_r+0x210>)
 8003fca:	f7fc f921 	bl	8000210 <memchr>
 8003fce:	9b04      	ldr	r3, [sp, #16]
 8003fd0:	bb78      	cbnz	r0, 8004032 <_vfiprintf_r+0xfe>
 8003fd2:	06d9      	lsls	r1, r3, #27
 8003fd4:	bf44      	itt	mi
 8003fd6:	2220      	movmi	r2, #32
 8003fd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fdc:	071a      	lsls	r2, r3, #28
 8003fde:	bf44      	itt	mi
 8003fe0:	222b      	movmi	r2, #43	; 0x2b
 8003fe2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fe6:	782a      	ldrb	r2, [r5, #0]
 8003fe8:	2a2a      	cmp	r2, #42	; 0x2a
 8003fea:	d02a      	beq.n	8004042 <_vfiprintf_r+0x10e>
 8003fec:	9a07      	ldr	r2, [sp, #28]
 8003fee:	46a8      	mov	r8, r5
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	250a      	movs	r5, #10
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ffa:	3b30      	subs	r3, #48	; 0x30
 8003ffc:	2b09      	cmp	r3, #9
 8003ffe:	d969      	bls.n	80040d4 <_vfiprintf_r+0x1a0>
 8004000:	b360      	cbz	r0, 800405c <_vfiprintf_r+0x128>
 8004002:	e024      	b.n	800404e <_vfiprintf_r+0x11a>
 8004004:	4b50      	ldr	r3, [pc, #320]	; (8004148 <_vfiprintf_r+0x214>)
 8004006:	429c      	cmp	r4, r3
 8004008:	d101      	bne.n	800400e <_vfiprintf_r+0xda>
 800400a:	68b4      	ldr	r4, [r6, #8]
 800400c:	e7a2      	b.n	8003f54 <_vfiprintf_r+0x20>
 800400e:	4b4f      	ldr	r3, [pc, #316]	; (800414c <_vfiprintf_r+0x218>)
 8004010:	429c      	cmp	r4, r3
 8004012:	bf08      	it	eq
 8004014:	68f4      	ldreq	r4, [r6, #12]
 8004016:	e79d      	b.n	8003f54 <_vfiprintf_r+0x20>
 8004018:	4621      	mov	r1, r4
 800401a:	4630      	mov	r0, r6
 800401c:	f000 fad0 	bl	80045c0 <__swsetup_r>
 8004020:	2800      	cmp	r0, #0
 8004022:	d09d      	beq.n	8003f60 <_vfiprintf_r+0x2c>
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	b01d      	add	sp, #116	; 0x74
 800402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402e:	46a8      	mov	r8, r5
 8004030:	e7a2      	b.n	8003f78 <_vfiprintf_r+0x44>
 8004032:	4a44      	ldr	r2, [pc, #272]	; (8004144 <_vfiprintf_r+0x210>)
 8004034:	1a80      	subs	r0, r0, r2
 8004036:	fa0b f000 	lsl.w	r0, fp, r0
 800403a:	4318      	orrs	r0, r3
 800403c:	9004      	str	r0, [sp, #16]
 800403e:	4645      	mov	r5, r8
 8004040:	e7be      	b.n	8003fc0 <_vfiprintf_r+0x8c>
 8004042:	9a03      	ldr	r2, [sp, #12]
 8004044:	1d11      	adds	r1, r2, #4
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	9103      	str	r1, [sp, #12]
 800404a:	2a00      	cmp	r2, #0
 800404c:	db01      	blt.n	8004052 <_vfiprintf_r+0x11e>
 800404e:	9207      	str	r2, [sp, #28]
 8004050:	e004      	b.n	800405c <_vfiprintf_r+0x128>
 8004052:	4252      	negs	r2, r2
 8004054:	f043 0302 	orr.w	r3, r3, #2
 8004058:	9207      	str	r2, [sp, #28]
 800405a:	9304      	str	r3, [sp, #16]
 800405c:	f898 3000 	ldrb.w	r3, [r8]
 8004060:	2b2e      	cmp	r3, #46	; 0x2e
 8004062:	d10e      	bne.n	8004082 <_vfiprintf_r+0x14e>
 8004064:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004068:	2b2a      	cmp	r3, #42	; 0x2a
 800406a:	d138      	bne.n	80040de <_vfiprintf_r+0x1aa>
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	1d1a      	adds	r2, r3, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	9203      	str	r2, [sp, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	bfb8      	it	lt
 8004078:	f04f 33ff 	movlt.w	r3, #4294967295
 800407c:	f108 0802 	add.w	r8, r8, #2
 8004080:	9305      	str	r3, [sp, #20]
 8004082:	4d33      	ldr	r5, [pc, #204]	; (8004150 <_vfiprintf_r+0x21c>)
 8004084:	f898 1000 	ldrb.w	r1, [r8]
 8004088:	2203      	movs	r2, #3
 800408a:	4628      	mov	r0, r5
 800408c:	f7fc f8c0 	bl	8000210 <memchr>
 8004090:	b140      	cbz	r0, 80040a4 <_vfiprintf_r+0x170>
 8004092:	2340      	movs	r3, #64	; 0x40
 8004094:	1b40      	subs	r0, r0, r5
 8004096:	fa03 f000 	lsl.w	r0, r3, r0
 800409a:	9b04      	ldr	r3, [sp, #16]
 800409c:	4303      	orrs	r3, r0
 800409e:	f108 0801 	add.w	r8, r8, #1
 80040a2:	9304      	str	r3, [sp, #16]
 80040a4:	f898 1000 	ldrb.w	r1, [r8]
 80040a8:	482a      	ldr	r0, [pc, #168]	; (8004154 <_vfiprintf_r+0x220>)
 80040aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040ae:	2206      	movs	r2, #6
 80040b0:	f108 0701 	add.w	r7, r8, #1
 80040b4:	f7fc f8ac 	bl	8000210 <memchr>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d037      	beq.n	800412c <_vfiprintf_r+0x1f8>
 80040bc:	4b26      	ldr	r3, [pc, #152]	; (8004158 <_vfiprintf_r+0x224>)
 80040be:	bb1b      	cbnz	r3, 8004108 <_vfiprintf_r+0x1d4>
 80040c0:	9b03      	ldr	r3, [sp, #12]
 80040c2:	3307      	adds	r3, #7
 80040c4:	f023 0307 	bic.w	r3, r3, #7
 80040c8:	3308      	adds	r3, #8
 80040ca:	9303      	str	r3, [sp, #12]
 80040cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ce:	444b      	add	r3, r9
 80040d0:	9309      	str	r3, [sp, #36]	; 0x24
 80040d2:	e750      	b.n	8003f76 <_vfiprintf_r+0x42>
 80040d4:	fb05 3202 	mla	r2, r5, r2, r3
 80040d8:	2001      	movs	r0, #1
 80040da:	4688      	mov	r8, r1
 80040dc:	e78a      	b.n	8003ff4 <_vfiprintf_r+0xc0>
 80040de:	2300      	movs	r3, #0
 80040e0:	f108 0801 	add.w	r8, r8, #1
 80040e4:	9305      	str	r3, [sp, #20]
 80040e6:	4619      	mov	r1, r3
 80040e8:	250a      	movs	r5, #10
 80040ea:	4640      	mov	r0, r8
 80040ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040f0:	3a30      	subs	r2, #48	; 0x30
 80040f2:	2a09      	cmp	r2, #9
 80040f4:	d903      	bls.n	80040fe <_vfiprintf_r+0x1ca>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0c3      	beq.n	8004082 <_vfiprintf_r+0x14e>
 80040fa:	9105      	str	r1, [sp, #20]
 80040fc:	e7c1      	b.n	8004082 <_vfiprintf_r+0x14e>
 80040fe:	fb05 2101 	mla	r1, r5, r1, r2
 8004102:	2301      	movs	r3, #1
 8004104:	4680      	mov	r8, r0
 8004106:	e7f0      	b.n	80040ea <_vfiprintf_r+0x1b6>
 8004108:	ab03      	add	r3, sp, #12
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	4622      	mov	r2, r4
 800410e:	4b13      	ldr	r3, [pc, #76]	; (800415c <_vfiprintf_r+0x228>)
 8004110:	a904      	add	r1, sp, #16
 8004112:	4630      	mov	r0, r6
 8004114:	f3af 8000 	nop.w
 8004118:	f1b0 3fff 	cmp.w	r0, #4294967295
 800411c:	4681      	mov	r9, r0
 800411e:	d1d5      	bne.n	80040cc <_vfiprintf_r+0x198>
 8004120:	89a3      	ldrh	r3, [r4, #12]
 8004122:	065b      	lsls	r3, r3, #25
 8004124:	f53f af7e 	bmi.w	8004024 <_vfiprintf_r+0xf0>
 8004128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800412a:	e77d      	b.n	8004028 <_vfiprintf_r+0xf4>
 800412c:	ab03      	add	r3, sp, #12
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4622      	mov	r2, r4
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <_vfiprintf_r+0x228>)
 8004134:	a904      	add	r1, sp, #16
 8004136:	4630      	mov	r0, r6
 8004138:	f000 f888 	bl	800424c <_printf_i>
 800413c:	e7ec      	b.n	8004118 <_vfiprintf_r+0x1e4>
 800413e:	bf00      	nop
 8004140:	08004a1c 	.word	0x08004a1c
 8004144:	08004a5c 	.word	0x08004a5c
 8004148:	08004a3c 	.word	0x08004a3c
 800414c:	080049fc 	.word	0x080049fc
 8004150:	08004a62 	.word	0x08004a62
 8004154:	08004a66 	.word	0x08004a66
 8004158:	00000000 	.word	0x00000000
 800415c:	08003f0f 	.word	0x08003f0f

08004160 <_printf_common>:
 8004160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	4691      	mov	r9, r2
 8004166:	461f      	mov	r7, r3
 8004168:	688a      	ldr	r2, [r1, #8]
 800416a:	690b      	ldr	r3, [r1, #16]
 800416c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004170:	4293      	cmp	r3, r2
 8004172:	bfb8      	it	lt
 8004174:	4613      	movlt	r3, r2
 8004176:	f8c9 3000 	str.w	r3, [r9]
 800417a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800417e:	4606      	mov	r6, r0
 8004180:	460c      	mov	r4, r1
 8004182:	b112      	cbz	r2, 800418a <_printf_common+0x2a>
 8004184:	3301      	adds	r3, #1
 8004186:	f8c9 3000 	str.w	r3, [r9]
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	0699      	lsls	r1, r3, #26
 800418e:	bf42      	ittt	mi
 8004190:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004194:	3302      	addmi	r3, #2
 8004196:	f8c9 3000 	strmi.w	r3, [r9]
 800419a:	6825      	ldr	r5, [r4, #0]
 800419c:	f015 0506 	ands.w	r5, r5, #6
 80041a0:	d107      	bne.n	80041b2 <_printf_common+0x52>
 80041a2:	f104 0a19 	add.w	sl, r4, #25
 80041a6:	68e3      	ldr	r3, [r4, #12]
 80041a8:	f8d9 2000 	ldr.w	r2, [r9]
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	42ab      	cmp	r3, r5
 80041b0:	dc28      	bgt.n	8004204 <_printf_common+0xa4>
 80041b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	3300      	adds	r3, #0
 80041ba:	bf18      	it	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	0692      	lsls	r2, r2, #26
 80041c0:	d42d      	bmi.n	800421e <_printf_common+0xbe>
 80041c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041c6:	4639      	mov	r1, r7
 80041c8:	4630      	mov	r0, r6
 80041ca:	47c0      	blx	r8
 80041cc:	3001      	adds	r0, #1
 80041ce:	d020      	beq.n	8004212 <_printf_common+0xb2>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	68e5      	ldr	r5, [r4, #12]
 80041d4:	f8d9 2000 	ldr.w	r2, [r9]
 80041d8:	f003 0306 	and.w	r3, r3, #6
 80041dc:	2b04      	cmp	r3, #4
 80041de:	bf08      	it	eq
 80041e0:	1aad      	subeq	r5, r5, r2
 80041e2:	68a3      	ldr	r3, [r4, #8]
 80041e4:	6922      	ldr	r2, [r4, #16]
 80041e6:	bf0c      	ite	eq
 80041e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041ec:	2500      	movne	r5, #0
 80041ee:	4293      	cmp	r3, r2
 80041f0:	bfc4      	itt	gt
 80041f2:	1a9b      	subgt	r3, r3, r2
 80041f4:	18ed      	addgt	r5, r5, r3
 80041f6:	f04f 0900 	mov.w	r9, #0
 80041fa:	341a      	adds	r4, #26
 80041fc:	454d      	cmp	r5, r9
 80041fe:	d11a      	bne.n	8004236 <_printf_common+0xd6>
 8004200:	2000      	movs	r0, #0
 8004202:	e008      	b.n	8004216 <_printf_common+0xb6>
 8004204:	2301      	movs	r3, #1
 8004206:	4652      	mov	r2, sl
 8004208:	4639      	mov	r1, r7
 800420a:	4630      	mov	r0, r6
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d103      	bne.n	800421a <_printf_common+0xba>
 8004212:	f04f 30ff 	mov.w	r0, #4294967295
 8004216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421a:	3501      	adds	r5, #1
 800421c:	e7c3      	b.n	80041a6 <_printf_common+0x46>
 800421e:	18e1      	adds	r1, r4, r3
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	2030      	movs	r0, #48	; 0x30
 8004224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004228:	4422      	add	r2, r4
 800422a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800422e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004232:	3302      	adds	r3, #2
 8004234:	e7c5      	b.n	80041c2 <_printf_common+0x62>
 8004236:	2301      	movs	r3, #1
 8004238:	4622      	mov	r2, r4
 800423a:	4639      	mov	r1, r7
 800423c:	4630      	mov	r0, r6
 800423e:	47c0      	blx	r8
 8004240:	3001      	adds	r0, #1
 8004242:	d0e6      	beq.n	8004212 <_printf_common+0xb2>
 8004244:	f109 0901 	add.w	r9, r9, #1
 8004248:	e7d8      	b.n	80041fc <_printf_common+0x9c>
	...

0800424c <_printf_i>:
 800424c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004250:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004254:	460c      	mov	r4, r1
 8004256:	7e09      	ldrb	r1, [r1, #24]
 8004258:	b085      	sub	sp, #20
 800425a:	296e      	cmp	r1, #110	; 0x6e
 800425c:	4617      	mov	r7, r2
 800425e:	4606      	mov	r6, r0
 8004260:	4698      	mov	r8, r3
 8004262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004264:	f000 80b3 	beq.w	80043ce <_printf_i+0x182>
 8004268:	d822      	bhi.n	80042b0 <_printf_i+0x64>
 800426a:	2963      	cmp	r1, #99	; 0x63
 800426c:	d036      	beq.n	80042dc <_printf_i+0x90>
 800426e:	d80a      	bhi.n	8004286 <_printf_i+0x3a>
 8004270:	2900      	cmp	r1, #0
 8004272:	f000 80b9 	beq.w	80043e8 <_printf_i+0x19c>
 8004276:	2958      	cmp	r1, #88	; 0x58
 8004278:	f000 8083 	beq.w	8004382 <_printf_i+0x136>
 800427c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004280:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004284:	e032      	b.n	80042ec <_printf_i+0xa0>
 8004286:	2964      	cmp	r1, #100	; 0x64
 8004288:	d001      	beq.n	800428e <_printf_i+0x42>
 800428a:	2969      	cmp	r1, #105	; 0x69
 800428c:	d1f6      	bne.n	800427c <_printf_i+0x30>
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	0605      	lsls	r5, r0, #24
 8004294:	f103 0104 	add.w	r1, r3, #4
 8004298:	d52a      	bpl.n	80042f0 <_printf_i+0xa4>
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6011      	str	r1, [r2, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da03      	bge.n	80042aa <_printf_i+0x5e>
 80042a2:	222d      	movs	r2, #45	; 0x2d
 80042a4:	425b      	negs	r3, r3
 80042a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042aa:	486f      	ldr	r0, [pc, #444]	; (8004468 <_printf_i+0x21c>)
 80042ac:	220a      	movs	r2, #10
 80042ae:	e039      	b.n	8004324 <_printf_i+0xd8>
 80042b0:	2973      	cmp	r1, #115	; 0x73
 80042b2:	f000 809d 	beq.w	80043f0 <_printf_i+0x1a4>
 80042b6:	d808      	bhi.n	80042ca <_printf_i+0x7e>
 80042b8:	296f      	cmp	r1, #111	; 0x6f
 80042ba:	d020      	beq.n	80042fe <_printf_i+0xb2>
 80042bc:	2970      	cmp	r1, #112	; 0x70
 80042be:	d1dd      	bne.n	800427c <_printf_i+0x30>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	f043 0320 	orr.w	r3, r3, #32
 80042c6:	6023      	str	r3, [r4, #0]
 80042c8:	e003      	b.n	80042d2 <_printf_i+0x86>
 80042ca:	2975      	cmp	r1, #117	; 0x75
 80042cc:	d017      	beq.n	80042fe <_printf_i+0xb2>
 80042ce:	2978      	cmp	r1, #120	; 0x78
 80042d0:	d1d4      	bne.n	800427c <_printf_i+0x30>
 80042d2:	2378      	movs	r3, #120	; 0x78
 80042d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042d8:	4864      	ldr	r0, [pc, #400]	; (800446c <_printf_i+0x220>)
 80042da:	e055      	b.n	8004388 <_printf_i+0x13c>
 80042dc:	6813      	ldr	r3, [r2, #0]
 80042de:	1d19      	adds	r1, r3, #4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6011      	str	r1, [r2, #0]
 80042e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ec:	2301      	movs	r3, #1
 80042ee:	e08c      	b.n	800440a <_printf_i+0x1be>
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6011      	str	r1, [r2, #0]
 80042f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042f8:	bf18      	it	ne
 80042fa:	b21b      	sxthne	r3, r3
 80042fc:	e7cf      	b.n	800429e <_printf_i+0x52>
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	6825      	ldr	r5, [r4, #0]
 8004302:	1d18      	adds	r0, r3, #4
 8004304:	6010      	str	r0, [r2, #0]
 8004306:	0628      	lsls	r0, r5, #24
 8004308:	d501      	bpl.n	800430e <_printf_i+0xc2>
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	e002      	b.n	8004314 <_printf_i+0xc8>
 800430e:	0668      	lsls	r0, r5, #25
 8004310:	d5fb      	bpl.n	800430a <_printf_i+0xbe>
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	4854      	ldr	r0, [pc, #336]	; (8004468 <_printf_i+0x21c>)
 8004316:	296f      	cmp	r1, #111	; 0x6f
 8004318:	bf14      	ite	ne
 800431a:	220a      	movne	r2, #10
 800431c:	2208      	moveq	r2, #8
 800431e:	2100      	movs	r1, #0
 8004320:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004324:	6865      	ldr	r5, [r4, #4]
 8004326:	60a5      	str	r5, [r4, #8]
 8004328:	2d00      	cmp	r5, #0
 800432a:	f2c0 8095 	blt.w	8004458 <_printf_i+0x20c>
 800432e:	6821      	ldr	r1, [r4, #0]
 8004330:	f021 0104 	bic.w	r1, r1, #4
 8004334:	6021      	str	r1, [r4, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d13d      	bne.n	80043b6 <_printf_i+0x16a>
 800433a:	2d00      	cmp	r5, #0
 800433c:	f040 808e 	bne.w	800445c <_printf_i+0x210>
 8004340:	4665      	mov	r5, ip
 8004342:	2a08      	cmp	r2, #8
 8004344:	d10b      	bne.n	800435e <_printf_i+0x112>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	07db      	lsls	r3, r3, #31
 800434a:	d508      	bpl.n	800435e <_printf_i+0x112>
 800434c:	6923      	ldr	r3, [r4, #16]
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	bfde      	ittt	le
 8004354:	2330      	movle	r3, #48	; 0x30
 8004356:	f805 3c01 	strble.w	r3, [r5, #-1]
 800435a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800435e:	ebac 0305 	sub.w	r3, ip, r5
 8004362:	6123      	str	r3, [r4, #16]
 8004364:	f8cd 8000 	str.w	r8, [sp]
 8004368:	463b      	mov	r3, r7
 800436a:	aa03      	add	r2, sp, #12
 800436c:	4621      	mov	r1, r4
 800436e:	4630      	mov	r0, r6
 8004370:	f7ff fef6 	bl	8004160 <_printf_common>
 8004374:	3001      	adds	r0, #1
 8004376:	d14d      	bne.n	8004414 <_printf_i+0x1c8>
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	b005      	add	sp, #20
 800437e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004382:	4839      	ldr	r0, [pc, #228]	; (8004468 <_printf_i+0x21c>)
 8004384:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004388:	6813      	ldr	r3, [r2, #0]
 800438a:	6821      	ldr	r1, [r4, #0]
 800438c:	1d1d      	adds	r5, r3, #4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6015      	str	r5, [r2, #0]
 8004392:	060a      	lsls	r2, r1, #24
 8004394:	d50b      	bpl.n	80043ae <_printf_i+0x162>
 8004396:	07ca      	lsls	r2, r1, #31
 8004398:	bf44      	itt	mi
 800439a:	f041 0120 	orrmi.w	r1, r1, #32
 800439e:	6021      	strmi	r1, [r4, #0]
 80043a0:	b91b      	cbnz	r3, 80043aa <_printf_i+0x15e>
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	f022 0220 	bic.w	r2, r2, #32
 80043a8:	6022      	str	r2, [r4, #0]
 80043aa:	2210      	movs	r2, #16
 80043ac:	e7b7      	b.n	800431e <_printf_i+0xd2>
 80043ae:	064d      	lsls	r5, r1, #25
 80043b0:	bf48      	it	mi
 80043b2:	b29b      	uxthmi	r3, r3
 80043b4:	e7ef      	b.n	8004396 <_printf_i+0x14a>
 80043b6:	4665      	mov	r5, ip
 80043b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80043bc:	fb02 3311 	mls	r3, r2, r1, r3
 80043c0:	5cc3      	ldrb	r3, [r0, r3]
 80043c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043c6:	460b      	mov	r3, r1
 80043c8:	2900      	cmp	r1, #0
 80043ca:	d1f5      	bne.n	80043b8 <_printf_i+0x16c>
 80043cc:	e7b9      	b.n	8004342 <_printf_i+0xf6>
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	6825      	ldr	r5, [r4, #0]
 80043d2:	6961      	ldr	r1, [r4, #20]
 80043d4:	1d18      	adds	r0, r3, #4
 80043d6:	6010      	str	r0, [r2, #0]
 80043d8:	0628      	lsls	r0, r5, #24
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	d501      	bpl.n	80043e2 <_printf_i+0x196>
 80043de:	6019      	str	r1, [r3, #0]
 80043e0:	e002      	b.n	80043e8 <_printf_i+0x19c>
 80043e2:	066a      	lsls	r2, r5, #25
 80043e4:	d5fb      	bpl.n	80043de <_printf_i+0x192>
 80043e6:	8019      	strh	r1, [r3, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	6123      	str	r3, [r4, #16]
 80043ec:	4665      	mov	r5, ip
 80043ee:	e7b9      	b.n	8004364 <_printf_i+0x118>
 80043f0:	6813      	ldr	r3, [r2, #0]
 80043f2:	1d19      	adds	r1, r3, #4
 80043f4:	6011      	str	r1, [r2, #0]
 80043f6:	681d      	ldr	r5, [r3, #0]
 80043f8:	6862      	ldr	r2, [r4, #4]
 80043fa:	2100      	movs	r1, #0
 80043fc:	4628      	mov	r0, r5
 80043fe:	f7fb ff07 	bl	8000210 <memchr>
 8004402:	b108      	cbz	r0, 8004408 <_printf_i+0x1bc>
 8004404:	1b40      	subs	r0, r0, r5
 8004406:	6060      	str	r0, [r4, #4]
 8004408:	6863      	ldr	r3, [r4, #4]
 800440a:	6123      	str	r3, [r4, #16]
 800440c:	2300      	movs	r3, #0
 800440e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004412:	e7a7      	b.n	8004364 <_printf_i+0x118>
 8004414:	6923      	ldr	r3, [r4, #16]
 8004416:	462a      	mov	r2, r5
 8004418:	4639      	mov	r1, r7
 800441a:	4630      	mov	r0, r6
 800441c:	47c0      	blx	r8
 800441e:	3001      	adds	r0, #1
 8004420:	d0aa      	beq.n	8004378 <_printf_i+0x12c>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	079b      	lsls	r3, r3, #30
 8004426:	d413      	bmi.n	8004450 <_printf_i+0x204>
 8004428:	68e0      	ldr	r0, [r4, #12]
 800442a:	9b03      	ldr	r3, [sp, #12]
 800442c:	4298      	cmp	r0, r3
 800442e:	bfb8      	it	lt
 8004430:	4618      	movlt	r0, r3
 8004432:	e7a3      	b.n	800437c <_printf_i+0x130>
 8004434:	2301      	movs	r3, #1
 8004436:	464a      	mov	r2, r9
 8004438:	4639      	mov	r1, r7
 800443a:	4630      	mov	r0, r6
 800443c:	47c0      	blx	r8
 800443e:	3001      	adds	r0, #1
 8004440:	d09a      	beq.n	8004378 <_printf_i+0x12c>
 8004442:	3501      	adds	r5, #1
 8004444:	68e3      	ldr	r3, [r4, #12]
 8004446:	9a03      	ldr	r2, [sp, #12]
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	42ab      	cmp	r3, r5
 800444c:	dcf2      	bgt.n	8004434 <_printf_i+0x1e8>
 800444e:	e7eb      	b.n	8004428 <_printf_i+0x1dc>
 8004450:	2500      	movs	r5, #0
 8004452:	f104 0919 	add.w	r9, r4, #25
 8004456:	e7f5      	b.n	8004444 <_printf_i+0x1f8>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ac      	bne.n	80043b6 <_printf_i+0x16a>
 800445c:	7803      	ldrb	r3, [r0, #0]
 800445e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004462:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004466:	e76c      	b.n	8004342 <_printf_i+0xf6>
 8004468:	08004a6d 	.word	0x08004a6d
 800446c:	08004a7e 	.word	0x08004a7e

08004470 <__sread>:
 8004470:	b510      	push	{r4, lr}
 8004472:	460c      	mov	r4, r1
 8004474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004478:	f000 fa46 	bl	8004908 <_read_r>
 800447c:	2800      	cmp	r0, #0
 800447e:	bfab      	itete	ge
 8004480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004482:	89a3      	ldrhlt	r3, [r4, #12]
 8004484:	181b      	addge	r3, r3, r0
 8004486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800448a:	bfac      	ite	ge
 800448c:	6563      	strge	r3, [r4, #84]	; 0x54
 800448e:	81a3      	strhlt	r3, [r4, #12]
 8004490:	bd10      	pop	{r4, pc}

08004492 <__swrite>:
 8004492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004496:	461f      	mov	r7, r3
 8004498:	898b      	ldrh	r3, [r1, #12]
 800449a:	05db      	lsls	r3, r3, #23
 800449c:	4605      	mov	r5, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	4616      	mov	r6, r2
 80044a2:	d505      	bpl.n	80044b0 <__swrite+0x1e>
 80044a4:	2302      	movs	r3, #2
 80044a6:	2200      	movs	r2, #0
 80044a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ac:	f000 f9b6 	bl	800481c <_lseek_r>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	4632      	mov	r2, r6
 80044be:	463b      	mov	r3, r7
 80044c0:	4628      	mov	r0, r5
 80044c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044c6:	f000 b869 	b.w	800459c <_write_r>

080044ca <__sseek>:
 80044ca:	b510      	push	{r4, lr}
 80044cc:	460c      	mov	r4, r1
 80044ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d2:	f000 f9a3 	bl	800481c <_lseek_r>
 80044d6:	1c43      	adds	r3, r0, #1
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	bf15      	itete	ne
 80044dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80044de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044e6:	81a3      	strheq	r3, [r4, #12]
 80044e8:	bf18      	it	ne
 80044ea:	81a3      	strhne	r3, [r4, #12]
 80044ec:	bd10      	pop	{r4, pc}

080044ee <__sclose>:
 80044ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f2:	f000 b8d3 	b.w	800469c <_close_r>
	...

080044f8 <__swbuf_r>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	460e      	mov	r6, r1
 80044fc:	4614      	mov	r4, r2
 80044fe:	4605      	mov	r5, r0
 8004500:	b118      	cbz	r0, 800450a <__swbuf_r+0x12>
 8004502:	6983      	ldr	r3, [r0, #24]
 8004504:	b90b      	cbnz	r3, 800450a <__swbuf_r+0x12>
 8004506:	f7ff fc5f 	bl	8003dc8 <__sinit>
 800450a:	4b21      	ldr	r3, [pc, #132]	; (8004590 <__swbuf_r+0x98>)
 800450c:	429c      	cmp	r4, r3
 800450e:	d12a      	bne.n	8004566 <__swbuf_r+0x6e>
 8004510:	686c      	ldr	r4, [r5, #4]
 8004512:	69a3      	ldr	r3, [r4, #24]
 8004514:	60a3      	str	r3, [r4, #8]
 8004516:	89a3      	ldrh	r3, [r4, #12]
 8004518:	071a      	lsls	r2, r3, #28
 800451a:	d52e      	bpl.n	800457a <__swbuf_r+0x82>
 800451c:	6923      	ldr	r3, [r4, #16]
 800451e:	b363      	cbz	r3, 800457a <__swbuf_r+0x82>
 8004520:	6923      	ldr	r3, [r4, #16]
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	1ac0      	subs	r0, r0, r3
 8004526:	6963      	ldr	r3, [r4, #20]
 8004528:	b2f6      	uxtb	r6, r6
 800452a:	4283      	cmp	r3, r0
 800452c:	4637      	mov	r7, r6
 800452e:	dc04      	bgt.n	800453a <__swbuf_r+0x42>
 8004530:	4621      	mov	r1, r4
 8004532:	4628      	mov	r0, r5
 8004534:	f000 f948 	bl	80047c8 <_fflush_r>
 8004538:	bb28      	cbnz	r0, 8004586 <__swbuf_r+0x8e>
 800453a:	68a3      	ldr	r3, [r4, #8]
 800453c:	3b01      	subs	r3, #1
 800453e:	60a3      	str	r3, [r4, #8]
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	6022      	str	r2, [r4, #0]
 8004546:	701e      	strb	r6, [r3, #0]
 8004548:	6963      	ldr	r3, [r4, #20]
 800454a:	3001      	adds	r0, #1
 800454c:	4283      	cmp	r3, r0
 800454e:	d004      	beq.n	800455a <__swbuf_r+0x62>
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	07db      	lsls	r3, r3, #31
 8004554:	d519      	bpl.n	800458a <__swbuf_r+0x92>
 8004556:	2e0a      	cmp	r6, #10
 8004558:	d117      	bne.n	800458a <__swbuf_r+0x92>
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 f933 	bl	80047c8 <_fflush_r>
 8004562:	b190      	cbz	r0, 800458a <__swbuf_r+0x92>
 8004564:	e00f      	b.n	8004586 <__swbuf_r+0x8e>
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <__swbuf_r+0x9c>)
 8004568:	429c      	cmp	r4, r3
 800456a:	d101      	bne.n	8004570 <__swbuf_r+0x78>
 800456c:	68ac      	ldr	r4, [r5, #8]
 800456e:	e7d0      	b.n	8004512 <__swbuf_r+0x1a>
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <__swbuf_r+0xa0>)
 8004572:	429c      	cmp	r4, r3
 8004574:	bf08      	it	eq
 8004576:	68ec      	ldreq	r4, [r5, #12]
 8004578:	e7cb      	b.n	8004512 <__swbuf_r+0x1a>
 800457a:	4621      	mov	r1, r4
 800457c:	4628      	mov	r0, r5
 800457e:	f000 f81f 	bl	80045c0 <__swsetup_r>
 8004582:	2800      	cmp	r0, #0
 8004584:	d0cc      	beq.n	8004520 <__swbuf_r+0x28>
 8004586:	f04f 37ff 	mov.w	r7, #4294967295
 800458a:	4638      	mov	r0, r7
 800458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800458e:	bf00      	nop
 8004590:	08004a1c 	.word	0x08004a1c
 8004594:	08004a3c 	.word	0x08004a3c
 8004598:	080049fc 	.word	0x080049fc

0800459c <_write_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4c07      	ldr	r4, [pc, #28]	; (80045bc <_write_r+0x20>)
 80045a0:	4605      	mov	r5, r0
 80045a2:	4608      	mov	r0, r1
 80045a4:	4611      	mov	r1, r2
 80045a6:	2200      	movs	r2, #0
 80045a8:	6022      	str	r2, [r4, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7fd f815 	bl	80015da <_write>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_write_r+0x1e>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_write_r+0x1e>
 80045b8:	602b      	str	r3, [r5, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	20000198 	.word	0x20000198

080045c0 <__swsetup_r>:
 80045c0:	4b32      	ldr	r3, [pc, #200]	; (800468c <__swsetup_r+0xcc>)
 80045c2:	b570      	push	{r4, r5, r6, lr}
 80045c4:	681d      	ldr	r5, [r3, #0]
 80045c6:	4606      	mov	r6, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	b125      	cbz	r5, 80045d6 <__swsetup_r+0x16>
 80045cc:	69ab      	ldr	r3, [r5, #24]
 80045ce:	b913      	cbnz	r3, 80045d6 <__swsetup_r+0x16>
 80045d0:	4628      	mov	r0, r5
 80045d2:	f7ff fbf9 	bl	8003dc8 <__sinit>
 80045d6:	4b2e      	ldr	r3, [pc, #184]	; (8004690 <__swsetup_r+0xd0>)
 80045d8:	429c      	cmp	r4, r3
 80045da:	d10f      	bne.n	80045fc <__swsetup_r+0x3c>
 80045dc:	686c      	ldr	r4, [r5, #4]
 80045de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	0715      	lsls	r5, r2, #28
 80045e6:	d42c      	bmi.n	8004642 <__swsetup_r+0x82>
 80045e8:	06d0      	lsls	r0, r2, #27
 80045ea:	d411      	bmi.n	8004610 <__swsetup_r+0x50>
 80045ec:	2209      	movs	r2, #9
 80045ee:	6032      	str	r2, [r6, #0]
 80045f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f4:	81a3      	strh	r3, [r4, #12]
 80045f6:	f04f 30ff 	mov.w	r0, #4294967295
 80045fa:	e03e      	b.n	800467a <__swsetup_r+0xba>
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <__swsetup_r+0xd4>)
 80045fe:	429c      	cmp	r4, r3
 8004600:	d101      	bne.n	8004606 <__swsetup_r+0x46>
 8004602:	68ac      	ldr	r4, [r5, #8]
 8004604:	e7eb      	b.n	80045de <__swsetup_r+0x1e>
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <__swsetup_r+0xd8>)
 8004608:	429c      	cmp	r4, r3
 800460a:	bf08      	it	eq
 800460c:	68ec      	ldreq	r4, [r5, #12]
 800460e:	e7e6      	b.n	80045de <__swsetup_r+0x1e>
 8004610:	0751      	lsls	r1, r2, #29
 8004612:	d512      	bpl.n	800463a <__swsetup_r+0x7a>
 8004614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004616:	b141      	cbz	r1, 800462a <__swsetup_r+0x6a>
 8004618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800461c:	4299      	cmp	r1, r3
 800461e:	d002      	beq.n	8004626 <__swsetup_r+0x66>
 8004620:	4630      	mov	r0, r6
 8004622:	f7ff fac1 	bl	8003ba8 <_free_r>
 8004626:	2300      	movs	r3, #0
 8004628:	6363      	str	r3, [r4, #52]	; 0x34
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	2300      	movs	r3, #0
 8004634:	6063      	str	r3, [r4, #4]
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	f043 0308 	orr.w	r3, r3, #8
 8004640:	81a3      	strh	r3, [r4, #12]
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	b94b      	cbnz	r3, 800465a <__swsetup_r+0x9a>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800464c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004650:	d003      	beq.n	800465a <__swsetup_r+0x9a>
 8004652:	4621      	mov	r1, r4
 8004654:	4630      	mov	r0, r6
 8004656:	f000 f917 	bl	8004888 <__smakebuf_r>
 800465a:	89a2      	ldrh	r2, [r4, #12]
 800465c:	f012 0301 	ands.w	r3, r2, #1
 8004660:	d00c      	beq.n	800467c <__swsetup_r+0xbc>
 8004662:	2300      	movs	r3, #0
 8004664:	60a3      	str	r3, [r4, #8]
 8004666:	6963      	ldr	r3, [r4, #20]
 8004668:	425b      	negs	r3, r3
 800466a:	61a3      	str	r3, [r4, #24]
 800466c:	6923      	ldr	r3, [r4, #16]
 800466e:	b953      	cbnz	r3, 8004686 <__swsetup_r+0xc6>
 8004670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004674:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004678:	d1ba      	bne.n	80045f0 <__swsetup_r+0x30>
 800467a:	bd70      	pop	{r4, r5, r6, pc}
 800467c:	0792      	lsls	r2, r2, #30
 800467e:	bf58      	it	pl
 8004680:	6963      	ldrpl	r3, [r4, #20]
 8004682:	60a3      	str	r3, [r4, #8]
 8004684:	e7f2      	b.n	800466c <__swsetup_r+0xac>
 8004686:	2000      	movs	r0, #0
 8004688:	e7f7      	b.n	800467a <__swsetup_r+0xba>
 800468a:	bf00      	nop
 800468c:	2000000c 	.word	0x2000000c
 8004690:	08004a1c 	.word	0x08004a1c
 8004694:	08004a3c 	.word	0x08004a3c
 8004698:	080049fc 	.word	0x080049fc

0800469c <_close_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4c06      	ldr	r4, [pc, #24]	; (80046b8 <_close_r+0x1c>)
 80046a0:	2300      	movs	r3, #0
 80046a2:	4605      	mov	r5, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	6023      	str	r3, [r4, #0]
 80046a8:	f7fc ffb3 	bl	8001612 <_close>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_close_r+0x1a>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_close_r+0x1a>
 80046b4:	602b      	str	r3, [r5, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	20000198 	.word	0x20000198

080046bc <__sflush_r>:
 80046bc:	898a      	ldrh	r2, [r1, #12]
 80046be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c2:	4605      	mov	r5, r0
 80046c4:	0710      	lsls	r0, r2, #28
 80046c6:	460c      	mov	r4, r1
 80046c8:	d458      	bmi.n	800477c <__sflush_r+0xc0>
 80046ca:	684b      	ldr	r3, [r1, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	dc05      	bgt.n	80046dc <__sflush_r+0x20>
 80046d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	dc02      	bgt.n	80046dc <__sflush_r+0x20>
 80046d6:	2000      	movs	r0, #0
 80046d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046de:	2e00      	cmp	r6, #0
 80046e0:	d0f9      	beq.n	80046d6 <__sflush_r+0x1a>
 80046e2:	2300      	movs	r3, #0
 80046e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046e8:	682f      	ldr	r7, [r5, #0]
 80046ea:	6a21      	ldr	r1, [r4, #32]
 80046ec:	602b      	str	r3, [r5, #0]
 80046ee:	d032      	beq.n	8004756 <__sflush_r+0x9a>
 80046f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	075a      	lsls	r2, r3, #29
 80046f6:	d505      	bpl.n	8004704 <__sflush_r+0x48>
 80046f8:	6863      	ldr	r3, [r4, #4]
 80046fa:	1ac0      	subs	r0, r0, r3
 80046fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046fe:	b10b      	cbz	r3, 8004704 <__sflush_r+0x48>
 8004700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004702:	1ac0      	subs	r0, r0, r3
 8004704:	2300      	movs	r3, #0
 8004706:	4602      	mov	r2, r0
 8004708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800470a:	6a21      	ldr	r1, [r4, #32]
 800470c:	4628      	mov	r0, r5
 800470e:	47b0      	blx	r6
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	d106      	bne.n	8004724 <__sflush_r+0x68>
 8004716:	6829      	ldr	r1, [r5, #0]
 8004718:	291d      	cmp	r1, #29
 800471a:	d848      	bhi.n	80047ae <__sflush_r+0xf2>
 800471c:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <__sflush_r+0x108>)
 800471e:	40ca      	lsrs	r2, r1
 8004720:	07d6      	lsls	r6, r2, #31
 8004722:	d544      	bpl.n	80047ae <__sflush_r+0xf2>
 8004724:	2200      	movs	r2, #0
 8004726:	6062      	str	r2, [r4, #4]
 8004728:	04d9      	lsls	r1, r3, #19
 800472a:	6922      	ldr	r2, [r4, #16]
 800472c:	6022      	str	r2, [r4, #0]
 800472e:	d504      	bpl.n	800473a <__sflush_r+0x7e>
 8004730:	1c42      	adds	r2, r0, #1
 8004732:	d101      	bne.n	8004738 <__sflush_r+0x7c>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	b903      	cbnz	r3, 800473a <__sflush_r+0x7e>
 8004738:	6560      	str	r0, [r4, #84]	; 0x54
 800473a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800473c:	602f      	str	r7, [r5, #0]
 800473e:	2900      	cmp	r1, #0
 8004740:	d0c9      	beq.n	80046d6 <__sflush_r+0x1a>
 8004742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004746:	4299      	cmp	r1, r3
 8004748:	d002      	beq.n	8004750 <__sflush_r+0x94>
 800474a:	4628      	mov	r0, r5
 800474c:	f7ff fa2c 	bl	8003ba8 <_free_r>
 8004750:	2000      	movs	r0, #0
 8004752:	6360      	str	r0, [r4, #52]	; 0x34
 8004754:	e7c0      	b.n	80046d8 <__sflush_r+0x1c>
 8004756:	2301      	movs	r3, #1
 8004758:	4628      	mov	r0, r5
 800475a:	47b0      	blx	r6
 800475c:	1c41      	adds	r1, r0, #1
 800475e:	d1c8      	bne.n	80046f2 <__sflush_r+0x36>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0c5      	beq.n	80046f2 <__sflush_r+0x36>
 8004766:	2b1d      	cmp	r3, #29
 8004768:	d001      	beq.n	800476e <__sflush_r+0xb2>
 800476a:	2b16      	cmp	r3, #22
 800476c:	d101      	bne.n	8004772 <__sflush_r+0xb6>
 800476e:	602f      	str	r7, [r5, #0]
 8004770:	e7b1      	b.n	80046d6 <__sflush_r+0x1a>
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	e7ad      	b.n	80046d8 <__sflush_r+0x1c>
 800477c:	690f      	ldr	r7, [r1, #16]
 800477e:	2f00      	cmp	r7, #0
 8004780:	d0a9      	beq.n	80046d6 <__sflush_r+0x1a>
 8004782:	0793      	lsls	r3, r2, #30
 8004784:	680e      	ldr	r6, [r1, #0]
 8004786:	bf08      	it	eq
 8004788:	694b      	ldreq	r3, [r1, #20]
 800478a:	600f      	str	r7, [r1, #0]
 800478c:	bf18      	it	ne
 800478e:	2300      	movne	r3, #0
 8004790:	eba6 0807 	sub.w	r8, r6, r7
 8004794:	608b      	str	r3, [r1, #8]
 8004796:	f1b8 0f00 	cmp.w	r8, #0
 800479a:	dd9c      	ble.n	80046d6 <__sflush_r+0x1a>
 800479c:	4643      	mov	r3, r8
 800479e:	463a      	mov	r2, r7
 80047a0:	6a21      	ldr	r1, [r4, #32]
 80047a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047a4:	4628      	mov	r0, r5
 80047a6:	47b0      	blx	r6
 80047a8:	2800      	cmp	r0, #0
 80047aa:	dc06      	bgt.n	80047ba <__sflush_r+0xfe>
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	e78e      	b.n	80046d8 <__sflush_r+0x1c>
 80047ba:	4407      	add	r7, r0
 80047bc:	eba8 0800 	sub.w	r8, r8, r0
 80047c0:	e7e9      	b.n	8004796 <__sflush_r+0xda>
 80047c2:	bf00      	nop
 80047c4:	20400001 	.word	0x20400001

080047c8 <_fflush_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	690b      	ldr	r3, [r1, #16]
 80047cc:	4605      	mov	r5, r0
 80047ce:	460c      	mov	r4, r1
 80047d0:	b1db      	cbz	r3, 800480a <_fflush_r+0x42>
 80047d2:	b118      	cbz	r0, 80047dc <_fflush_r+0x14>
 80047d4:	6983      	ldr	r3, [r0, #24]
 80047d6:	b90b      	cbnz	r3, 80047dc <_fflush_r+0x14>
 80047d8:	f7ff faf6 	bl	8003dc8 <__sinit>
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <_fflush_r+0x48>)
 80047de:	429c      	cmp	r4, r3
 80047e0:	d109      	bne.n	80047f6 <_fflush_r+0x2e>
 80047e2:	686c      	ldr	r4, [r5, #4]
 80047e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047e8:	b17b      	cbz	r3, 800480a <_fflush_r+0x42>
 80047ea:	4621      	mov	r1, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047f2:	f7ff bf63 	b.w	80046bc <__sflush_r>
 80047f6:	4b07      	ldr	r3, [pc, #28]	; (8004814 <_fflush_r+0x4c>)
 80047f8:	429c      	cmp	r4, r3
 80047fa:	d101      	bne.n	8004800 <_fflush_r+0x38>
 80047fc:	68ac      	ldr	r4, [r5, #8]
 80047fe:	e7f1      	b.n	80047e4 <_fflush_r+0x1c>
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <_fflush_r+0x50>)
 8004802:	429c      	cmp	r4, r3
 8004804:	bf08      	it	eq
 8004806:	68ec      	ldreq	r4, [r5, #12]
 8004808:	e7ec      	b.n	80047e4 <_fflush_r+0x1c>
 800480a:	2000      	movs	r0, #0
 800480c:	bd38      	pop	{r3, r4, r5, pc}
 800480e:	bf00      	nop
 8004810:	08004a1c 	.word	0x08004a1c
 8004814:	08004a3c 	.word	0x08004a3c
 8004818:	080049fc 	.word	0x080049fc

0800481c <_lseek_r>:
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	4c07      	ldr	r4, [pc, #28]	; (800483c <_lseek_r+0x20>)
 8004820:	4605      	mov	r5, r0
 8004822:	4608      	mov	r0, r1
 8004824:	4611      	mov	r1, r2
 8004826:	2200      	movs	r2, #0
 8004828:	6022      	str	r2, [r4, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	f7fc ff18 	bl	8001660 <_lseek>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_lseek_r+0x1e>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	b103      	cbz	r3, 800483a <_lseek_r+0x1e>
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	20000198 	.word	0x20000198

08004840 <__swhatbuf_r>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	460e      	mov	r6, r1
 8004844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004848:	2900      	cmp	r1, #0
 800484a:	b096      	sub	sp, #88	; 0x58
 800484c:	4614      	mov	r4, r2
 800484e:	461d      	mov	r5, r3
 8004850:	da07      	bge.n	8004862 <__swhatbuf_r+0x22>
 8004852:	2300      	movs	r3, #0
 8004854:	602b      	str	r3, [r5, #0]
 8004856:	89b3      	ldrh	r3, [r6, #12]
 8004858:	061a      	lsls	r2, r3, #24
 800485a:	d410      	bmi.n	800487e <__swhatbuf_r+0x3e>
 800485c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004860:	e00e      	b.n	8004880 <__swhatbuf_r+0x40>
 8004862:	466a      	mov	r2, sp
 8004864:	f000 f862 	bl	800492c <_fstat_r>
 8004868:	2800      	cmp	r0, #0
 800486a:	dbf2      	blt.n	8004852 <__swhatbuf_r+0x12>
 800486c:	9a01      	ldr	r2, [sp, #4]
 800486e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004872:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004876:	425a      	negs	r2, r3
 8004878:	415a      	adcs	r2, r3
 800487a:	602a      	str	r2, [r5, #0]
 800487c:	e7ee      	b.n	800485c <__swhatbuf_r+0x1c>
 800487e:	2340      	movs	r3, #64	; 0x40
 8004880:	2000      	movs	r0, #0
 8004882:	6023      	str	r3, [r4, #0]
 8004884:	b016      	add	sp, #88	; 0x58
 8004886:	bd70      	pop	{r4, r5, r6, pc}

08004888 <__smakebuf_r>:
 8004888:	898b      	ldrh	r3, [r1, #12]
 800488a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800488c:	079d      	lsls	r5, r3, #30
 800488e:	4606      	mov	r6, r0
 8004890:	460c      	mov	r4, r1
 8004892:	d507      	bpl.n	80048a4 <__smakebuf_r+0x1c>
 8004894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	6123      	str	r3, [r4, #16]
 800489c:	2301      	movs	r3, #1
 800489e:	6163      	str	r3, [r4, #20]
 80048a0:	b002      	add	sp, #8
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
 80048a4:	ab01      	add	r3, sp, #4
 80048a6:	466a      	mov	r2, sp
 80048a8:	f7ff ffca 	bl	8004840 <__swhatbuf_r>
 80048ac:	9900      	ldr	r1, [sp, #0]
 80048ae:	4605      	mov	r5, r0
 80048b0:	4630      	mov	r0, r6
 80048b2:	f7ff f9c7 	bl	8003c44 <_malloc_r>
 80048b6:	b948      	cbnz	r0, 80048cc <__smakebuf_r+0x44>
 80048b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048bc:	059a      	lsls	r2, r3, #22
 80048be:	d4ef      	bmi.n	80048a0 <__smakebuf_r+0x18>
 80048c0:	f023 0303 	bic.w	r3, r3, #3
 80048c4:	f043 0302 	orr.w	r3, r3, #2
 80048c8:	81a3      	strh	r3, [r4, #12]
 80048ca:	e7e3      	b.n	8004894 <__smakebuf_r+0xc>
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <__smakebuf_r+0x7c>)
 80048ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	6020      	str	r0, [r4, #0]
 80048d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	9b00      	ldr	r3, [sp, #0]
 80048dc:	6163      	str	r3, [r4, #20]
 80048de:	9b01      	ldr	r3, [sp, #4]
 80048e0:	6120      	str	r0, [r4, #16]
 80048e2:	b15b      	cbz	r3, 80048fc <__smakebuf_r+0x74>
 80048e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048e8:	4630      	mov	r0, r6
 80048ea:	f000 f831 	bl	8004950 <_isatty_r>
 80048ee:	b128      	cbz	r0, 80048fc <__smakebuf_r+0x74>
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	81a3      	strh	r3, [r4, #12]
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	431d      	orrs	r5, r3
 8004900:	81a5      	strh	r5, [r4, #12]
 8004902:	e7cd      	b.n	80048a0 <__smakebuf_r+0x18>
 8004904:	08003d91 	.word	0x08003d91

08004908 <_read_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4c07      	ldr	r4, [pc, #28]	; (8004928 <_read_r+0x20>)
 800490c:	4605      	mov	r5, r0
 800490e:	4608      	mov	r0, r1
 8004910:	4611      	mov	r1, r2
 8004912:	2200      	movs	r2, #0
 8004914:	6022      	str	r2, [r4, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7fc fe42 	bl	80015a0 <_read>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_read_r+0x1e>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	b103      	cbz	r3, 8004926 <_read_r+0x1e>
 8004924:	602b      	str	r3, [r5, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20000198 	.word	0x20000198

0800492c <_fstat_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4c07      	ldr	r4, [pc, #28]	; (800494c <_fstat_r+0x20>)
 8004930:	2300      	movs	r3, #0
 8004932:	4605      	mov	r5, r0
 8004934:	4608      	mov	r0, r1
 8004936:	4611      	mov	r1, r2
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	f7fc fe76 	bl	800162a <_fstat>
 800493e:	1c43      	adds	r3, r0, #1
 8004940:	d102      	bne.n	8004948 <_fstat_r+0x1c>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	b103      	cbz	r3, 8004948 <_fstat_r+0x1c>
 8004946:	602b      	str	r3, [r5, #0]
 8004948:	bd38      	pop	{r3, r4, r5, pc}
 800494a:	bf00      	nop
 800494c:	20000198 	.word	0x20000198

08004950 <_isatty_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4c06      	ldr	r4, [pc, #24]	; (800496c <_isatty_r+0x1c>)
 8004954:	2300      	movs	r3, #0
 8004956:	4605      	mov	r5, r0
 8004958:	4608      	mov	r0, r1
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	f7fc fe75 	bl	800164a <_isatty>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d102      	bne.n	800496a <_isatty_r+0x1a>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	b103      	cbz	r3, 800496a <_isatty_r+0x1a>
 8004968:	602b      	str	r3, [r5, #0]
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	20000198 	.word	0x20000198

08004970 <_init>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	bf00      	nop
 8004974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004976:	bc08      	pop	{r3}
 8004978:	469e      	mov	lr, r3
 800497a:	4770      	bx	lr

0800497c <_fini>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr
